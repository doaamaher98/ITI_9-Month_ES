
SPI_Configurable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800060  00800060  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ee  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009af  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aac  00000000  00000000  000021d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00002c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aef  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082d  00000000  00000000  00003a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_12>
  34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_13>
  38:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_14>
  3c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_15>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 37       	cpi	r26, 0x7B	; 123
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  74:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SPI_void_CS_Control>:
	/* Send your Data */
	SPI_ReadWrite_Blocking(Data);
	/* Apply HIGH to CS Pin to make write latch enable instruction executed */
	SPI_void_CS_Control(HIGH_STATE);
	return LocalErrorStatus;
}
  7c:	88 23       	and	r24, r24
  7e:	19 f0       	breq	.+6      	; 0x86 <SPI_void_CS_Control+0xa>
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	29 f0       	breq	.+10     	; 0x8e <SPI_void_CS_Control+0x12>
  84:	08 95       	ret
  86:	88 b3       	in	r24, 0x18	; 24
  88:	8e 7f       	andi	r24, 0xFE	; 254
  8a:	88 bb       	out	0x18, r24	; 24
  8c:	08 95       	ret
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	81 60       	ori	r24, 0x01	; 1
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret

00000096 <EEPROM_voidInit>:
  96:	e0 e6       	ldi	r30, 0x60	; 96
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 83       	st	Z, r24
  9e:	81 83       	std	Z+1, r24	; 0x01
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	82 83       	std	Z+2, r24	; 0x02
  a4:	13 82       	std	Z+3, r1	; 0x03
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	87 83       	std	Z+7, r24	; 0x07
  aa:	14 82       	std	Z+4, r1	; 0x04
  ac:	87 b3       	in	r24, 0x17	; 23
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Init>
  bc:	08 95       	ret

000000be <EEPROM_u8ReadByte>:

/********************************************************************/
u8 EEPROM_u8ReadByte (u8 Address)
{
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
	u8 ReadData = 0;
	
	// Low
	SPI_void_CS_Control (LOW_STATE);
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_void_CS_Control>
	// Read Instruction
	SPI_ReadWrite_Blocking(READ_INSTRUCTION_OPCODE);
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 2d 01 	call	0x25a	; 0x25a <SPI_ReadWrite_Blocking>
	// Address
	SPI_ReadWrite_Blocking(Address);
  ce:	8c 2f       	mov	r24, r28
  d0:	0e 94 2d 01 	call	0x25a	; 0x25a <SPI_ReadWrite_Blocking>
	// Send Dummy to read_data to enable the clock
	ReadData = SPI_ReadWrite_Blocking(DUMMY);
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 2d 01 	call	0x25a	; 0x25a <SPI_ReadWrite_Blocking>
  da:	c8 2f       	mov	r28, r24
	SPI_void_CS_Control (HIGH_STATE);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_void_CS_Control>
	
	return ReadData;
  e2:	8c 2f       	mov	r24, r28
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <main>:
#include "EEPROM_Interface.h"
#include <util/delay.h>

int main(void)
{
	EEPROM_voidInit();
  e8:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_voidInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	83 ec       	ldi	r24, 0xC3	; 195
  ee:	99 e0       	ldi	r25, 0x09	; 9
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x8>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0xe>
  f6:	00 00       	nop
	_delay_ms(10);
	
    /* Replace with your application code */
    while (1) 
    {
		EEPROM_u8ReadByte(0x00);
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_u8ReadByte>
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x1a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x20>
 108:	00 00       	nop
		_delay_ms(1);
		EEPROM_u8ReadByte(0x01);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_u8ReadByte>
 110:	89 ef       	ldi	r24, 0xF9	; 249
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x2c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x32>
 11a:	00 00       	nop
		_delay_ms(1);
		EEPROM_u8ReadByte(0x02);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_u8ReadByte>
 122:	ea cf       	rjmp	.-44     	; 0xf8 <main+0x10>

00000124 <__vector_12>:
#define			SS			4

#define			MISO		6

ISR(SPI_STC_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	if (SPI0.SPI_TransfereInterruptCall != NULL_PTR)
 146:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 14a:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 14e:	30 97       	sbiw	r30, 0x00	; 0
 150:	09 f0       	breq	.+2      	; 0x154 <__vector_12+0x30>
	{
		SPI0.SPI_TransfereInterruptCall();
 152:	09 95       	icall
	}
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <SPI_Init>:

	SPI_ConfigStruct SPI0 = {.SPI_TransfereInterruptCall = NULL_PTR};

	void SPI_Init(void)
	{
		SPCR = 0;
 176:	1d b8       	out	0x0d, r1	; 13
		SPSR = 0;
 178:	1e b8       	out	0x0e, r1	; 14
		switch(SPI0.EnableControl)
 17a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	09 f0       	breq	.+2      	; 0x184 <SPI_Init+0xe>
 182:	6a c0       	rjmp	.+212    	; 0x258 <SPI_Init+0xe2>
		{
			case SPI_Disable:
			break;
			case SPI_Enable:
				 switch(SPI0.Mode)
 184:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 188:	88 23       	and	r24, r24
 18a:	61 f0       	breq	.+24     	; 0x1a4 <SPI_Init+0x2e>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	69 f4       	brne	.+26     	; 0x1aa <SPI_Init+0x34>
				 {
					 case SPI_MASTER:
					 SPCR |= (1<<MSTR);
 190:	8d b1       	in	r24, 0x0d	; 13
 192:	80 61       	ori	r24, 0x10	; 16
 194:	8d b9       	out	0x0d, r24	; 13
					 DDRB |= (1<<5) | (1<<7) | (1<<4);
 196:	87 b3       	in	r24, 0x17	; 23
 198:	80 6b       	ori	r24, 0xB0	; 176
 19a:	87 bb       	out	0x17, r24	; 23
					 PORTB |= (1<<PB4) | (1<<5);
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	80 63       	ori	r24, 0x30	; 48
 1a0:	88 bb       	out	0x18, r24	; 24
					 break;
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <SPI_Init+0x34>
					 case SPI_SLAVE:
					 DDRB |= (1<<6);
 1a4:	87 b3       	in	r24, 0x17	; 23
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	87 bb       	out	0x17, r24	; 23
					 break;
				 }
				 switch(SPI0.DataOrder)
 1aa:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	19 f4       	brne	.+6      	; 0x1b8 <SPI_Init+0x42>
				 {
					 case SPI_LSB:
					 SPCR |= (1<<DORD);
 1b2:	8d b1       	in	r24, 0x0d	; 13
 1b4:	80 62       	ori	r24, 0x20	; 32
 1b6:	8d b9       	out	0x0d, r24	; 13
					 break;
					 case SPI_MSB:
					 break;
				 }
				 switch(SPI0.InterruptState)
 1b8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	19 f4       	brne	.+6      	; 0x1c6 <SPI_Init+0x50>
				 {
					 case SPI_InterruptDisable:
					 break;
					 case SPI_InterruptEnable:
					 SPCR |= (1<<SPIE);
 1c0:	8d b1       	in	r24, 0x0d	; 13
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	8d b9       	out	0x0d, r24	; 13
					 break;
				 }
				 switch(SPI0.ClockMode)
 1c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	41 f0       	breq	.+16     	; 0x1de <SPI_Init+0x68>
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	69 f0       	breq	.+26     	; 0x1ec <SPI_Init+0x76>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	89 f4       	brne	.+34     	; 0x1f8 <SPI_Init+0x82>
				 {
					 case SPI_CLKMode0:
					 break;
					 case SPI_CLKMode1:
					 SPCR |= (1<<CPHA);
 1d6:	8d b1       	in	r24, 0x0d	; 13
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	8d b9       	out	0x0d, r24	; 13
					 break;
 1dc:	0d c0       	rjmp	.+26     	; 0x1f8 <SPI_Init+0x82>
					 case SPI_CLKMode2:
					 SPCR |= (1<<CPOL);
 1de:	8d b1       	in	r24, 0x0d	; 13
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	8d b9       	out	0x0d, r24	; 13
					 	/* 
						 * Note : if Used SPI Mode 3 or Mode 2 (CLK IDLE STATE = HIGH)
						 * in Some MicroControllers we must Explicitly State that The Default clk pin state is High 
						 * By Setting the pin to Output with a High Value 
						 */
					PORTB |= (1<<7);
 1e4:	88 b3       	in	r24, 0x18	; 24
 1e6:	80 68       	ori	r24, 0x80	; 128
 1e8:	88 bb       	out	0x18, r24	; 24
					 break;
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <SPI_Init+0x82>
					 case SPI_CLKMode3:
					 SPCR |= (1<<CPHA) | (1<<CPOL);
 1ec:	8d b1       	in	r24, 0x0d	; 13
 1ee:	8c 60       	ori	r24, 0x0C	; 12
 1f0:	8d b9       	out	0x0d, r24	; 13
					PORTB |= (1<<7);
 1f2:	88 b3       	in	r24, 0x18	; 24
 1f4:	80 68       	ori	r24, 0x80	; 128
 1f6:	88 bb       	out	0x18, r24	; 24
					 break;
				 }
				 switch(SPI0.Freq)
 1f8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	b9 f0       	breq	.+46     	; 0x22e <SPI_Init+0xb8>
 200:	28 f4       	brcc	.+10     	; 0x20c <SPI_Init+0x96>
 202:	88 23       	and	r24, r24
 204:	49 f0       	breq	.+18     	; 0x218 <SPI_Init+0xa2>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	59 f0       	breq	.+22     	; 0x220 <SPI_Init+0xaa>
 20a:	23 c0       	rjmp	.+70     	; 0x252 <SPI_Init+0xdc>
 20c:	85 30       	cpi	r24, 0x05	; 5
 20e:	d1 f0       	breq	.+52     	; 0x244 <SPI_Init+0xce>
 210:	90 f0       	brcs	.+36     	; 0x236 <SPI_Init+0xc0>
 212:	86 30       	cpi	r24, 0x06	; 6
 214:	d9 f0       	breq	.+54     	; 0x24c <SPI_Init+0xd6>
 216:	1d c0       	rjmp	.+58     	; 0x252 <SPI_Init+0xdc>
				 {
					 case SPI_FCPU_BY_2:
					 SPSR |= (1<<SPI2X);
 218:	8e b1       	in	r24, 0x0e	; 14
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	8e b9       	out	0x0e, r24	; 14
					 break;
 21e:	19 c0       	rjmp	.+50     	; 0x252 <SPI_Init+0xdc>
					 case SPI_FCPU_BY_4:
					 break;
					 case SPI_FCPU_BY_8:
					 SPSR |= (1<<SPI2X);
 220:	8e b1       	in	r24, 0x0e	; 14
 222:	81 60       	ori	r24, 0x01	; 1
 224:	8e b9       	out	0x0e, r24	; 14
					 SPCR |= (1<<SPR0);
 226:	8d b1       	in	r24, 0x0d	; 13
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	8d b9       	out	0x0d, r24	; 13
					 break;
 22c:	12 c0       	rjmp	.+36     	; 0x252 <SPI_Init+0xdc>
					 case SPI_FCPU_BY_16:
					 SPCR |= (1<<SPR0);
 22e:	8d b1       	in	r24, 0x0d	; 13
 230:	81 60       	ori	r24, 0x01	; 1
 232:	8d b9       	out	0x0d, r24	; 13
					 break;
 234:	0e c0       	rjmp	.+28     	; 0x252 <SPI_Init+0xdc>
					 case SPI_FCPU_BY_32:
					 SPSR |= (1<<SPI2X);
 236:	8e b1       	in	r24, 0x0e	; 14
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	8e b9       	out	0x0e, r24	; 14
					 SPCR |= (1<<SPR1);
 23c:	8d b1       	in	r24, 0x0d	; 13
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	8d b9       	out	0x0d, r24	; 13
					 break;
 242:	07 c0       	rjmp	.+14     	; 0x252 <SPI_Init+0xdc>
					 case SPI_FCPU_BY_64:
					 SPCR |= (1<<SPR1);
 244:	8d b1       	in	r24, 0x0d	; 13
 246:	82 60       	ori	r24, 0x02	; 2
 248:	8d b9       	out	0x0d, r24	; 13
					 break;
 24a:	03 c0       	rjmp	.+6      	; 0x252 <SPI_Init+0xdc>
					 case SPI_FCPU_BY_128:
					 SPCR |= (1<<SPR1) | (1<<SPR0);
 24c:	8d b1       	in	r24, 0x0d	; 13
 24e:	83 60       	ori	r24, 0x03	; 3
 250:	8d b9       	out	0x0d, r24	; 13
					 break;
				 }
			/* Enable SPI Communication */
			SPCR |= (1<<SPE);
 252:	8d b1       	in	r24, 0x0d	; 13
 254:	80 64       	ori	r24, 0x40	; 64
 256:	8d b9       	out	0x0d, r24	; 13
 258:	08 95       	ret

0000025a <SPI_ReadWrite_Blocking>:
	
	
	unsigned char SPI_ReadWrite_Blocking(unsigned char Data)
	{
		/* Transmit Data Using SPI Bus */
		SPDR = Data;
 25a:	8f b9       	out	0x0f, r24	; 15
		
		/* Check if a Write Collision Error Occurred */
		if ( (SPSR & (1<<WCOL) ) != 0)
 25c:	76 9b       	sbis	0x0e, 6	; 14
 25e:	03 c0       	rjmp	.+6      	; 0x266 <SPI_ReadWrite_Blocking+0xc>
		{
			SPI0.Error = SPI_WriteCollison;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
		}
		
		/* Block till The End of Transmit ion */
		while ( (SPSR & (1<<SPIF)) == 0 ) {}
 266:	77 9b       	sbis	0x0e, 7	; 14
 268:	fe cf       	rjmp	.-4      	; 0x266 <SPI_ReadWrite_Blocking+0xc>
		
		/* return Rx Data From SPI */
		return SPDR;
 26a:	8f b1       	in	r24, 0x0f	; 15
	}
 26c:	08 95       	ret

0000026e <__vector_13>:
	.RXC_InterruptCall  = NULL_PTR,
	.TXC_InterruptCall  = NULL_PTR,
.UDRE_InterruptCall = NULL_PTR };

ISR(USART_RXC_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	if ( UART0.RXC_InterruptCall != NULL_PTR)
 290:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <UART0+0xc>
 294:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <UART0+0xd>
 298:	30 97       	sbiw	r30, 0x00	; 0
 29a:	09 f0       	breq	.+2      	; 0x29e <__vector_13+0x30>
	{
		UART0.RXC_InterruptCall();
 29c:	09 95       	icall
	else
	{
		// Handle Error Using Error Handling Function
		
	}
}
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	7f 91       	pop	r23
 2ac:	6f 91       	pop	r22
 2ae:	5f 91       	pop	r21
 2b0:	4f 91       	pop	r20
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <__vector_15>:

ISR(USART_TXC_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	if ( UART0.TXC_InterruptCall != NULL_PTR)
 2e2:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <UART0+0xe>
 2e6:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <UART0+0xf>
 2ea:	30 97       	sbiw	r30, 0x00	; 0
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <__vector_15+0x30>
	{
		UART0.TXC_InterruptCall();
 2ee:	09 95       	icall
	else
	{
		// Handle Error Using Error Handling Function
		
	}
}
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_14>:

ISR(USART_UDRE_vect)
{
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	if ( UART0.UDRE_InterruptCall != NULL_PTR)
 334:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <UART0+0x10>
 338:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <UART0+0x11>
 33c:	30 97       	sbiw	r30, 0x00	; 0
 33e:	09 f0       	breq	.+2      	; 0x342 <__vector_14+0x30>
	{
		UART0.UDRE_InterruptCall();
 340:	09 95       	icall
	else
	{
		// Handle Error Using Error Handling Function
		
	}
}
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	7f 91       	pop	r23
 350:	6f 91       	pop	r22
 352:	5f 91       	pop	r21
 354:	4f 91       	pop	r20
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
