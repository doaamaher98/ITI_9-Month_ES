
18-SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000283a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  0000283a  000028ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001a8  008001a8  00002a16  2**0
                  ALLOC
  3 .stab         00002af0  00000000  00000000  00002a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000273b  00000000  00000000  00005508  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  00007d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b11  00000000  00000000  00007f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ebc  00000000  00000000  00009a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5b  00000000  00000000  0000a8e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b744  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b1  00000000  00000000  0000b8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000836  00000000  00000000  0000bb55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c38b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 06 	call	0xc16	; 0xc16 <main>
      8a:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__epilogue_restores__+0x18>

00000692 <__fixsfsi>:
     692:	ac e0       	ldi	r26, 0x0C	; 12
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x20>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	be 01       	movw	r22, r28
     6ac:	6b 5f       	subi	r22, 0xFB	; 251
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     6b4:	8d 81       	ldd	r24, Y+5	; 0x05
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	61 f1       	breq	.+88     	; 0x712 <__fixsfsi+0x80>
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	50 f1       	brcs	.+84     	; 0x712 <__fixsfsi+0x80>
     6be:	84 30       	cpi	r24, 0x04	; 4
     6c0:	21 f4       	brne	.+8      	; 0x6ca <__fixsfsi+0x38>
     6c2:	8e 81       	ldd	r24, Y+6	; 0x06
     6c4:	88 23       	and	r24, r24
     6c6:	51 f1       	breq	.+84     	; 0x71c <__fixsfsi+0x8a>
     6c8:	2e c0       	rjmp	.+92     	; 0x726 <__fixsfsi+0x94>
     6ca:	2f 81       	ldd	r18, Y+7	; 0x07
     6cc:	38 85       	ldd	r19, Y+8	; 0x08
     6ce:	37 fd       	sbrc	r19, 7
     6d0:	20 c0       	rjmp	.+64     	; 0x712 <__fixsfsi+0x80>
     6d2:	6e 81       	ldd	r22, Y+6	; 0x06
     6d4:	2f 31       	cpi	r18, 0x1F	; 31
     6d6:	31 05       	cpc	r19, r1
     6d8:	1c f0       	brlt	.+6      	; 0x6e0 <__fixsfsi+0x4e>
     6da:	66 23       	and	r22, r22
     6dc:	f9 f0       	breq	.+62     	; 0x71c <__fixsfsi+0x8a>
     6de:	23 c0       	rjmp	.+70     	; 0x726 <__fixsfsi+0x94>
     6e0:	8e e1       	ldi	r24, 0x1E	; 30
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	29 85       	ldd	r18, Y+9	; 0x09
     6ea:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ec:	4b 85       	ldd	r20, Y+11	; 0x0b
     6ee:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <__fixsfsi+0x68>
     6f2:	56 95       	lsr	r21
     6f4:	47 95       	ror	r20
     6f6:	37 95       	ror	r19
     6f8:	27 95       	ror	r18
     6fa:	8a 95       	dec	r24
     6fc:	d2 f7       	brpl	.-12     	; 0x6f2 <__fixsfsi+0x60>
     6fe:	66 23       	and	r22, r22
     700:	b1 f0       	breq	.+44     	; 0x72e <__fixsfsi+0x9c>
     702:	50 95       	com	r21
     704:	40 95       	com	r20
     706:	30 95       	com	r19
     708:	21 95       	neg	r18
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	4f 4f       	sbci	r20, 0xFF	; 255
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
     710:	0e c0       	rjmp	.+28     	; 0x72e <__fixsfsi+0x9c>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	09 c0       	rjmp	.+18     	; 0x72e <__fixsfsi+0x9c>
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	3f ef       	ldi	r19, 0xFF	; 255
     720:	4f ef       	ldi	r20, 0xFF	; 255
     722:	5f e7       	ldi	r21, 0x7F	; 127
     724:	04 c0       	rjmp	.+8      	; 0x72e <__fixsfsi+0x9c>
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e8       	ldi	r21, 0x80	; 128
     72e:	b9 01       	movw	r22, r18
     730:	ca 01       	movw	r24, r20
     732:	2c 96       	adiw	r28, 0x0c	; 12
     734:	e2 e0       	ldi	r30, 0x02	; 2
     736:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x20>

0000073a <__floatunsisf>:
     73a:	a8 e0       	ldi	r26, 0x08	; 8
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e3 ea       	ldi	r30, 0xA3	; 163
     740:	f3 e0       	ldi	r31, 0x03	; 3
     742:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__prologue_saves__+0x10>
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
     74a:	61 15       	cp	r22, r1
     74c:	71 05       	cpc	r23, r1
     74e:	81 05       	cpc	r24, r1
     750:	91 05       	cpc	r25, r1
     752:	19 f4       	brne	.+6      	; 0x75a <__floatunsisf+0x20>
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	60 c0       	rjmp	.+192    	; 0x81a <__floatunsisf+0xe0>
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	89 83       	std	Y+1, r24	; 0x01
     75e:	8e e1       	ldi	r24, 0x1E	; 30
     760:	c8 2e       	mov	r12, r24
     762:	d1 2c       	mov	r13, r1
     764:	dc 82       	std	Y+4, r13	; 0x04
     766:	cb 82       	std	Y+3, r12	; 0x03
     768:	ed 82       	std	Y+5, r14	; 0x05
     76a:	fe 82       	std	Y+6, r15	; 0x06
     76c:	0f 83       	std	Y+7, r16	; 0x07
     76e:	18 87       	std	Y+8, r17	; 0x08
     770:	c8 01       	movw	r24, r16
     772:	b7 01       	movw	r22, r14
     774:	0e 94 16 04 	call	0x82c	; 0x82c <__clzsi2>
     778:	fc 01       	movw	r30, r24
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	f7 ff       	sbrs	r31, 7
     77e:	3b c0       	rjmp	.+118    	; 0x7f6 <__floatunsisf+0xbc>
     780:	22 27       	eor	r18, r18
     782:	33 27       	eor	r19, r19
     784:	2e 1b       	sub	r18, r30
     786:	3f 0b       	sbc	r19, r31
     788:	57 01       	movw	r10, r14
     78a:	68 01       	movw	r12, r16
     78c:	02 2e       	mov	r0, r18
     78e:	04 c0       	rjmp	.+8      	; 0x798 <__floatunsisf+0x5e>
     790:	d6 94       	lsr	r13
     792:	c7 94       	ror	r12
     794:	b7 94       	ror	r11
     796:	a7 94       	ror	r10
     798:	0a 94       	dec	r0
     79a:	d2 f7       	brpl	.-12     	; 0x790 <__floatunsisf+0x56>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__floatunsisf+0x7c>
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	aa 1f       	adc	r26, r26
     7b4:	bb 1f       	adc	r27, r27
     7b6:	2a 95       	dec	r18
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__floatunsisf+0x74>
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	a1 09       	sbc	r26, r1
     7be:	b1 09       	sbc	r27, r1
     7c0:	8e 21       	and	r24, r14
     7c2:	9f 21       	and	r25, r15
     7c4:	a0 23       	and	r26, r16
     7c6:	b1 23       	and	r27, r17
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	a1 05       	cpc	r26, r1
     7cc:	b1 05       	cpc	r27, r1
     7ce:	21 f0       	breq	.+8      	; 0x7d8 <__floatunsisf+0x9e>
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	4a 29       	or	r20, r10
     7da:	5b 29       	or	r21, r11
     7dc:	6c 29       	or	r22, r12
     7de:	7d 29       	or	r23, r13
     7e0:	4d 83       	std	Y+5, r20	; 0x05
     7e2:	5e 83       	std	Y+6, r21	; 0x06
     7e4:	6f 83       	std	Y+7, r22	; 0x07
     7e6:	78 87       	std	Y+8, r23	; 0x08
     7e8:	8e e1       	ldi	r24, 0x1E	; 30
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	8e 1b       	sub	r24, r30
     7ee:	9f 0b       	sbc	r25, r31
     7f0:	9c 83       	std	Y+4, r25	; 0x04
     7f2:	8b 83       	std	Y+3, r24	; 0x03
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <__floatunsisf+0xe0>
     7f6:	30 97       	sbiw	r30, 0x00	; 0
     7f8:	81 f0       	breq	.+32     	; 0x81a <__floatunsisf+0xe0>
     7fa:	0e 2e       	mov	r0, r30
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <__floatunsisf+0xcc>
     7fe:	ee 0c       	add	r14, r14
     800:	ff 1c       	adc	r15, r15
     802:	00 1f       	adc	r16, r16
     804:	11 1f       	adc	r17, r17
     806:	0a 94       	dec	r0
     808:	d2 f7       	brpl	.-12     	; 0x7fe <__floatunsisf+0xc4>
     80a:	ed 82       	std	Y+5, r14	; 0x05
     80c:	fe 82       	std	Y+6, r15	; 0x06
     80e:	0f 83       	std	Y+7, r16	; 0x07
     810:	18 87       	std	Y+8, r17	; 0x08
     812:	ce 1a       	sub	r12, r30
     814:	df 0a       	sbc	r13, r31
     816:	dc 82       	std	Y+4, r13	; 0x04
     818:	cb 82       	std	Y+3, r12	; 0x03
     81a:	1a 82       	std	Y+2, r1	; 0x02
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     824:	28 96       	adiw	r28, 0x08	; 8
     826:	ea e0       	ldi	r30, 0x0A	; 10
     828:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__epilogue_restores__+0x10>

0000082c <__clzsi2>:
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	7b 01       	movw	r14, r22
     836:	8c 01       	movw	r16, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	e8 16       	cp	r14, r24
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	f8 06       	cpc	r15, r24
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 07       	cpc	r16, r24
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	18 07       	cpc	r17, r24
     848:	88 f4       	brcc	.+34     	; 0x86c <__stack+0xd>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	e8 16       	cp	r14, r24
     84e:	f1 04       	cpc	r15, r1
     850:	01 05       	cpc	r16, r1
     852:	11 05       	cpc	r17, r1
     854:	31 f0       	breq	.+12     	; 0x862 <__stack+0x3>
     856:	28 f0       	brcs	.+10     	; 0x862 <__stack+0x3>
     858:	88 e0       	ldi	r24, 0x08	; 8
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	a0 e0       	ldi	r26, 0x00	; 0
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	17 c0       	rjmp	.+46     	; 0x890 <__stack+0x31>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	12 c0       	rjmp	.+36     	; 0x890 <__stack+0x31>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	e8 16       	cp	r14, r24
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	f8 06       	cpc	r15, r24
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	08 07       	cpc	r16, r24
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	18 07       	cpc	r17, r24
     87c:	28 f0       	brcs	.+10     	; 0x888 <__stack+0x29>
     87e:	88 e1       	ldi	r24, 0x18	; 24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	04 c0       	rjmp	.+8      	; 0x890 <__stack+0x31>
     888:	80 e1       	ldi	r24, 0x10	; 16
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	20 e2       	ldi	r18, 0x20	; 32
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	28 1b       	sub	r18, r24
     89a:	39 0b       	sbc	r19, r25
     89c:	4a 0b       	sbc	r20, r26
     89e:	5b 0b       	sbc	r21, r27
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	16 95       	lsr	r17
     8a4:	07 95       	ror	r16
     8a6:	f7 94       	ror	r15
     8a8:	e7 94       	ror	r14
     8aa:	8a 95       	dec	r24
     8ac:	d2 f7       	brpl	.-12     	; 0x8a2 <__stack+0x43>
     8ae:	f7 01       	movw	r30, r14
     8b0:	e8 59       	subi	r30, 0x98	; 152
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	80 81       	ld	r24, Z
     8b6:	28 1b       	sub	r18, r24
     8b8:	31 09       	sbc	r19, r1
     8ba:	41 09       	sbc	r20, r1
     8bc:	51 09       	sbc	r21, r1
     8be:	c9 01       	movw	r24, r18
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	08 95       	ret

000008ca <__pack_f>:
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	fc 01       	movw	r30, r24
     8d6:	e4 80       	ldd	r14, Z+4	; 0x04
     8d8:	f5 80       	ldd	r15, Z+5	; 0x05
     8da:	06 81       	ldd	r16, Z+6	; 0x06
     8dc:	17 81       	ldd	r17, Z+7	; 0x07
     8de:	d1 80       	ldd	r13, Z+1	; 0x01
     8e0:	80 81       	ld	r24, Z
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	48 f4       	brcc	.+18     	; 0x8f8 <__pack_f+0x2e>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a0 e1       	ldi	r26, 0x10	; 16
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	e8 2a       	or	r14, r24
     8f0:	f9 2a       	or	r15, r25
     8f2:	0a 2b       	or	r16, r26
     8f4:	1b 2b       	or	r17, r27
     8f6:	a5 c0       	rjmp	.+330    	; 0xa42 <__pack_f+0x178>
     8f8:	84 30       	cpi	r24, 0x04	; 4
     8fa:	09 f4       	brne	.+2      	; 0x8fe <__pack_f+0x34>
     8fc:	9f c0       	rjmp	.+318    	; 0xa3c <__pack_f+0x172>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	21 f4       	brne	.+8      	; 0x90a <__pack_f+0x40>
     902:	ee 24       	eor	r14, r14
     904:	ff 24       	eor	r15, r15
     906:	87 01       	movw	r16, r14
     908:	05 c0       	rjmp	.+10     	; 0x914 <__pack_f+0x4a>
     90a:	e1 14       	cp	r14, r1
     90c:	f1 04       	cpc	r15, r1
     90e:	01 05       	cpc	r16, r1
     910:	11 05       	cpc	r17, r1
     912:	19 f4       	brne	.+6      	; 0x91a <__pack_f+0x50>
     914:	e0 e0       	ldi	r30, 0x00	; 0
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	96 c0       	rjmp	.+300    	; 0xa46 <__pack_f+0x17c>
     91a:	62 81       	ldd	r22, Z+2	; 0x02
     91c:	73 81       	ldd	r23, Z+3	; 0x03
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	62 38       	cpi	r22, 0x82	; 130
     922:	79 07       	cpc	r23, r25
     924:	0c f0       	brlt	.+2      	; 0x928 <__pack_f+0x5e>
     926:	5b c0       	rjmp	.+182    	; 0x9de <__pack_f+0x114>
     928:	22 e8       	ldi	r18, 0x82	; 130
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	26 1b       	sub	r18, r22
     92e:	37 0b       	sbc	r19, r23
     930:	2a 31       	cpi	r18, 0x1A	; 26
     932:	31 05       	cpc	r19, r1
     934:	2c f0       	brlt	.+10     	; 0x940 <__pack_f+0x76>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	2a c0       	rjmp	.+84     	; 0x994 <__pack_f+0xca>
     940:	b8 01       	movw	r22, r16
     942:	a7 01       	movw	r20, r14
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__pack_f+0x86>
     948:	76 95       	lsr	r23
     94a:	67 95       	ror	r22
     94c:	57 95       	ror	r21
     94e:	47 95       	ror	r20
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__pack_f+0x7e>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	04 c0       	rjmp	.+8      	; 0x966 <__pack_f+0x9c>
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	aa 1f       	adc	r26, r26
     964:	bb 1f       	adc	r27, r27
     966:	2a 95       	dec	r18
     968:	d2 f7       	brpl	.-12     	; 0x95e <__pack_f+0x94>
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	a1 09       	sbc	r26, r1
     96e:	b1 09       	sbc	r27, r1
     970:	8e 21       	and	r24, r14
     972:	9f 21       	and	r25, r15
     974:	a0 23       	and	r26, r16
     976:	b1 23       	and	r27, r17
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	a1 05       	cpc	r26, r1
     97c:	b1 05       	cpc	r27, r1
     97e:	21 f0       	breq	.+8      	; 0x988 <__pack_f+0xbe>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	9a 01       	movw	r18, r20
     98a:	ab 01       	movw	r20, r22
     98c:	28 2b       	or	r18, r24
     98e:	39 2b       	or	r19, r25
     990:	4a 2b       	or	r20, r26
     992:	5b 2b       	or	r21, r27
     994:	da 01       	movw	r26, r20
     996:	c9 01       	movw	r24, r18
     998:	8f 77       	andi	r24, 0x7F	; 127
     99a:	90 70       	andi	r25, 0x00	; 0
     99c:	a0 70       	andi	r26, 0x00	; 0
     99e:	b0 70       	andi	r27, 0x00	; 0
     9a0:	80 34       	cpi	r24, 0x40	; 64
     9a2:	91 05       	cpc	r25, r1
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	39 f4       	brne	.+14     	; 0x9b8 <__pack_f+0xee>
     9aa:	27 ff       	sbrs	r18, 7
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__pack_f+0xf6>
     9ae:	20 5c       	subi	r18, 0xC0	; 192
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	4f 4f       	sbci	r20, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__pack_f+0xf6>
     9b8:	21 5c       	subi	r18, 0xC1	; 193
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	4f 4f       	sbci	r20, 0xFF	; 255
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	e0 e0       	ldi	r30, 0x00	; 0
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	20 30       	cpi	r18, 0x00	; 0
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	3a 07       	cpc	r19, r26
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	4a 07       	cpc	r20, r26
     9ce:	a0 e4       	ldi	r26, 0x40	; 64
     9d0:	5a 07       	cpc	r21, r26
     9d2:	10 f0       	brcs	.+4      	; 0x9d8 <__pack_f+0x10e>
     9d4:	e1 e0       	ldi	r30, 0x01	; 1
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	79 01       	movw	r14, r18
     9da:	8a 01       	movw	r16, r20
     9dc:	27 c0       	rjmp	.+78     	; 0xa2c <__pack_f+0x162>
     9de:	60 38       	cpi	r22, 0x80	; 128
     9e0:	71 05       	cpc	r23, r1
     9e2:	64 f5       	brge	.+88     	; 0xa3c <__pack_f+0x172>
     9e4:	fb 01       	movw	r30, r22
     9e6:	e1 58       	subi	r30, 0x81	; 129
     9e8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ea:	d8 01       	movw	r26, r16
     9ec:	c7 01       	movw	r24, r14
     9ee:	8f 77       	andi	r24, 0x7F	; 127
     9f0:	90 70       	andi	r25, 0x00	; 0
     9f2:	a0 70       	andi	r26, 0x00	; 0
     9f4:	b0 70       	andi	r27, 0x00	; 0
     9f6:	80 34       	cpi	r24, 0x40	; 64
     9f8:	91 05       	cpc	r25, r1
     9fa:	a1 05       	cpc	r26, r1
     9fc:	b1 05       	cpc	r27, r1
     9fe:	39 f4       	brne	.+14     	; 0xa0e <__pack_f+0x144>
     a00:	e7 fe       	sbrs	r14, 7
     a02:	0d c0       	rjmp	.+26     	; 0xa1e <__pack_f+0x154>
     a04:	80 e4       	ldi	r24, 0x40	; 64
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x14c>
     a0e:	8f e3       	ldi	r24, 0x3F	; 63
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	e8 0e       	add	r14, r24
     a18:	f9 1e       	adc	r15, r25
     a1a:	0a 1f       	adc	r16, r26
     a1c:	1b 1f       	adc	r17, r27
     a1e:	17 ff       	sbrs	r17, 7
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <__pack_f+0x162>
     a22:	16 95       	lsr	r17
     a24:	07 95       	ror	r16
     a26:	f7 94       	ror	r15
     a28:	e7 94       	ror	r14
     a2a:	31 96       	adiw	r30, 0x01	; 1
     a2c:	87 e0       	ldi	r24, 0x07	; 7
     a2e:	16 95       	lsr	r17
     a30:	07 95       	ror	r16
     a32:	f7 94       	ror	r15
     a34:	e7 94       	ror	r14
     a36:	8a 95       	dec	r24
     a38:	d1 f7       	brne	.-12     	; 0xa2e <__pack_f+0x164>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <__pack_f+0x17c>
     a3c:	ee 24       	eor	r14, r14
     a3e:	ff 24       	eor	r15, r15
     a40:	87 01       	movw	r16, r14
     a42:	ef ef       	ldi	r30, 0xFF	; 255
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	6e 2f       	mov	r22, r30
     a48:	67 95       	ror	r22
     a4a:	66 27       	eor	r22, r22
     a4c:	67 95       	ror	r22
     a4e:	90 2f       	mov	r25, r16
     a50:	9f 77       	andi	r25, 0x7F	; 127
     a52:	d7 94       	ror	r13
     a54:	dd 24       	eor	r13, r13
     a56:	d7 94       	ror	r13
     a58:	8e 2f       	mov	r24, r30
     a5a:	86 95       	lsr	r24
     a5c:	49 2f       	mov	r20, r25
     a5e:	46 2b       	or	r20, r22
     a60:	58 2f       	mov	r21, r24
     a62:	5d 29       	or	r21, r13
     a64:	b7 01       	movw	r22, r14
     a66:	ca 01       	movw	r24, r20
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	08 95       	ret

00000a74 <__unpack_f>:
     a74:	fc 01       	movw	r30, r24
     a76:	db 01       	movw	r26, r22
     a78:	40 81       	ld	r20, Z
     a7a:	51 81       	ldd	r21, Z+1	; 0x01
     a7c:	22 81       	ldd	r18, Z+2	; 0x02
     a7e:	62 2f       	mov	r22, r18
     a80:	6f 77       	andi	r22, 0x7F	; 127
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	22 1f       	adc	r18, r18
     a86:	22 27       	eor	r18, r18
     a88:	22 1f       	adc	r18, r18
     a8a:	93 81       	ldd	r25, Z+3	; 0x03
     a8c:	89 2f       	mov	r24, r25
     a8e:	88 0f       	add	r24, r24
     a90:	82 2b       	or	r24, r18
     a92:	28 2f       	mov	r18, r24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	99 1f       	adc	r25, r25
     a98:	99 27       	eor	r25, r25
     a9a:	99 1f       	adc	r25, r25
     a9c:	11 96       	adiw	r26, 0x01	; 1
     a9e:	9c 93       	st	X, r25
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	21 15       	cp	r18, r1
     aa4:	31 05       	cpc	r19, r1
     aa6:	a9 f5       	brne	.+106    	; 0xb12 <__unpack_f+0x9e>
     aa8:	41 15       	cp	r20, r1
     aaa:	51 05       	cpc	r21, r1
     aac:	61 05       	cpc	r22, r1
     aae:	71 05       	cpc	r23, r1
     ab0:	11 f4       	brne	.+4      	; 0xab6 <__unpack_f+0x42>
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	37 c0       	rjmp	.+110    	; 0xb24 <__unpack_f+0xb0>
     ab6:	82 e8       	ldi	r24, 0x82	; 130
     ab8:	9f ef       	ldi	r25, 0xFF	; 255
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	9c 93       	st	X, r25
     abe:	8e 93       	st	-X, r24
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	9a 01       	movw	r18, r20
     ac4:	ab 01       	movw	r20, r22
     ac6:	67 e0       	ldi	r22, 0x07	; 7
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	44 1f       	adc	r20, r20
     ace:	55 1f       	adc	r21, r21
     ad0:	6a 95       	dec	r22
     ad2:	d1 f7       	brne	.-12     	; 0xac8 <__unpack_f+0x54>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	8c 93       	st	X, r24
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <__unpack_f+0x80>
     ada:	22 0f       	add	r18, r18
     adc:	33 1f       	adc	r19, r19
     ade:	44 1f       	adc	r20, r20
     ae0:	55 1f       	adc	r21, r21
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	8d 91       	ld	r24, X+
     ae6:	9c 91       	ld	r25, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	13 96       	adiw	r26, 0x03	; 3
     aee:	9c 93       	st	X, r25
     af0:	8e 93       	st	-X, r24
     af2:	12 97       	sbiw	r26, 0x02	; 2
     af4:	20 30       	cpi	r18, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	38 07       	cpc	r19, r24
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	48 07       	cpc	r20, r24
     afe:	80 e4       	ldi	r24, 0x40	; 64
     b00:	58 07       	cpc	r21, r24
     b02:	58 f3       	brcs	.-42     	; 0xada <__unpack_f+0x66>
     b04:	14 96       	adiw	r26, 0x04	; 4
     b06:	2d 93       	st	X+, r18
     b08:	3d 93       	st	X+, r19
     b0a:	4d 93       	st	X+, r20
     b0c:	5c 93       	st	X, r21
     b0e:	17 97       	sbiw	r26, 0x07	; 7
     b10:	08 95       	ret
     b12:	2f 3f       	cpi	r18, 0xFF	; 255
     b14:	31 05       	cpc	r19, r1
     b16:	79 f4       	brne	.+30     	; 0xb36 <__unpack_f+0xc2>
     b18:	41 15       	cp	r20, r1
     b1a:	51 05       	cpc	r21, r1
     b1c:	61 05       	cpc	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__unpack_f+0xb4>
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	8c 93       	st	X, r24
     b26:	08 95       	ret
     b28:	64 ff       	sbrs	r22, 4
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__unpack_f+0xbe>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	8c 93       	st	X, r24
     b30:	12 c0       	rjmp	.+36     	; 0xb56 <__unpack_f+0xe2>
     b32:	1c 92       	st	X, r1
     b34:	10 c0       	rjmp	.+32     	; 0xb56 <__unpack_f+0xe2>
     b36:	2f 57       	subi	r18, 0x7F	; 127
     b38:	30 40       	sbci	r19, 0x00	; 0
     b3a:	13 96       	adiw	r26, 0x03	; 3
     b3c:	3c 93       	st	X, r19
     b3e:	2e 93       	st	-X, r18
     b40:	12 97       	sbiw	r26, 0x02	; 2
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	8c 93       	st	X, r24
     b46:	87 e0       	ldi	r24, 0x07	; 7
     b48:	44 0f       	add	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	66 1f       	adc	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	8a 95       	dec	r24
     b52:	d1 f7       	brne	.-12     	; 0xb48 <__unpack_f+0xd4>
     b54:	70 64       	ori	r23, 0x40	; 64
     b56:	14 96       	adiw	r26, 0x04	; 4
     b58:	4d 93       	st	X+, r20
     b5a:	5d 93       	st	X+, r21
     b5c:	6d 93       	st	X+, r22
     b5e:	7c 93       	st	X, r23
     b60:	17 97       	sbiw	r26, 0x07	; 7
     b62:	08 95       	ret

00000b64 <__fpcmp_parts_f>:
     b64:	1f 93       	push	r17
     b66:	dc 01       	movw	r26, r24
     b68:	fb 01       	movw	r30, r22
     b6a:	9c 91       	ld	r25, X
     b6c:	92 30       	cpi	r25, 0x02	; 2
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <__fpcmp_parts_f+0xe>
     b70:	47 c0       	rjmp	.+142    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b72:	80 81       	ld	r24, Z
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	08 f4       	brcc	.+2      	; 0xb7a <__fpcmp_parts_f+0x16>
     b78:	43 c0       	rjmp	.+134    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b7a:	94 30       	cpi	r25, 0x04	; 4
     b7c:	51 f4       	brne	.+20     	; 0xb92 <__fpcmp_parts_f+0x2e>
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	1c 91       	ld	r17, X
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	99 f5       	brne	.+102    	; 0xbec <__fpcmp_parts_f+0x88>
     b86:	81 81       	ldd	r24, Z+1	; 0x01
     b88:	68 2f       	mov	r22, r24
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	61 1b       	sub	r22, r17
     b8e:	71 09       	sbc	r23, r1
     b90:	3f c0       	rjmp	.+126    	; 0xc10 <__fpcmp_parts_f+0xac>
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	21 f0       	breq	.+8      	; 0xb9e <__fpcmp_parts_f+0x3a>
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	31 f4       	brne	.+12     	; 0xba6 <__fpcmp_parts_f+0x42>
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	b9 f1       	breq	.+110    	; 0xc0c <__fpcmp_parts_f+0xa8>
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	88 23       	and	r24, r24
     ba2:	89 f1       	breq	.+98     	; 0xc06 <__fpcmp_parts_f+0xa2>
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <__fpcmp_parts_f+0x9c>
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	1c 91       	ld	r17, X
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	f1 f0       	breq	.+60     	; 0xbec <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	18 17       	cp	r17, r24
     bb4:	d9 f4       	brne	.+54     	; 0xbec <__fpcmp_parts_f+0x88>
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	2d 91       	ld	r18, X+
     bba:	3c 91       	ld	r19, X
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	82 17       	cp	r24, r18
     bc4:	93 07       	cpc	r25, r19
     bc6:	94 f0       	brlt	.+36     	; 0xbec <__fpcmp_parts_f+0x88>
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	bc f0       	brlt	.+46     	; 0xbfc <__fpcmp_parts_f+0x98>
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	8d 91       	ld	r24, X+
     bd2:	9d 91       	ld	r25, X+
     bd4:	0d 90       	ld	r0, X+
     bd6:	bc 91       	ld	r27, X
     bd8:	a0 2d       	mov	r26, r0
     bda:	24 81       	ldd	r18, Z+4	; 0x04
     bdc:	35 81       	ldd	r19, Z+5	; 0x05
     bde:	46 81       	ldd	r20, Z+6	; 0x06
     be0:	57 81       	ldd	r21, Z+7	; 0x07
     be2:	28 17       	cp	r18, r24
     be4:	39 07       	cpc	r19, r25
     be6:	4a 07       	cpc	r20, r26
     be8:	5b 07       	cpc	r21, r27
     bea:	18 f4       	brcc	.+6      	; 0xbf2 <__fpcmp_parts_f+0x8e>
     bec:	11 23       	and	r17, r17
     bee:	41 f0       	breq	.+16     	; 0xc00 <__fpcmp_parts_f+0x9c>
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <__fpcmp_parts_f+0xa2>
     bf2:	82 17       	cp	r24, r18
     bf4:	93 07       	cpc	r25, r19
     bf6:	a4 07       	cpc	r26, r20
     bf8:	b5 07       	cpc	r27, r21
     bfa:	40 f4       	brcc	.+16     	; 0xc0c <__fpcmp_parts_f+0xa8>
     bfc:	11 23       	and	r17, r17
     bfe:	19 f0       	breq	.+6      	; 0xc06 <__fpcmp_parts_f+0xa2>
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <__fpcmp_parts_f+0xac>
     c06:	6f ef       	ldi	r22, 0xFF	; 255
     c08:	7f ef       	ldi	r23, 0xFF	; 255
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <__fpcmp_parts_f+0xac>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	cb 01       	movw	r24, r22
     c12:	1f 91       	pop	r17
     c14:	08 95       	ret

00000c16 <main>:
#include "../01-MCAL/DIO.h"
#include "../01-MCAL/SPI_Interface.h"


void main(void)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
     c1e:	0e 94 75 06 	call	0xcea	; 0xcea <DIO_enuInit>

	SPI_enuMasterInit();
     c22:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <SPI_enuMasterInit>

	while (1)
	{
		SPI_u8Transcieve(1);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <SPI_u8Transcieve>
		Delay_MS(10);
     c2c:	6a e0       	ldi	r22, 0x0A	; 10
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <Delay_MS>
     c38:	f6 cf       	rjmp	.-20     	; 0xc26 <main+0x10>

00000c3a <HAL_LED_ON>:
/*	  Input  : Pin number that needs to be set					*/
/*	  Output : LED_tenuErrorStatus to Report Errors				*/
/****************************************************************/

LED_tenuErrorStatus HAL_LED_ON(LED_tenuPins Cpy_u8PinNumber)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <HAL_LED_ON+0x6>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <HAL_LED_ON+0x8>
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	8c 83       	std	Y+4, r24	; 0x04
	LED_tenuErrorStatus Local_ErrorStatus = LED_enuOk;      	// Assuming the current status is OK
     c48:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_u8PinNumber /REG_BITS;
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	86 95       	lsr	r24
     c4e:	86 95       	lsr	r24
     c50:	86 95       	lsr	r24
     c52:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_u8PinNumber %REG_BITS;
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	87 70       	andi	r24, 0x07	; 7
     c58:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > LED_enuNumberOfPorts)
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	85 30       	cpi	r24, 0x05	; 5
     c5e:	18 f0       	brcs	.+6      	; 0xc66 <HAL_LED_ON+0x2c>
	{
		Local_ErrorStatus = LED_enuInvalidPortNum;
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	8b 83       	std	Y+3, r24	; 0x03
     c64:	0e c0       	rjmp	.+28     	; 0xc82 <HAL_LED_ON+0x48>
	}
	else if (Loc_u8PinNumber > LED_enuNumberOfPins)
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	81 32       	cpi	r24, 0x21	; 33
     c6a:	18 f0       	brcs	.+6      	; 0xc72 <HAL_LED_ON+0x38>
	{
		Local_ErrorStatus = LED_enuInvalidPinNum;
     c6c:	84 e0       	ldi	r24, 0x04	; 4
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <HAL_LED_ON+0x48>
	}
	
	else if (Local_ErrorStatus == LED_enuOk)
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	88 23       	and	r24, r24
     c76:	21 f4       	brne	.+8      	; 0xc80 <HAL_LED_ON+0x46>
	{
		DIO_enuSetPin(Cpy_u8PinNumber);
     c78:	8c 81       	ldd	r24, Y+4	; 0x04
     c7a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <DIO_enuSetPin>
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <HAL_LED_ON+0x48>
	}
	else
	{
		Local_ErrorStatus = LED_enuOk;
     c80:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_ErrorStatus;
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <HAL_LED_OFF>:
/*    LED OFF Function											*/
/*	  Input  : Pin number that needs to be cleared				*/
/*	  Output : LED_tenuErrorStatus to Report Errors				*/
/****************************************************************/
LED_tenuErrorStatus HAL_LED_OFF(LED_tenuPins Cpy_u8PinNumber)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	00 d0       	rcall	.+0      	; 0xc98 <HAL_LED_OFF+0x6>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <HAL_LED_OFF+0x8>
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	8c 83       	std	Y+4, r24	; 0x04
	LED_tenuErrorStatus Local_ErrorStatus = LED_enuOk;      	// Assuming the current status is OK
     ca0:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_u8PinNumber /REG_BITS;
     ca2:	8c 81       	ldd	r24, Y+4	; 0x04
     ca4:	86 95       	lsr	r24
     ca6:	86 95       	lsr	r24
     ca8:	86 95       	lsr	r24
     caa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_u8PinNumber %REG_BITS;
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	87 70       	andi	r24, 0x07	; 7
     cb0:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > LED_enuNumberOfPorts)
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	85 30       	cpi	r24, 0x05	; 5
     cb6:	18 f0       	brcs	.+6      	; 0xcbe <HAL_LED_OFF+0x2c>
	{
		Local_ErrorStatus = LED_enuInvalidPortNum;
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	8b 83       	std	Y+3, r24	; 0x03
     cbc:	0e c0       	rjmp	.+28     	; 0xcda <HAL_LED_OFF+0x48>
	}
	else if (Loc_u8PinNumber > LED_enuNumberOfPins)
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	81 32       	cpi	r24, 0x21	; 33
     cc2:	18 f0       	brcs	.+6      	; 0xcca <HAL_LED_OFF+0x38>
	{
		Local_ErrorStatus = LED_enuInvalidPinNum;
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <HAL_LED_OFF+0x48>
	}
	
	else if (Local_ErrorStatus == LED_enuOk)
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	88 23       	and	r24, r24
     cce:	21 f4       	brne	.+8      	; 0xcd8 <HAL_LED_OFF+0x46>
	{
		DIO_enuClearPin(Cpy_u8PinNumber);
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	0e 94 01 0b 	call	0x1602	; 0x1602 <DIO_enuClearPin>
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <HAL_LED_OFF+0x48>
	}
	else
	{
		Local_ErrorStatus = LED_enuOk;
     cd8:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_ErrorStatus;
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
}
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <DIO_enuInit>:
/*    DIO Init Function											*/
/*	  Input  : void												*/
/*	  Output : DIO_tenuErrorStatus to Report Errors				*/
/****************************************************************/
DIO_tenuErrorStatus DIO_enuInit (void)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	2e 97       	sbiw	r28, 0x0e	; 14
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
	DIO_tenuErrorStatus Local_ErrorStatus = DIO_enuOK;      	// Assuming the current status is OK
     cfe:	1c 82       	std	Y+4, r1	; 0x04
	
	u8 Local_Iterator;
	u8 Loc_u8PortNumber = 0;
     d00:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8PinNumber  = 0;
     d02:	19 82       	std	Y+1, r1	; 0x01
	
	for (Local_Iterator = 0; Local_Iterator < DIO_enuNumberOfPins ; Local_Iterator++)
     d04:	1b 82       	std	Y+3, r1	; 0x03
     d06:	d3 c3       	rjmp	.+1958   	; 0x14ae <DIO_enuInit+0x7c4>
	{
		Loc_u8PortNumber = Local_Iterator/REG_BITS;   // PORT NUMBER
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	86 95       	lsr	r24
     d0c:	86 95       	lsr	r24
     d0e:	86 95       	lsr	r24
     d10:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8PinNumber  = Local_Iterator%REG_BITS;   // PIN NUMBER
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	87 70       	andi	r24, 0x07	; 7
     d16:	89 83       	std	Y+1, r24	; 0x01
		
		/**************************** VALIDATION ***************************/
		if(Loc_u8PortNumber > DIO_enuNumberOfPorts)
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	85 30       	cpi	r24, 0x05	; 5
     d1c:	18 f0       	brcs	.+6      	; 0xd24 <DIO_enuInit+0x3a>
		{
			Local_ErrorStatus = DIO_enuInvalidPortNum;
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	8c 83       	std	Y+4, r24	; 0x04
     d22:	c2 c3       	rjmp	.+1924   	; 0x14a8 <DIO_enuInit+0x7be>
		}
		else if (Loc_u8PinNumber > DIO_enuNumberOfPins)
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	81 32       	cpi	r24, 0x21	; 33
     d28:	18 f0       	brcs	.+6      	; 0xd30 <DIO_enuInit+0x46>
		{
			Local_ErrorStatus = DIO_enuInvalidPinNum;
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 83       	std	Y+4, r24	; 0x04
     d2e:	bc c3       	rjmp	.+1912   	; 0x14a8 <DIO_enuInit+0x7be>
		}
		/*******************************************************************/
		else if (Local_ErrorStatus == DIO_enuOK)
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	88 23       	and	r24, r24
     d34:	09 f0       	breq	.+2      	; 0xd38 <DIO_enuInit+0x4e>
     d36:	b6 c3       	rjmp	.+1900   	; 0x14a4 <DIO_enuInit+0x7ba>
		{
			// Switching on the ports [A,B,C OR D]
			switch (Loc_u8PortNumber)
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3e 87       	std	Y+14, r19	; 0x0e
     d40:	2d 87       	std	Y+13, r18	; 0x0d
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	91 05       	cpc	r25, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <DIO_enuInit+0x64>
     d4c:	fc c0       	rjmp	.+504    	; 0xf46 <DIO_enuInit+0x25c>
     d4e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d50:	3e 85       	ldd	r19, Y+14	; 0x0e
     d52:	22 30       	cpi	r18, 0x02	; 2
     d54:	31 05       	cpc	r19, r1
     d56:	2c f4       	brge	.+10     	; 0xd62 <DIO_enuInit+0x78>
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	71 f0       	breq	.+28     	; 0xd7c <DIO_enuInit+0x92>
     d60:	a3 c3       	rjmp	.+1862   	; 0x14a8 <DIO_enuInit+0x7be>
     d62:	2d 85       	ldd	r18, Y+13	; 0x0d
     d64:	3e 85       	ldd	r19, Y+14	; 0x0e
     d66:	22 30       	cpi	r18, 0x02	; 2
     d68:	31 05       	cpc	r19, r1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <DIO_enuInit+0x84>
     d6c:	d1 c1       	rjmp	.+930    	; 0x1110 <DIO_enuInit+0x426>
     d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d70:	9e 85       	ldd	r25, Y+14	; 0x0e
     d72:	83 30       	cpi	r24, 0x03	; 3
     d74:	91 05       	cpc	r25, r1
     d76:	09 f4       	brne	.+2      	; 0xd7a <DIO_enuInit+0x90>
     d78:	b0 c2       	rjmp	.+1376   	; 0x12da <DIO_enuInit+0x5f0>
     d7a:	96 c3       	rjmp	.+1836   	; 0x14a8 <DIO_enuInit+0x7be>
			{
				/****************************** PORTA ***************************************/
				case (DIO_enuPORTA):
				// Switching on the pin's Direction [INPUT OR OUTPUT]
				switch (DIO_strPinCfg[Local_Iterator].DIO_strPinDirection)
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	fc 01       	movw	r30, r24
     d88:	e8 59       	subi	r30, 0x98	; 152
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	80 81       	ld	r24, Z
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3c 87       	std	Y+12, r19	; 0x0c
     d94:	2b 87       	std	Y+11, r18	; 0x0b
     d96:	8b 85       	ldd	r24, Y+11	; 0x0b
     d98:	9c 85       	ldd	r25, Y+12	; 0x0c
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	09 f4       	brne	.+2      	; 0xda0 <DIO_enuInit+0xb6>
     d9e:	6c c0       	rjmp	.+216    	; 0xe78 <DIO_enuInit+0x18e>
     da0:	2b 85       	ldd	r18, Y+11	; 0x0b
     da2:	3c 85       	ldd	r19, Y+12	; 0x0c
     da4:	21 30       	cpi	r18, 0x01	; 1
     da6:	31 05       	cpc	r19, r1
     da8:	09 f0       	breq	.+2      	; 0xdac <DIO_enuInit+0xc2>
     daa:	cd c0       	rjmp	.+410    	; 0xf46 <DIO_enuInit+0x25c>
				{
					/**************************** OUTPUT **************************************/
					case (DIO_enuOUTPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputLow)
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	fc 01       	movw	r30, r24
     db8:	e7 59       	subi	r30, 0x97	; 151
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	80 81       	ld	r24, Z
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	39 f5       	brne	.+78     	; 0xe10 <DIO_enuInit+0x126>
					{
						// OUTPUT PIN
						SET_BIT(DDRA, Loc_u8PinNumber);
     dc2:	aa e3       	ldi	r26, 0x3A	; 58
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	ea e3       	ldi	r30, 0x3A	; 58
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_enuInit+0xf4>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	2a 95       	dec	r18
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_enuInit+0xf0>
     de2:	84 2b       	or	r24, r20
     de4:	8c 93       	st	X, r24
						// MODE : LOW
						CLR_BIT(PORTA, Loc_u8PinNumber);
     de6:	ab e3       	ldi	r26, 0x3B	; 59
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	eb e3       	ldi	r30, 0x3B	; 59
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_enuInit+0x11a>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_enuInit+0x116>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	9b c0       	rjmp	.+310    	; 0xf46 <DIO_enuInit+0x25c>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputHigh)
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	88 2f       	mov	r24, r24
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	fc 01       	movw	r30, r24
     e1c:	e7 59       	subi	r30, 0x97	; 151
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	80 81       	ld	r24, Z
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	31 f5       	brne	.+76     	; 0xe72 <DIO_enuInit+0x188>
					{
						// OUTPUT PIN
						SET_BIT(DDRA, Loc_u8PinNumber);
     e26:	aa e3       	ldi	r26, 0x3A	; 58
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ea e3       	ldi	r30, 0x3A	; 58
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_enuInit+0x158>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	2a 95       	dec	r18
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_enuInit+0x154>
     e46:	84 2b       	or	r24, r20
     e48:	8c 93       	st	X, r24
						// MODE : LOW
						SET_BIT(PORTA, Loc_u8PinNumber);
     e4a:	ab e3       	ldi	r26, 0x3B	; 59
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	eb e3       	ldi	r30, 0x3B	; 59
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_enuInit+0x17e>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_enuInit+0x17a>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	6a c0       	rjmp	.+212    	; 0xf46 <DIO_enuInit+0x25c>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
     e72:	85 e0       	ldi	r24, 0x05	; 5
     e74:	8c 83       	std	Y+4, r24	; 0x04
     e76:	67 c0       	rjmp	.+206    	; 0xf46 <DIO_enuInit+0x25c>
					break;
					
					/**************************** INPUT **************************************/
					case (DIO_enuINPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinPullUp)
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	fc 01       	movw	r30, r24
     e84:	e7 59       	subi	r30, 0x97	; 151
     e86:	fe 4f       	sbci	r31, 0xFE	; 254
     e88:	80 81       	ld	r24, Z
     e8a:	88 23       	and	r24, r24
     e8c:	39 f5       	brne	.+78     	; 0xedc <DIO_enuInit+0x1f2>
					{
						// INPUT PIN
						CLR_BIT(DDRA, Loc_u8PinNumber);
     e8e:	aa e3       	ldi	r26, 0x3A	; 58
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ea e3       	ldi	r30, 0x3A	; 58
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_enuInit+0x1c0>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	2a 95       	dec	r18
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_enuInit+0x1bc>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
						// MODE : PULL UP
						SET_BIT(PORTA, Loc_u8PinNumber);
     eb4:	ab e3       	ldi	r26, 0x3B	; 59
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	eb e3       	ldi	r30, 0x3B	; 59
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_enuInit+0x1e8>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_enuInit+0x1e4>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	35 c0       	rjmp	.+106    	; 0xf46 <DIO_enuInit+0x25c>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinHighImp)
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	fc 01       	movw	r30, r24
     ee8:	e7 59       	subi	r30, 0x97	; 151
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	80 81       	ld	r24, Z
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	41 f5       	brne	.+80     	; 0xf42 <DIO_enuInit+0x258>
					{
						// INPUT PIN
						CLR_BIT(DDRA, Loc_u8PinNumber);
     ef2:	aa e3       	ldi	r26, 0x3A	; 58
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ea e3       	ldi	r30, 0x3A	; 58
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_enuInit+0x224>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	2a 95       	dec	r18
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_enuInit+0x220>
     f12:	80 95       	com	r24
     f14:	84 23       	and	r24, r20
     f16:	8c 93       	st	X, r24
						// MODE : HIGH IMPEDANCE
						CLR_BIT(PORTA, Loc_u8PinNumber);
     f18:	ab e3       	ldi	r26, 0x3B	; 59
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	eb e3       	ldi	r30, 0x3B	; 59
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_enuInit+0x24c>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_enuInit+0x248>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_enuInit+0x25c>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
     f42:	85 e0       	ldi	r24, 0x05	; 5
     f44:	8c 83       	std	Y+4, r24	; 0x04
				}
				
				/****************************** PORTB ***************************************/
				case (DIO_enuPORTB):
				// Switching on the pin's Direction [INPUT OR OUTPUT]
				switch (DIO_strPinCfg[Local_Iterator].DIO_strPinDirection)
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	fc 01       	movw	r30, r24
     f52:	e8 59       	subi	r30, 0x98	; 152
     f54:	fe 4f       	sbci	r31, 0xFE	; 254
     f56:	80 81       	ld	r24, Z
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3a 87       	std	Y+10, r19	; 0x0a
     f5e:	29 87       	std	Y+9, r18	; 0x09
     f60:	89 85       	ldd	r24, Y+9	; 0x09
     f62:	9a 85       	ldd	r25, Y+10	; 0x0a
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	09 f4       	brne	.+2      	; 0xf6a <DIO_enuInit+0x280>
     f68:	6c c0       	rjmp	.+216    	; 0x1042 <DIO_enuInit+0x358>
     f6a:	29 85       	ldd	r18, Y+9	; 0x09
     f6c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f6e:	21 30       	cpi	r18, 0x01	; 1
     f70:	31 05       	cpc	r19, r1
     f72:	09 f0       	breq	.+2      	; 0xf76 <DIO_enuInit+0x28c>
     f74:	cd c0       	rjmp	.+410    	; 0x1110 <DIO_enuInit+0x426>
				{
					/**************************** OUTPUT **************************************/
					case (DIO_enuOUTPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputLow)
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	fc 01       	movw	r30, r24
     f82:	e7 59       	subi	r30, 0x97	; 151
     f84:	fe 4f       	sbci	r31, 0xFE	; 254
     f86:	80 81       	ld	r24, Z
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	39 f5       	brne	.+78     	; 0xfda <DIO_enuInit+0x2f0>
					{
						// OUTPUT PIN
						SET_BIT(DDRB, Loc_u8PinNumber);
     f8c:	a7 e3       	ldi	r26, 0x37	; 55
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e7 e3       	ldi	r30, 0x37	; 55
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_enuInit+0x2be>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	2a 95       	dec	r18
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_enuInit+0x2ba>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
						// MODE : LOW
						CLR_BIT(PORTB, Loc_u8PinNumber);
     fb0:	a8 e3       	ldi	r26, 0x38	; 56
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e8 e3       	ldi	r30, 0x38	; 56
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_enuInit+0x2e4>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_enuInit+0x2e0>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	9b c0       	rjmp	.+310    	; 0x1110 <DIO_enuInit+0x426>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputHigh)
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	fc 01       	movw	r30, r24
     fe6:	e7 59       	subi	r30, 0x97	; 151
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	80 81       	ld	r24, Z
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	31 f5       	brne	.+76     	; 0x103c <DIO_enuInit+0x352>
					{
						// OUTPUT PIN
						SET_BIT(DDRB, Loc_u8PinNumber);
     ff0:	a7 e3       	ldi	r26, 0x37	; 55
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e7 e3       	ldi	r30, 0x37	; 55
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_enuInit+0x322>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	2a 95       	dec	r18
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_enuInit+0x31e>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
						// MODE : LOW
						SET_BIT(PORTB, Loc_u8PinNumber);
    1014:	a8 e3       	ldi	r26, 0x38	; 56
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e8 e3       	ldi	r30, 0x38	; 56
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_enuInit+0x348>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_enuInit+0x344>
    1036:	84 2b       	or	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	6a c0       	rjmp	.+212    	; 0x1110 <DIO_enuInit+0x426>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    103c:	85 e0       	ldi	r24, 0x05	; 5
    103e:	8c 83       	std	Y+4, r24	; 0x04
    1040:	67 c0       	rjmp	.+206    	; 0x1110 <DIO_enuInit+0x426>
					break;
					
					/**************************** INPUT **************************************/
					case (DIO_enuINPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinPullUp)
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	fc 01       	movw	r30, r24
    104e:	e7 59       	subi	r30, 0x97	; 151
    1050:	fe 4f       	sbci	r31, 0xFE	; 254
    1052:	80 81       	ld	r24, Z
    1054:	88 23       	and	r24, r24
    1056:	39 f5       	brne	.+78     	; 0x10a6 <DIO_enuInit+0x3bc>
					{
						// INPUT PIN
						CLR_BIT(DDRB, Loc_u8PinNumber);
    1058:	a7 e3       	ldi	r26, 0x37	; 55
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e7 e3       	ldi	r30, 0x37	; 55
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_enuInit+0x38a>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	2a 95       	dec	r18
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_enuInit+0x386>
    1078:	80 95       	com	r24
    107a:	84 23       	and	r24, r20
    107c:	8c 93       	st	X, r24
						// MODE : PULL UP
						SET_BIT(PORTB, Loc_u8PinNumber);
    107e:	a8 e3       	ldi	r26, 0x38	; 56
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e8 e3       	ldi	r30, 0x38	; 56
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_enuInit+0x3b2>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_enuInit+0x3ae>
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	35 c0       	rjmp	.+106    	; 0x1110 <DIO_enuInit+0x426>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinHighImp)
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	fc 01       	movw	r30, r24
    10b2:	e7 59       	subi	r30, 0x97	; 151
    10b4:	fe 4f       	sbci	r31, 0xFE	; 254
    10b6:	80 81       	ld	r24, Z
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	41 f5       	brne	.+80     	; 0x110c <DIO_enuInit+0x422>
					{
						// INPUT PIN
						CLR_BIT(DDRB, Loc_u8PinNumber);
    10bc:	a7 e3       	ldi	r26, 0x37	; 55
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e3       	ldi	r30, 0x37	; 55
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_enuInit+0x3ee>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	2a 95       	dec	r18
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_enuInit+0x3ea>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
						// MODE : HIGH IMPEDANCE
						CLR_BIT(PORTB, Loc_u8PinNumber);
    10e2:	a8 e3       	ldi	r26, 0x38	; 56
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e8 e3       	ldi	r30, 0x38	; 56
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_enuInit+0x416>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_enuInit+0x412>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_enuInit+0x426>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    110c:	85 e0       	ldi	r24, 0x05	; 5
    110e:	8c 83       	std	Y+4, r24	; 0x04
					break;
				}
				/****************************** PORTC ***************************************/
				case (DIO_enuPORTC):
				// Switching on the pin's Direction [INPUT OR OUTPUT]
				switch (DIO_strPinCfg[Local_Iterator].DIO_strPinDirection)
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	fc 01       	movw	r30, r24
    111c:	e8 59       	subi	r30, 0x98	; 152
    111e:	fe 4f       	sbci	r31, 0xFE	; 254
    1120:	80 81       	ld	r24, Z
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	38 87       	std	Y+8, r19	; 0x08
    1128:	2f 83       	std	Y+7, r18	; 0x07
    112a:	8f 81       	ldd	r24, Y+7	; 0x07
    112c:	98 85       	ldd	r25, Y+8	; 0x08
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	09 f4       	brne	.+2      	; 0x1134 <DIO_enuInit+0x44a>
    1132:	6c c0       	rjmp	.+216    	; 0x120c <DIO_enuInit+0x522>
    1134:	2f 81       	ldd	r18, Y+7	; 0x07
    1136:	38 85       	ldd	r19, Y+8	; 0x08
    1138:	21 30       	cpi	r18, 0x01	; 1
    113a:	31 05       	cpc	r19, r1
    113c:	09 f0       	breq	.+2      	; 0x1140 <DIO_enuInit+0x456>
    113e:	cd c0       	rjmp	.+410    	; 0x12da <DIO_enuInit+0x5f0>
				{
					/**************************** OUTPUT **************************************/
					case (DIO_enuOUTPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputLow)
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	fc 01       	movw	r30, r24
    114c:	e7 59       	subi	r30, 0x97	; 151
    114e:	fe 4f       	sbci	r31, 0xFE	; 254
    1150:	80 81       	ld	r24, Z
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	39 f5       	brne	.+78     	; 0x11a4 <DIO_enuInit+0x4ba>
					{
						// OUTPUT PIN
						SET_BIT(DDRC, Loc_u8PinNumber);
    1156:	a4 e3       	ldi	r26, 0x34	; 52
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e4 e3       	ldi	r30, 0x34	; 52
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_enuInit+0x488>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	2a 95       	dec	r18
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_enuInit+0x484>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
						// MODE : LOW
						CLR_BIT(PORTC, Loc_u8PinNumber);
    117a:	a5 e3       	ldi	r26, 0x35	; 53
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e5 e3       	ldi	r30, 0x35	; 53
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_enuInit+0x4ae>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_enuInit+0x4aa>
    119c:	80 95       	com	r24
    119e:	84 23       	and	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	9b c0       	rjmp	.+310    	; 0x12da <DIO_enuInit+0x5f0>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputHigh)
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	fc 01       	movw	r30, r24
    11b0:	e7 59       	subi	r30, 0x97	; 151
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	80 81       	ld	r24, Z
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	31 f5       	brne	.+76     	; 0x1206 <DIO_enuInit+0x51c>
					{
						// OUTPUT PIN
						SET_BIT(DDRC, Loc_u8PinNumber);
    11ba:	a4 e3       	ldi	r26, 0x34	; 52
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e4 e3       	ldi	r30, 0x34	; 52
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_enuInit+0x4ec>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	2a 95       	dec	r18
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_enuInit+0x4e8>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
						// MODE : LOW
						SET_BIT(PORTC, Loc_u8PinNumber);
    11de:	a5 e3       	ldi	r26, 0x35	; 53
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_enuInit+0x512>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_enuInit+0x50e>
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	6a c0       	rjmp	.+212    	; 0x12da <DIO_enuInit+0x5f0>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    1206:	85 e0       	ldi	r24, 0x05	; 5
    1208:	8c 83       	std	Y+4, r24	; 0x04
    120a:	67 c0       	rjmp	.+206    	; 0x12da <DIO_enuInit+0x5f0>
					break;
					
					/**************************** INPUT **************************************/
					case (DIO_enuINPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinPullUp)
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	fc 01       	movw	r30, r24
    1218:	e7 59       	subi	r30, 0x97	; 151
    121a:	fe 4f       	sbci	r31, 0xFE	; 254
    121c:	80 81       	ld	r24, Z
    121e:	88 23       	and	r24, r24
    1220:	39 f5       	brne	.+78     	; 0x1270 <DIO_enuInit+0x586>
					{
						// INPUT PIN
						CLR_BIT(DDRC, Loc_u8PinNumber);
    1222:	a4 e3       	ldi	r26, 0x34	; 52
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e4 e3       	ldi	r30, 0x34	; 52
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_enuInit+0x554>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	2a 95       	dec	r18
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_enuInit+0x550>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
						// MODE : PULL UP
						SET_BIT(PORTC, Loc_u8PinNumber);
    1248:	a5 e3       	ldi	r26, 0x35	; 53
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e3       	ldi	r30, 0x35	; 53
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_enuInit+0x57c>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_enuInit+0x578>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	35 c0       	rjmp	.+106    	; 0x12da <DIO_enuInit+0x5f0>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinHighImp)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	fc 01       	movw	r30, r24
    127c:	e7 59       	subi	r30, 0x97	; 151
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	80 81       	ld	r24, Z
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	41 f5       	brne	.+80     	; 0x12d6 <DIO_enuInit+0x5ec>
					{
						// INPUT PIN
						CLR_BIT(DDRC, Loc_u8PinNumber);
    1286:	a4 e3       	ldi	r26, 0x34	; 52
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e4 e3       	ldi	r30, 0x34	; 52
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_enuInit+0x5b8>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	2a 95       	dec	r18
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <DIO_enuInit+0x5b4>
    12a6:	80 95       	com	r24
    12a8:	84 23       	and	r24, r20
    12aa:	8c 93       	st	X, r24
						// MODE : HIGH IMPEDANCE
						CLR_BIT(PORTC, Loc_u8PinNumber);
    12ac:	a5 e3       	ldi	r26, 0x35	; 53
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e3       	ldi	r30, 0x35	; 53
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_enuInit+0x5e0>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_enuInit+0x5dc>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_enuInit+0x5f0>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    12d6:	85 e0       	ldi	r24, 0x05	; 5
    12d8:	8c 83       	std	Y+4, r24	; 0x04
				}
				
				/****************************** PORTD ***************************************/
				case (DIO_enuPORTD):
				// Switching on the Pin's Direction [INPUT OR OUTPUT]
				switch (DIO_strPinCfg[Local_Iterator].DIO_strPinDirection)
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	fc 01       	movw	r30, r24
    12e6:	e8 59       	subi	r30, 0x98	; 152
    12e8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ea:	80 81       	ld	r24, Z
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3e 83       	std	Y+6, r19	; 0x06
    12f2:	2d 83       	std	Y+5, r18	; 0x05
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	09 f4       	brne	.+2      	; 0x12fe <DIO_enuInit+0x614>
    12fc:	6c c0       	rjmp	.+216    	; 0x13d6 <DIO_enuInit+0x6ec>
    12fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1300:	3e 81       	ldd	r19, Y+6	; 0x06
    1302:	21 30       	cpi	r18, 0x01	; 1
    1304:	31 05       	cpc	r19, r1
    1306:	09 f0       	breq	.+2      	; 0x130a <DIO_enuInit+0x620>
    1308:	cf c0       	rjmp	.+414    	; 0x14a8 <DIO_enuInit+0x7be>
				{
					/**************************** OUTPUT **************************************/
					case (DIO_enuOUTPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputLow)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	fc 01       	movw	r30, r24
    1316:	e7 59       	subi	r30, 0x97	; 151
    1318:	fe 4f       	sbci	r31, 0xFE	; 254
    131a:	80 81       	ld	r24, Z
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	39 f5       	brne	.+78     	; 0x136e <DIO_enuInit+0x684>
					{
						// OUTPUT PIN
						SET_BIT(DDRD, Loc_u8PinNumber);
    1320:	a1 e3       	ldi	r26, 0x31	; 49
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e1 e3       	ldi	r30, 0x31	; 49
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_enuInit+0x652>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	2a 95       	dec	r18
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_enuInit+0x64e>
    1340:	84 2b       	or	r24, r20
    1342:	8c 93       	st	X, r24
						// MODE : LOW
						CLR_BIT(PORTD, Loc_u8PinNumber);
    1344:	a2 e3       	ldi	r26, 0x32	; 50
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e2 e3       	ldi	r30, 0x32	; 50
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_enuInit+0x678>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_enuInit+0x674>
    1366:	80 95       	com	r24
    1368:	84 23       	and	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	9d c0       	rjmp	.+314    	; 0x14a8 <DIO_enuInit+0x7be>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputHigh)
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	fc 01       	movw	r30, r24
    137a:	e7 59       	subi	r30, 0x97	; 151
    137c:	fe 4f       	sbci	r31, 0xFE	; 254
    137e:	80 81       	ld	r24, Z
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	31 f5       	brne	.+76     	; 0x13d0 <DIO_enuInit+0x6e6>
					{
						// OUTPUT PIN
						SET_BIT(DDRD, Loc_u8PinNumber);
    1384:	a1 e3       	ldi	r26, 0x31	; 49
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e1 e3       	ldi	r30, 0x31	; 49
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_enuInit+0x6b6>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	2a 95       	dec	r18
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_enuInit+0x6b2>
    13a4:	84 2b       	or	r24, r20
    13a6:	8c 93       	st	X, r24
						// MODE : LOW
						SET_BIT(PORTD, Loc_u8PinNumber);
    13a8:	a2 e3       	ldi	r26, 0x32	; 50
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e2 e3       	ldi	r30, 0x32	; 50
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_enuInit+0x6dc>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_enuInit+0x6d8>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	6c c0       	rjmp	.+216    	; 0x14a8 <DIO_enuInit+0x7be>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    13d0:	85 e0       	ldi	r24, 0x05	; 5
    13d2:	8c 83       	std	Y+4, r24	; 0x04
    13d4:	69 c0       	rjmp	.+210    	; 0x14a8 <DIO_enuInit+0x7be>
					break;
					
					/**************************** INPUT **************************************/
					case (DIO_enuINPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinPullUp)
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	fc 01       	movw	r30, r24
    13e2:	e7 59       	subi	r30, 0x97	; 151
    13e4:	fe 4f       	sbci	r31, 0xFE	; 254
    13e6:	80 81       	ld	r24, Z
    13e8:	88 23       	and	r24, r24
    13ea:	39 f5       	brne	.+78     	; 0x143a <DIO_enuInit+0x750>
					{
						// INPUT PIN
						CLR_BIT(DDRD, Loc_u8PinNumber);
    13ec:	a1 e3       	ldi	r26, 0x31	; 49
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e1 e3       	ldi	r30, 0x31	; 49
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_enuInit+0x71e>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	2a 95       	dec	r18
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_enuInit+0x71a>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
						// MODE : PULL UP
						SET_BIT(PORTD, Loc_u8PinNumber);
    1412:	a2 e3       	ldi	r26, 0x32	; 50
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e2 e3       	ldi	r30, 0x32	; 50
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_enuInit+0x746>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <DIO_enuInit+0x742>
    1434:	84 2b       	or	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	37 c0       	rjmp	.+110    	; 0x14a8 <DIO_enuInit+0x7be>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinHighImp)
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	fc 01       	movw	r30, r24
    1446:	e7 59       	subi	r30, 0x97	; 151
    1448:	fe 4f       	sbci	r31, 0xFE	; 254
    144a:	80 81       	ld	r24, Z
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	39 f5       	brne	.+78     	; 0x149e <DIO_enuInit+0x7b4>
					{
						// INPUT PIN
						CLR_BIT(DDRD, Loc_u8PinNumber);
    1450:	a1 e3       	ldi	r26, 0x31	; 49
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e1 e3       	ldi	r30, 0x31	; 49
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_enuInit+0x782>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	2a 95       	dec	r18
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_enuInit+0x77e>
    1470:	80 95       	com	r24
    1472:	84 23       	and	r24, r20
    1474:	8c 93       	st	X, r24
						// MODE : HIGH IMPEDANCE
						SET_BIT(PORTD, Loc_u8PinNumber);
    1476:	a2 e3       	ldi	r26, 0x32	; 50
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e2 e3       	ldi	r30, 0x32	; 50
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_enuInit+0x7aa>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_enuInit+0x7a6>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <DIO_enuInit+0x7be>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    149e:	85 e0       	ldi	r24, 0x05	; 5
    14a0:	8c 83       	std	Y+4, r24	; 0x04
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_enuInit+0x7be>
					break;
				}
			}
		}
		else
		Local_ErrorStatus = DIO_enuNOK;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	8c 83       	std	Y+4, r24	; 0x04
	
	u8 Local_Iterator;
	u8 Loc_u8PortNumber = 0;
	u8 Loc_u8PinNumber  = 0;
	
	for (Local_Iterator = 0; Local_Iterator < DIO_enuNumberOfPins ; Local_Iterator++)
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	8f 5f       	subi	r24, 0xFF	; 255
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	80 32       	cpi	r24, 0x20	; 32
    14b2:	08 f4       	brcc	.+2      	; 0x14b6 <DIO_enuInit+0x7cc>
    14b4:	29 cc       	rjmp	.-1966   	; 0xd08 <DIO_enuInit+0x1e>
			}
		}
		else
		Local_ErrorStatus = DIO_enuNOK;
	}
	return Local_ErrorStatus;
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14b8:	2e 96       	adiw	r28, 0x0e	; 14
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <DIO_enuSetPin>:
/*    DIO Set PIN Function									  */
/*	  Input  : Pin Number (Range from 0-31)					  */
/*	  Output : DIO_tenuErrorStatus to Report Errors			  */
/***************************************************************/
DIO_tenuErrorStatus DIO_enuSetPin (DIO_tenuPins Cpy_enuPinNumber)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <DIO_enuSetPin+0x6>
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <DIO_enuSetPin+0x8>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_enuSetPin+0xa>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	8c 83       	std	Y+4, r24	; 0x04
	DIO_tenuErrorStatus Local_ErrorStatus = DIO_enuOK;      	// Assuming the current status is OK
    14da:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_enuPinNumber /REG_BITS;
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	86 95       	lsr	r24
    14e0:	86 95       	lsr	r24
    14e2:	86 95       	lsr	r24
    14e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_enuPinNumber %REG_BITS;
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	87 70       	andi	r24, 0x07	; 7
    14ea:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > DIO_enuNumberOfPorts)
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	85 30       	cpi	r24, 0x05	; 5
    14f0:	18 f0       	brcs	.+6      	; 0x14f8 <DIO_enuSetPin+0x2e>
	{
		Local_ErrorStatus = DIO_enuInvalidPortNum;
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	8b 83       	std	Y+3, r24	; 0x03
    14f6:	7b c0       	rjmp	.+246    	; 0x15ee <DIO_enuSetPin+0x124>
	}
	else if (Loc_u8PinNumber > DIO_enuNumberOfPins)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	81 32       	cpi	r24, 0x21	; 33
    14fc:	18 f0       	brcs	.+6      	; 0x1504 <DIO_enuSetPin+0x3a>
	{
		Local_ErrorStatus = DIO_enuInvalidPinNum;
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	75 c0       	rjmp	.+234    	; 0x15ee <DIO_enuSetPin+0x124>
	}
	/*******************************************************************/
	else if (Local_ErrorStatus == DIO_enuOK)
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	88 23       	and	r24, r24
    1508:	09 f0       	breq	.+2      	; 0x150c <DIO_enuSetPin+0x42>
    150a:	6f c0       	rjmp	.+222    	; 0x15ea <DIO_enuSetPin+0x120>
	{
		switch(Loc_u8PortNumber)
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3e 83       	std	Y+6, r19	; 0x06
    1514:	2d 83       	std	Y+5, r18	; 0x05
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	49 f1       	breq	.+82     	; 0x1572 <DIO_enuSetPin+0xa8>
    1520:	2d 81       	ldd	r18, Y+5	; 0x05
    1522:	3e 81       	ldd	r19, Y+6	; 0x06
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	2c f4       	brge	.+10     	; 0x1534 <DIO_enuSetPin+0x6a>
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	61 f0       	breq	.+24     	; 0x154a <DIO_enuSetPin+0x80>
    1532:	5d c0       	rjmp	.+186    	; 0x15ee <DIO_enuSetPin+0x124>
    1534:	2d 81       	ldd	r18, Y+5	; 0x05
    1536:	3e 81       	ldd	r19, Y+6	; 0x06
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	71 f1       	breq	.+92     	; 0x159a <DIO_enuSetPin+0xd0>
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	91 05       	cpc	r25, r1
    1546:	e9 f1       	breq	.+122    	; 0x15c2 <DIO_enuSetPin+0xf8>
    1548:	52 c0       	rjmp	.+164    	; 0x15ee <DIO_enuSetPin+0x124>
		{
			case DIO_enuPORTA:
			SET_BIT(PORTA, Loc_u8PinNumber);
    154a:	ab e3       	ldi	r26, 0x3B	; 59
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	eb e3       	ldi	r30, 0x3B	; 59
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_enuSetPin+0x9e>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_enuSetPin+0x9a>
    156c:	84 2b       	or	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	3e c0       	rjmp	.+124    	; 0x15ee <DIO_enuSetPin+0x124>
			break;
			
			case DIO_enuPORTB:
			SET_BIT(PORTB, Loc_u8PinNumber);
    1572:	a8 e3       	ldi	r26, 0x38	; 56
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e8 e3       	ldi	r30, 0x38	; 56
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_enuSetPin+0xc6>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_enuSetPin+0xc2>
    1594:	84 2b       	or	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	2a c0       	rjmp	.+84     	; 0x15ee <DIO_enuSetPin+0x124>
			break;
			
			case DIO_enuPORTC:
			SET_BIT(PORTC, Loc_u8PinNumber);
    159a:	a5 e3       	ldi	r26, 0x35	; 53
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e5 e3       	ldi	r30, 0x35	; 53
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_enuSetPin+0xee>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_enuSetPin+0xea>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	16 c0       	rjmp	.+44     	; 0x15ee <DIO_enuSetPin+0x124>
			break;
			
			case DIO_enuPORTD:
			SET_BIT(PORTD, Loc_u8PinNumber);
    15c2:	a2 e3       	ldi	r26, 0x32	; 50
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e2 e3       	ldi	r30, 0x32	; 50
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <DIO_enuSetPin+0x116>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <DIO_enuSetPin+0x112>
    15e4:	84 2b       	or	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_enuSetPin+0x124>
			break;
		}
	}
	else
	{
		Local_ErrorStatus = DIO_enuNOK;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_ErrorStatus;
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
}
    15f0:	26 96       	adiw	r28, 0x06	; 6
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_enuClearPin>:
/*    DIO Clear Pin Function									*/
/*	  Input  : Pin Number (Range from 0-31)						*/
/*	  Output : DIO_tenuErrorStatus to Report Errors				*/
/****************************************************************/
DIO_tenuErrorStatus DIO_enuClearPin (DIO_tenuPins Cpy_enuPinNumber)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DIO_enuClearPin+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <DIO_enuClearPin+0x8>
    160a:	00 d0       	rcall	.+0      	; 0x160c <DIO_enuClearPin+0xa>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	8c 83       	std	Y+4, r24	; 0x04
	DIO_tenuErrorStatus Local_ErrorStatus = DIO_enuOK;      	// Assuming the current status is OK
    1612:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_enuPinNumber /REG_BITS;
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	86 95       	lsr	r24
    1618:	86 95       	lsr	r24
    161a:	86 95       	lsr	r24
    161c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_enuPinNumber %REG_BITS;
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	87 70       	andi	r24, 0x07	; 7
    1622:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > DIO_enuNumberOfPorts)
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	85 30       	cpi	r24, 0x05	; 5
    1628:	18 f0       	brcs	.+6      	; 0x1630 <DIO_enuClearPin+0x2e>
	{
		Local_ErrorStatus = DIO_enuInvalidPortNum;
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	80 c0       	rjmp	.+256    	; 0x1730 <DIO_enuClearPin+0x12e>
	}
	else if (Loc_u8PinNumber > DIO_enuNumberOfPins)
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	81 32       	cpi	r24, 0x21	; 33
    1634:	18 f0       	brcs	.+6      	; 0x163c <DIO_enuClearPin+0x3a>
	{
		Local_ErrorStatus = DIO_enuInvalidPinNum;
    1636:	84 e0       	ldi	r24, 0x04	; 4
    1638:	8b 83       	std	Y+3, r24	; 0x03
    163a:	7a c0       	rjmp	.+244    	; 0x1730 <DIO_enuClearPin+0x12e>
	}
	/*******************************************************************/
	else if (Local_ErrorStatus == DIO_enuOK)
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	88 23       	and	r24, r24
    1640:	09 f0       	breq	.+2      	; 0x1644 <DIO_enuClearPin+0x42>
    1642:	74 c0       	rjmp	.+232    	; 0x172c <DIO_enuClearPin+0x12a>
	{
		switch(Loc_u8PortNumber)
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	3e 83       	std	Y+6, r19	; 0x06
    164c:	2d 83       	std	Y+5, r18	; 0x05
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	9e 81       	ldd	r25, Y+6	; 0x06
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	91 05       	cpc	r25, r1
    1656:	59 f1       	breq	.+86     	; 0x16ae <DIO_enuClearPin+0xac>
    1658:	2d 81       	ldd	r18, Y+5	; 0x05
    165a:	3e 81       	ldd	r19, Y+6	; 0x06
    165c:	22 30       	cpi	r18, 0x02	; 2
    165e:	31 05       	cpc	r19, r1
    1660:	2c f4       	brge	.+10     	; 0x166c <DIO_enuClearPin+0x6a>
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	69 f0       	breq	.+26     	; 0x1684 <DIO_enuClearPin+0x82>
    166a:	62 c0       	rjmp	.+196    	; 0x1730 <DIO_enuClearPin+0x12e>
    166c:	2d 81       	ldd	r18, Y+5	; 0x05
    166e:	3e 81       	ldd	r19, Y+6	; 0x06
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	89 f1       	breq	.+98     	; 0x16d8 <DIO_enuClearPin+0xd6>
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	91 05       	cpc	r25, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <DIO_enuClearPin+0x80>
    1680:	40 c0       	rjmp	.+128    	; 0x1702 <DIO_enuClearPin+0x100>
    1682:	56 c0       	rjmp	.+172    	; 0x1730 <DIO_enuClearPin+0x12e>
		{
			case DIO_enuPORTA:
			CLR_BIT(PORTA, Loc_u8PinNumber);
    1684:	ab e3       	ldi	r26, 0x3B	; 59
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	eb e3       	ldi	r30, 0x3B	; 59
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <DIO_enuClearPin+0xa0>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <DIO_enuClearPin+0x9c>
    16a6:	80 95       	com	r24
    16a8:	84 23       	and	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	41 c0       	rjmp	.+130    	; 0x1730 <DIO_enuClearPin+0x12e>
			break;
			
			case DIO_enuPORTB:
			CLR_BIT(PORTB, Loc_u8PinNumber);
    16ae:	a8 e3       	ldi	r26, 0x38	; 56
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e8 e3       	ldi	r30, 0x38	; 56
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_enuClearPin+0xca>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_enuClearPin+0xc6>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	2c c0       	rjmp	.+88     	; 0x1730 <DIO_enuClearPin+0x12e>
			break;
			
			case DIO_enuPORTC:
			CLR_BIT(PORTC, Loc_u8PinNumber);
    16d8:	a5 e3       	ldi	r26, 0x35	; 53
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e3       	ldi	r30, 0x35	; 53
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_enuClearPin+0xf4>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_enuClearPin+0xf0>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	17 c0       	rjmp	.+46     	; 0x1730 <DIO_enuClearPin+0x12e>
			break;
			
			case DIO_enuPORTD:
			CLR_BIT(PORTD, Loc_u8PinNumber);
    1702:	a2 e3       	ldi	r26, 0x32	; 50
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e2 e3       	ldi	r30, 0x32	; 50
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_enuClearPin+0x11e>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_enuClearPin+0x11a>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_enuClearPin+0x12e>
			break;
		}
	}
	else
	{
		Local_ErrorStatus = DIO_enuNOK;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_ErrorStatus;
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1732:	26 96       	adiw	r28, 0x06	; 6
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <DIO_enuGetPin>:
/*    DIO Get Pin Function																		*/
/*	  Inputs : Pin Number (Range from 0-31), The Address of the Pin Value that needs to be get  */
/*	  Output : DIO_tenuErrorStatus to Report Errors												*/
/************************************************************************************************/
DIO_tenuErrorStatus DIO_enuGetPin (DIO_tenuPins Cpy_enuPinNumber, u8 *Add_u8PinValue)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	28 97       	sbiw	r28, 0x08	; 8
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	8c 83       	std	Y+4, r24	; 0x04
    175a:	7e 83       	std	Y+6, r23	; 0x06
    175c:	6d 83       	std	Y+5, r22	; 0x05
	DIO_tenuErrorStatus Local_ErrorStatus = DIO_enuOK;      	// Assuming the current status is OK
    175e:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_enuPinNumber /REG_BITS;
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	86 95       	lsr	r24
    1764:	86 95       	lsr	r24
    1766:	86 95       	lsr	r24
    1768:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_enuPinNumber %REG_BITS;
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	87 70       	andi	r24, 0x07	; 7
    176e:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > DIO_enuNumberOfPorts)
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	85 30       	cpi	r24, 0x05	; 5
    1774:	18 f0       	brcs	.+6      	; 0x177c <DIO_enuGetPin+0x38>
	{
		Local_ErrorStatus = DIO_enuInvalidPortNum;
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	8b 83       	std	Y+3, r24	; 0x03
    177a:	93 c0       	rjmp	.+294    	; 0x18a2 <DIO_enuGetPin+0x15e>
	}
	else if (Loc_u8PinNumber > DIO_enuNumberOfPins)
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	81 32       	cpi	r24, 0x21	; 33
    1780:	18 f0       	brcs	.+6      	; 0x1788 <DIO_enuGetPin+0x44>
	{
		Local_ErrorStatus = DIO_enuInvalidPinNum;
    1782:	84 e0       	ldi	r24, 0x04	; 4
    1784:	8b 83       	std	Y+3, r24	; 0x03
    1786:	8d c0       	rjmp	.+282    	; 0x18a2 <DIO_enuGetPin+0x15e>
	}
	else if (Add_u8PinValue == NULL)
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	19 f4       	brne	.+6      	; 0x1796 <DIO_enuGetPin+0x52>
	{
		Local_ErrorStatus = DIO_enuNULLPtr;
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	8b 83       	std	Y+3, r24	; 0x03
    1794:	86 c0       	rjmp	.+268    	; 0x18a2 <DIO_enuGetPin+0x15e>
	}
	else if (Local_ErrorStatus == DIO_enuOK)
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	88 23       	and	r24, r24
    179a:	09 f0       	breq	.+2      	; 0x179e <DIO_enuGetPin+0x5a>
    179c:	80 c0       	rjmp	.+256    	; 0x189e <DIO_enuGetPin+0x15a>
	{
		switch(Loc_u8PortNumber)
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	38 87       	std	Y+8, r19	; 0x08
    17a6:	2f 83       	std	Y+7, r18	; 0x07
    17a8:	8f 81       	ldd	r24, Y+7	; 0x07
    17aa:	98 85       	ldd	r25, Y+8	; 0x08
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	91 05       	cpc	r25, r1
    17b0:	71 f1       	breq	.+92     	; 0x180e <DIO_enuGetPin+0xca>
    17b2:	2f 81       	ldd	r18, Y+7	; 0x07
    17b4:	38 85       	ldd	r19, Y+8	; 0x08
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <DIO_enuGetPin+0x82>
    17bc:	8f 81       	ldd	r24, Y+7	; 0x07
    17be:	98 85       	ldd	r25, Y+8	; 0x08
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	69 f0       	breq	.+26     	; 0x17de <DIO_enuGetPin+0x9a>
    17c4:	6e c0       	rjmp	.+220    	; 0x18a2 <DIO_enuGetPin+0x15e>
    17c6:	2f 81       	ldd	r18, Y+7	; 0x07
    17c8:	38 85       	ldd	r19, Y+8	; 0x08
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	b9 f1       	breq	.+110    	; 0x183e <DIO_enuGetPin+0xfa>
    17d0:	8f 81       	ldd	r24, Y+7	; 0x07
    17d2:	98 85       	ldd	r25, Y+8	; 0x08
    17d4:	83 30       	cpi	r24, 0x03	; 3
    17d6:	91 05       	cpc	r25, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <DIO_enuGetPin+0x98>
    17da:	49 c0       	rjmp	.+146    	; 0x186e <DIO_enuGetPin+0x12a>
    17dc:	62 c0       	rjmp	.+196    	; 0x18a2 <DIO_enuGetPin+0x15e>
		{
			case DIO_enuPORTA:
			*Add_u8PinValue = GET_BIT(PINA, Loc_u8PinNumber);
    17de:	a9 e3       	ldi	r26, 0x39	; 57
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e9 e3       	ldi	r30, 0x39	; 57
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_enuGetPin+0xb8>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <DIO_enuGetPin+0xb4>
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	8c 91       	ld	r24, X
    1806:	ed 81       	ldd	r30, Y+5	; 0x05
    1808:	fe 81       	ldd	r31, Y+6	; 0x06
    180a:	80 83       	st	Z, r24
    180c:	4a c0       	rjmp	.+148    	; 0x18a2 <DIO_enuGetPin+0x15e>
			break;
			
			case DIO_enuPORTB:
			*Add_u8PinValue = GET_BIT(PINB, Loc_u8PinNumber);
    180e:	a6 e3       	ldi	r26, 0x36	; 54
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e6 e3       	ldi	r30, 0x36	; 54
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_enuGetPin+0xe8>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_enuGetPin+0xe4>
    1830:	84 23       	and	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	8c 91       	ld	r24, X
    1836:	ed 81       	ldd	r30, Y+5	; 0x05
    1838:	fe 81       	ldd	r31, Y+6	; 0x06
    183a:	80 83       	st	Z, r24
    183c:	32 c0       	rjmp	.+100    	; 0x18a2 <DIO_enuGetPin+0x15e>
			break;
			
			case DIO_enuPORTC:
			*Add_u8PinValue = GET_BIT(PINC, Loc_u8PinNumber);
    183e:	a3 e3       	ldi	r26, 0x33	; 51
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e3 e3       	ldi	r30, 0x33	; 51
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	48 2f       	mov	r20, r24
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <DIO_enuGetPin+0x118>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <DIO_enuGetPin+0x114>
    1860:	84 23       	and	r24, r20
    1862:	8c 93       	st	X, r24
    1864:	8c 91       	ld	r24, X
    1866:	ed 81       	ldd	r30, Y+5	; 0x05
    1868:	fe 81       	ldd	r31, Y+6	; 0x06
    186a:	80 83       	st	Z, r24
    186c:	1a c0       	rjmp	.+52     	; 0x18a2 <DIO_enuGetPin+0x15e>
			break;
			
			case DIO_enuPORTD:
			*Add_u8PinValue = GET_BIT(PIND, Loc_u8PinNumber);
    186e:	a0 e3       	ldi	r26, 0x30	; 48
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e0 e3       	ldi	r30, 0x30	; 48
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_enuGetPin+0x148>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_enuGetPin+0x144>
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	8c 91       	ld	r24, X
    1896:	ed 81       	ldd	r30, Y+5	; 0x05
    1898:	fe 81       	ldd	r31, Y+6	; 0x06
    189a:	80 83       	st	Z, r24
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_enuGetPin+0x15e>
			break;
		}
	}
	else
	{
		Local_ErrorStatus = DIO_enuNOK;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return Local_ErrorStatus;
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18a4:	28 96       	adiw	r28, 0x08	; 8
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <DIO_enuSetPort>:
/*    DIO Get Port Function																		*/
/*	  Inputs : Port Number (Range from 0-3), The Address of the Port Value that needs to be get */
/*	  Output : DIO_tenuErrorStatus to Report Errors												*/
/************************************************************************************************/
DIO_tenuErrorStatus DIO_enuSetPort (DIO_tenuPort Cpy_enuPortNumber, u8 Cpy_AssignedPortVal)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <DIO_enuSetPort+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <DIO_enuSetPort+0x8>
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	8a 83       	std	Y+2, r24	; 0x02
    18c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_ErrorStatus = DIO_enuOK;            // Setting Status to be OK by default
    18c8:	19 82       	std	Y+1, r1	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Cpy_enuPortNumber > DIO_enuPORTD)
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	18 f0       	brcs	.+6      	; 0x18d6 <DIO_enuSetPort+0x20>
	{
		Local_ErrorStatus = DIO_enuInvalidPortNum;
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	35 c0       	rjmp	.+106    	; 0x1940 <DIO_enuSetPort+0x8a>
	}

	else if (Local_ErrorStatus == DIO_enuOK)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	88 23       	and	r24, r24
    18da:	91 f5       	brne	.+100    	; 0x1940 <DIO_enuSetPort+0x8a>
	{
		switch(Cpy_enuPortNumber)
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	3d 83       	std	Y+5, r19	; 0x05
    18e4:	2c 83       	std	Y+4, r18	; 0x04
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	91 05       	cpc	r25, r1
    18ee:	d1 f0       	breq	.+52     	; 0x1924 <DIO_enuSetPort+0x6e>
    18f0:	2c 81       	ldd	r18, Y+4	; 0x04
    18f2:	3d 81       	ldd	r19, Y+5	; 0x05
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 05       	cpc	r19, r1
    18f8:	2c f4       	brge	.+10     	; 0x1904 <DIO_enuSetPort+0x4e>
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	9d 81       	ldd	r25, Y+5	; 0x05
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	61 f0       	breq	.+24     	; 0x191a <DIO_enuSetPort+0x64>
    1902:	1e c0       	rjmp	.+60     	; 0x1940 <DIO_enuSetPort+0x8a>
    1904:	2c 81       	ldd	r18, Y+4	; 0x04
    1906:	3d 81       	ldd	r19, Y+5	; 0x05
    1908:	22 30       	cpi	r18, 0x02	; 2
    190a:	31 05       	cpc	r19, r1
    190c:	81 f0       	breq	.+32     	; 0x192e <DIO_enuSetPort+0x78>
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	9d 81       	ldd	r25, Y+5	; 0x05
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	91 05       	cpc	r25, r1
    1916:	81 f0       	breq	.+32     	; 0x1938 <DIO_enuSetPort+0x82>
    1918:	13 c0       	rjmp	.+38     	; 0x1940 <DIO_enuSetPort+0x8a>
		{
			case DIO_enuPORTA:
			PORTA=Cpy_AssignedPortVal;
    191a:	eb e3       	ldi	r30, 0x3B	; 59
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	80 83       	st	Z, r24
    1922:	0e c0       	rjmp	.+28     	; 0x1940 <DIO_enuSetPort+0x8a>
			break;
			
			case DIO_enuPORTB:
			PORTB=Cpy_AssignedPortVal;
    1924:	e8 e3       	ldi	r30, 0x38	; 56
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	80 83       	st	Z, r24
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <DIO_enuSetPort+0x8a>
			break;
			
			case DIO_enuPORTC:
			PORTC=Cpy_AssignedPortVal;
    192e:	e5 e3       	ldi	r30, 0x35	; 53
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	80 83       	st	Z, r24
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <DIO_enuSetPort+0x8a>
			break;
			
			case DIO_enuPORTD:
			PORTD=Cpy_AssignedPortVal;
    1938:	e2 e3       	ldi	r30, 0x32	; 50
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	80 83       	st	Z, r24
			default :
			break;
		}
	}
	
	return Local_ErrorStatus;
    1940:	89 81       	ldd	r24, Y+1	; 0x01
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <DIO_enuSetPinValue>:
/*			   & Value (HIGH or LOW							  */
/*	  Output : DIO_tenuErrorStatus to Report Errors			  */
/***************************************************************/
/* To be used in Keypad Driver */
DIO_tenuErrorStatus DIO_enuSetPinValue (DIO_tenuPins Cpy_enuPinNumber, DIO_tenuPinMode Cpy_enuPinValue)
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	27 97       	sbiw	r28, 0x07	; 7
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	8c 83       	std	Y+4, r24	; 0x04
    1968:	6d 83       	std	Y+5, r22	; 0x05
	DIO_tenuErrorStatus Local_ErrorStatus = DIO_enuOK;
    196a:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_enuPinNumber /REG_BITS;
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	86 95       	lsr	r24
    1970:	86 95       	lsr	r24
    1972:	86 95       	lsr	r24
    1974:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_enuPinNumber %REG_BITS;
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	87 70       	andi	r24, 0x07	; 7
    197a:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > DIO_enuNumberOfPorts)
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	85 30       	cpi	r24, 0x05	; 5
    1980:	18 f0       	brcs	.+6      	; 0x1988 <DIO_enuSetPinValue+0x36>
	{
		Local_ErrorStatus = DIO_enuInvalidPortNum;
    1982:	83 e0       	ldi	r24, 0x03	; 3
    1984:	8b 83       	std	Y+3, r24	; 0x03
    1986:	f2 c0       	rjmp	.+484    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
	}
	else if (Loc_u8PinNumber > DIO_enuNumberOfPins)
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	81 32       	cpi	r24, 0x21	; 33
    198c:	18 f0       	brcs	.+6      	; 0x1994 <DIO_enuSetPinValue+0x42>
	{
		Local_ErrorStatus = DIO_enuInvalidPinNum;
    198e:	84 e0       	ldi	r24, 0x04	; 4
    1990:	8b 83       	std	Y+3, r24	; 0x03
    1992:	ec c0       	rjmp	.+472    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
	}
	else
	{
		switch (Loc_u8PortNumber)
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	3f 83       	std	Y+7, r19	; 0x07
    199c:	2e 83       	std	Y+6, r18	; 0x06
    199e:	8e 81       	ldd	r24, Y+6	; 0x06
    19a0:	9f 81       	ldd	r25, Y+7	; 0x07
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	91 05       	cpc	r25, r1
    19a6:	09 f4       	brne	.+2      	; 0x19aa <DIO_enuSetPinValue+0x58>
    19a8:	49 c0       	rjmp	.+146    	; 0x1a3c <DIO_enuSetPinValue+0xea>
    19aa:	2e 81       	ldd	r18, Y+6	; 0x06
    19ac:	3f 81       	ldd	r19, Y+7	; 0x07
    19ae:	22 30       	cpi	r18, 0x02	; 2
    19b0:	31 05       	cpc	r19, r1
    19b2:	2c f4       	brge	.+10     	; 0x19be <DIO_enuSetPinValue+0x6c>
    19b4:	8e 81       	ldd	r24, Y+6	; 0x06
    19b6:	9f 81       	ldd	r25, Y+7	; 0x07
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	71 f0       	breq	.+28     	; 0x19d8 <DIO_enuSetPinValue+0x86>
    19bc:	d5 c0       	rjmp	.+426    	; 0x1b68 <DIO_enuSetPinValue+0x216>
    19be:	2e 81       	ldd	r18, Y+6	; 0x06
    19c0:	3f 81       	ldd	r19, Y+7	; 0x07
    19c2:	22 30       	cpi	r18, 0x02	; 2
    19c4:	31 05       	cpc	r19, r1
    19c6:	09 f4       	brne	.+2      	; 0x19ca <DIO_enuSetPinValue+0x78>
    19c8:	6b c0       	rjmp	.+214    	; 0x1aa0 <DIO_enuSetPinValue+0x14e>
    19ca:	8e 81       	ldd	r24, Y+6	; 0x06
    19cc:	9f 81       	ldd	r25, Y+7	; 0x07
    19ce:	83 30       	cpi	r24, 0x03	; 3
    19d0:	91 05       	cpc	r25, r1
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <DIO_enuSetPinValue+0x84>
    19d4:	97 c0       	rjmp	.+302    	; 0x1b04 <DIO_enuSetPinValue+0x1b2>
    19d6:	c8 c0       	rjmp	.+400    	; 0x1b68 <DIO_enuSetPinValue+0x216>
		{	
			case DIO_enuPORTA:
				if (Cpy_enuPinValue == DIO_enuOutputHigh)
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	83 30       	cpi	r24, 0x03	; 3
    19dc:	a1 f4       	brne	.+40     	; 0x1a06 <DIO_enuSetPinValue+0xb4>
				{
					SET_BIT(PORTA,Loc_u8PinNumber);
    19de:	ab e3       	ldi	r26, 0x3B	; 59
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	eb e3       	ldi	r30, 0x3B	; 59
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	48 2f       	mov	r20, r24
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	02 2e       	mov	r0, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <DIO_enuSetPinValue+0xaa>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	0a 94       	dec	r0
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <DIO_enuSetPinValue+0xa6>
    1a00:	84 2b       	or	r24, r20
    1a02:	8c 93       	st	X, r24
    1a04:	b3 c0       	rjmp	.+358    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				else if (Cpy_enuPinValue == DIO_enuOutputLow)
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	82 30       	cpi	r24, 0x02	; 2
    1a0a:	a9 f4       	brne	.+42     	; 0x1a36 <DIO_enuSetPinValue+0xe4>
				{
					CLR_BIT(PORTA,Loc_u8PinNumber);
    1a0c:	ab e3       	ldi	r26, 0x3B	; 59
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	eb e3       	ldi	r30, 0x3B	; 59
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	48 2f       	mov	r20, r24
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 2e       	mov	r0, r18
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <DIO_enuSetPinValue+0xd8>
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	0a 94       	dec	r0
    1a2c:	e2 f7       	brpl	.-8      	; 0x1a26 <DIO_enuSetPinValue+0xd4>
    1a2e:	80 95       	com	r24
    1a30:	84 23       	and	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	9b c0       	rjmp	.+310    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				else
				{
					Local_ErrorStatus = DIO_enuNOK;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    1a3a:	98 c0       	rjmp	.+304    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				break;
			
			case DIO_enuPORTB:
				if (Cpy_enuPinValue == DIO_enuOutputHigh)
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	a1 f4       	brne	.+40     	; 0x1a6a <DIO_enuSetPinValue+0x118>
				{
					SET_BIT(PORTB,Loc_u8PinNumber);
    1a42:	a8 e3       	ldi	r26, 0x38	; 56
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e8 e3       	ldi	r30, 0x38	; 56
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <DIO_enuSetPinValue+0x10e>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <DIO_enuSetPinValue+0x10a>
    1a64:	84 2b       	or	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	81 c0       	rjmp	.+258    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				else if (Cpy_enuPinValue == DIO_enuOutputLow)
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	82 30       	cpi	r24, 0x02	; 2
    1a6e:	a9 f4       	brne	.+42     	; 0x1a9a <DIO_enuSetPinValue+0x148>
				{
					CLR_BIT(PORTB,Loc_u8PinNumber);
    1a70:	a8 e3       	ldi	r26, 0x38	; 56
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e8 e3       	ldi	r30, 0x38	; 56
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_enuSetPinValue+0x13c>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_enuSetPinValue+0x138>
    1a92:	80 95       	com	r24
    1a94:	84 23       	and	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	69 c0       	rjmp	.+210    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				else
				{
					Local_ErrorStatus = DIO_enuNOK;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	8b 83       	std	Y+3, r24	; 0x03
    1a9e:	66 c0       	rjmp	.+204    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				break;
			
			
			case DIO_enuPORTC:
				if (Cpy_enuPinValue == DIO_enuOutputHigh)
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	a1 f4       	brne	.+40     	; 0x1ace <DIO_enuSetPinValue+0x17c>
				{
					SET_BIT(PORTC,Loc_u8PinNumber);
    1aa6:	a5 e3       	ldi	r26, 0x35	; 53
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e5 e3       	ldi	r30, 0x35	; 53
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_enuSetPinValue+0x172>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_enuSetPinValue+0x16e>
    1ac8:	84 2b       	or	r24, r20
    1aca:	8c 93       	st	X, r24
    1acc:	4f c0       	rjmp	.+158    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				else if (Cpy_enuPinValue == DIO_enuOutputLow)
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	a9 f4       	brne	.+42     	; 0x1afe <DIO_enuSetPinValue+0x1ac>
				{
					CLR_BIT(PORTC,Loc_u8PinNumber);
    1ad4:	a5 e3       	ldi	r26, 0x35	; 53
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e3       	ldi	r30, 0x35	; 53
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	48 2f       	mov	r20, r24
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 2e       	mov	r0, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_enuSetPinValue+0x1a0>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <DIO_enuSetPinValue+0x19c>
    1af6:	80 95       	com	r24
    1af8:	84 23       	and	r24, r20
    1afa:	8c 93       	st	X, r24
    1afc:	37 c0       	rjmp	.+110    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				else
				{
					Local_ErrorStatus = DIO_enuNOK;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	8b 83       	std	Y+3, r24	; 0x03
    1b02:	34 c0       	rjmp	.+104    	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				break;
			
			case DIO_enuPORTD:
				if (Cpy_enuPinValue == DIO_enuOutputHigh)
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	83 30       	cpi	r24, 0x03	; 3
    1b08:	a1 f4       	brne	.+40     	; 0x1b32 <DIO_enuSetPinValue+0x1e0>
				{
					SET_BIT(PORTD,Loc_u8PinNumber);
    1b0a:	a2 e3       	ldi	r26, 0x32	; 50
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e2 e3       	ldi	r30, 0x32	; 50
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	48 2f       	mov	r20, r24
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <DIO_enuSetPinValue+0x1d6>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <DIO_enuSetPinValue+0x1d2>
    1b2c:	84 2b       	or	r24, r20
    1b2e:	8c 93       	st	X, r24
    1b30:	1d c0       	rjmp	.+58     	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				else if (Cpy_enuPinValue == DIO_enuOutputLow)
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	a9 f4       	brne	.+42     	; 0x1b62 <DIO_enuSetPinValue+0x210>
				{
					CLR_BIT(PORTD,Loc_u8PinNumber);
    1b38:	a2 e3       	ldi	r26, 0x32	; 50
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e2 e3       	ldi	r30, 0x32	; 50
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 2e       	mov	r0, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <DIO_enuSetPinValue+0x204>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <DIO_enuSetPinValue+0x200>
    1b5a:	80 95       	com	r24
    1b5c:	84 23       	and	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				else
				{
					Local_ErrorStatus = DIO_enuNOK;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	8b 83       	std	Y+3, r24	; 0x03
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_enuSetPinValue+0x21a>
				}
				break;
				
			default:
				Local_ErrorStatus = DIO_enuInvalidPortNum;		
    1b68:	83 e0       	ldi	r24, 0x03	; 3
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	
	return Local_ErrorStatus;
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	27 96       	adiw	r28, 0x07	; 7
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <GIE_enuInit_EnableGIE>:
/*    GIE Init Function											*/
/*	  Input  : void												*/
/*	  Output : GIE_tenuErrorStatus to Report Errors				*/
/****************************************************************/
GIE_tenuErrorStatus GIE_enuInit_EnableGIE (void)
{	
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <GIE_enuInit_EnableGIE+0x6>
    1b86:	0f 92       	push	r0
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
	GIE_tenuErrorStatus LocalErrorStatus = GIE_enuOK;
    1b8c:	1a 82       	std	Y+2, r1	; 0x02
	
	u8 Check_Status = GET_BIT(SREG,SREG_GIE_Pin);
    1b8e:	af e5       	ldi	r26, 0x5F	; 95
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ef e5       	ldi	r30, 0x5F	; 95
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	80 78       	andi	r24, 0x80	; 128
    1b9a:	8c 93       	st	X, r24
    1b9c:	8c 91       	ld	r24, X
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	
	if (Check_Status != 1)
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	51 f0       	breq	.+20     	; 0x1bba <GIE_enuInit_EnableGIE+0x3a>
		// Setting the GIE at Bit #7 [GIE = 1]
		SET_BIT(SREG,SREG_GIE_Pin);
    1ba6:	af e5       	ldi	r26, 0x5F	; 95
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	ef e5       	ldi	r30, 0x5F	; 95
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	80 68       	ori	r24, 0x80	; 128
    1bb2:	8c 93       	st	X, r24
	
	else 
		return GIE_enuNOK;
		
	return LocalErrorStatus;
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <GIE_enuInit_EnableGIE+0x3e>
	if (Check_Status != 1)
		// Setting the GIE at Bit #7 [GIE = 1]
		SET_BIT(SREG,SREG_GIE_Pin);
	
	else 
		return GIE_enuNOK;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	8b 83       	std	Y+3, r24	; 0x03
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
		
	return LocalErrorStatus;
}
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <GIE_enuInit_DisbaleGIE>:
/*      GIE Disable Function									*/
/*		Input  : Void											*/
/*		Output : GIE_tenuErrorStatus to Report Errors		   	*/
/****************************************************************/
GIE_tenuErrorStatus GIE_enuInit_DisbaleGIE (void)
{	
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <GIE_enuInit_DisbaleGIE+0x6>
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
	GIE_tenuErrorStatus LocalErrorStatus = GIE_enuOK;
    1bd8:	1a 82       	std	Y+2, r1	; 0x02
	
	u8 Check_Status = GET_BIT(SREG,SREG_GIE_Pin);
    1bda:	af e5       	ldi	r26, 0x5F	; 95
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	ef e5       	ldi	r30, 0x5F	; 95
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	80 78       	andi	r24, 0x80	; 128
    1be6:	8c 93       	st	X, r24
    1be8:	8c 91       	ld	r24, X
    1bea:	89 83       	std	Y+1, r24	; 0x01
	
	if (Check_Status != 0)
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	88 23       	and	r24, r24
    1bf0:	51 f0       	breq	.+20     	; 0x1c06 <GIE_enuInit_DisbaleGIE+0x3a>
		// Clearing the GIE at Bit #7 [GIE = 0]
		CLR_BIT(SREG,SREG_GIE_Pin);
    1bf2:	af e5       	ldi	r26, 0x5F	; 95
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	ef e5       	ldi	r30, 0x5F	; 95
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	8f 77       	andi	r24, 0x7F	; 127
    1bfe:	8c 93       	st	X, r24
	
	else
		return GIE_enuNOK;
	
	return LocalErrorStatus;	
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	8b 83       	std	Y+3, r24	; 0x03
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <GIE_enuInit_DisbaleGIE+0x3e>
	if (Check_Status != 0)
		// Clearing the GIE at Bit #7 [GIE = 0]
		CLR_BIT(SREG,SREG_GIE_Pin);
	
	else
		return GIE_enuNOK;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
	
	return LocalErrorStatus;	
}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <SPI_enuInit>:

static u8 Cpy_u8DataTransfer ;

/****************************************************************/
SPI_enuErrorStatus SPI_enuInit (void)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	0f 92       	push	r0
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
	SPI_enuErrorStatus LocalErrorStatus = SPI_enuOK;
    1c22:	19 82       	std	Y+1, r1	; 0x01

	/*********** SPI EN/DS ****************/
	if (SPI_STATE == SPI_EN)
	{
		SET_BIT(SPI_SPCR,SPI_enuSPE);
    1c24:	ad e2       	ldi	r26, 0x2D	; 45
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	ed e2       	ldi	r30, 0x2D	; 45
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 64       	ori	r24, 0x40	; 64
    1c30:	8c 93       	st	X, r24
		SET_BIT(SPI_SPCR,SPI_enuSPIE);
		SET_BIT(SPI_SPSR,SPI_enuSPIF);
	}
	else if (SPI_INTERRUPT_STATE == SPI_INTERRUPT_DS)
	{
		GIE_enuInit_DisbaleGIE();
    1c32:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GIE_enuInit_DisbaleGIE>

		CLR_BIT(SPI_SPCR,SPI_enuSPIE);
    1c36:	ad e2       	ldi	r26, 0x2D	; 45
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	ed e2       	ldi	r30, 0x2D	; 45
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8f 77       	andi	r24, 0x7F	; 127
    1c42:	8c 93       	st	X, r24
		CLR_BIT(SPI_SPSR,SPI_enuSPIF);
    1c44:	ae e2       	ldi	r26, 0x2E	; 46
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	ee e2       	ldi	r30, 0x2E	; 46
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8f 77       	andi	r24, 0x7F	; 127
    1c50:	8c 93       	st	X, r24
	}

	/******* Data Order Configuration *************/
	if (SPI_DATA_ORDER_CONFIG == SPI_DATA_ORDER_LSB)
	{
		SET_BIT(SPI_SPCR,SPI_enuDORD);
    1c52:	ad e2       	ldi	r26, 0x2D	; 45
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	ed e2       	ldi	r30, 0x2D	; 45
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	80 62       	ori	r24, 0x20	; 32
    1c5e:	8c 93       	st	X, r24
	{
		CLR_BIT(SPI_SPCR,SPI_enuMSTR);
	}
	else if (SPI_MCU_MASTER_SLAVE_SELECT == SPI_MCU_MASTER)
	{
		SET_BIT(SPI_SPCR,SPI_enuMSTR);
    1c60:	ad e2       	ldi	r26, 0x2D	; 45
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	ed e2       	ldi	r30, 0x2D	; 45
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	80 61       	ori	r24, 0x10	; 16
    1c6c:	8c 93       	st	X, r24
	}

	/*********** SPI Clock Polarity *********************/
	if (SPI_POLARITY_SELECTION == SPI_POLARITY_LOW)
	{
		CLR_BIT(SPI_SPCR,SPI_enuCPOL);
    1c6e:	ad e2       	ldi	r26, 0x2D	; 45
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	ed e2       	ldi	r30, 0x2D	; 45
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	87 7f       	andi	r24, 0xF7	; 247
    1c7a:	8c 93       	st	X, r24
	}

	/********* SPI Clock Phase ******************/
	if (SPI_CLOCK_PHASE == SPI_DATA_SAMPLED_FIRST)
	{
		CLR_BIT(SPI_SPCR,SPI_enuCPHA);
    1c7c:	ad e2       	ldi	r26, 0x2D	; 45
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	ed e2       	ldi	r30, 0x2D	; 45
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	8b 7f       	andi	r24, 0xFB	; 251
    1c88:	8c 93       	st	X, r24
		CLR_BIT(SPI_SPCR,SPI_enuSPR0);
		CLR_BIT(SPI_SPCR,SPI_enuSPR1);
		SET_BIT(SPI_SPSR,SPI_enuSPI2X);
		break;
	case SPI_enuPrescaler_8:
		SET_BIT(SPI_SPCR,SPI_enuSPR0);
    1c8a:	ad e2       	ldi	r26, 0x2D	; 45
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	ed e2       	ldi	r30, 0x2D	; 45
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	81 60       	ori	r24, 0x01	; 1
    1c96:	8c 93       	st	X, r24
		CLR_BIT(SPI_SPCR,SPI_enuSPR1);
    1c98:	ad e2       	ldi	r26, 0x2D	; 45
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	ed e2       	ldi	r30, 0x2D	; 45
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8d 7f       	andi	r24, 0xFD	; 253
    1ca4:	8c 93       	st	X, r24
		SET_BIT(SPI_SPSR,SPI_enuSPI2X);
    1ca6:	ae e2       	ldi	r26, 0x2E	; 46
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	ee e2       	ldi	r30, 0x2E	; 46
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	81 60       	ori	r24, 0x01	; 1
    1cb2:	8c 93       	st	X, r24
		SET_BIT(SPI_SPCR,SPI_enuSPR1);
		SET_BIT(SPI_SPSR,SPI_enuSPI2X);
		break;
	}

	return LocalErrorStatus;
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <SPI_enuMasterInit>:
/****************************************************************/
SPI_enuErrorStatus SPI_enuMasterInit (void)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	0f 92       	push	r0
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
	SPI_enuErrorStatus LocalErrorStatus = SPI_enuOK;
    1cc8:	19 82       	std	Y+1, r1	; 0x01

	/* Data Order is left as default */

	/* NO Interrupt */
	GIE_enuInit_DisbaleGIE();
    1cca:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GIE_enuInit_DisbaleGIE>

	CLR_BIT(SPI_SPCR,SPI_enuSPIE);
    1cce:	ad e2       	ldi	r26, 0x2D	; 45
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ed e2       	ldi	r30, 0x2D	; 45
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8f 77       	andi	r24, 0x7F	; 127
    1cda:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPSR,SPI_enuSPIF);
    1cdc:	ae e2       	ldi	r26, 0x2E	; 46
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	ee e2       	ldi	r30, 0x2E	; 46
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8f 77       	andi	r24, 0x7F	; 127
    1ce8:	8c 93       	st	X, r24

	/********** Master Select **************/
	SET_BIT(SPI_SPCR,SPI_enuMSTR);
    1cea:	ad e2       	ldi	r26, 0x2D	; 45
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	ed e2       	ldi	r30, 0x2D	; 45
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	80 61       	ori	r24, 0x10	; 16
    1cf6:	8c 93       	st	X, r24

	/* Leaving Both Clk polarity & Phase as defaults */

	/* Prescaler : Clk is Generated by the MASTER  : 16 */
	SET_BIT(SPI_SPCR,SPI_enuSPR0);
    1cf8:	ad e2       	ldi	r26, 0x2D	; 45
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	ed e2       	ldi	r30, 0x2D	; 45
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	81 60       	ori	r24, 0x01	; 1
    1d04:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPCR,SPI_enuSPR1);
    1d06:	ad e2       	ldi	r26, 0x2D	; 45
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	ed e2       	ldi	r30, 0x2D	; 45
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8d 7f       	andi	r24, 0xFD	; 253
    1d12:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPSR,SPI_enuSPI2X);
    1d14:	ae e2       	ldi	r26, 0x2E	; 46
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	ee e2       	ldi	r30, 0x2E	; 46
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8e 7f       	andi	r24, 0xFE	; 254
    1d20:	8c 93       	st	X, r24

	/* Enable SPI */
	SET_BIT(SPI_SPCR,SPI_enuSPE);
    1d22:	ad e2       	ldi	r26, 0x2D	; 45
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	ed e2       	ldi	r30, 0x2D	; 45
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	80 64       	ori	r24, 0x40	; 64
    1d2e:	8c 93       	st	X, r24

	return LocalErrorStatus;
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <SPI_enuSlaveInit>:
/****************************************************************/
SPI_enuErrorStatus SPI_enuSlaveInit  (void)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	0f 92       	push	r0
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
	SPI_enuErrorStatus LocalErrorStatus = SPI_enuOK;
    1d44:	19 82       	std	Y+1, r1	; 0x01

	/* Data Order is left as default */

	/* NO Interrupt */
	GIE_enuInit_DisbaleGIE();
    1d46:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <GIE_enuInit_DisbaleGIE>

	CLR_BIT(SPI_SPCR,SPI_enuSPIE);
    1d4a:	ad e2       	ldi	r26, 0x2D	; 45
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	ed e2       	ldi	r30, 0x2D	; 45
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	8f 77       	andi	r24, 0x7F	; 127
    1d56:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPSR,SPI_enuSPIF);
    1d58:	ae e2       	ldi	r26, 0x2E	; 46
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	ee e2       	ldi	r30, 0x2E	; 46
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 77       	andi	r24, 0x7F	; 127
    1d64:	8c 93       	st	X, r24

	/********** Slave Select **************/
	CLR_BIT(SPI_SPCR,SPI_enuMSTR);
    1d66:	ad e2       	ldi	r26, 0x2D	; 45
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	ed e2       	ldi	r30, 0x2D	; 45
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 7e       	andi	r24, 0xEF	; 239
    1d72:	8c 93       	st	X, r24

	/* Leaving Both Clk polarity & Phase as defaults */

	/* Enable SPI */
	SET_BIT(SPI_SPCR,SPI_enuSPE);
    1d74:	ad e2       	ldi	r26, 0x2D	; 45
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	ed e2       	ldi	r30, 0x2D	; 45
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	80 64       	ori	r24, 0x40	; 64
    1d80:	8c 93       	st	X, r24

	return LocalErrorStatus;
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <SPI_u8Transcieve>:
/****************************************************************/
u8 SPI_u8Transcieve (u8 Cpy_u8Data)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <SPI_u8Transcieve+0x6>
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <SPI_u8Transcieve+0x8>
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <SPI_u8Transcieve+0xa>
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	8e 83       	std	Y+6, r24	; 0x06
	SPI_enuErrorStatus LocalErrorStatus = SPI_enuOK;
    1d9c:	1d 82       	std	Y+5, r1	; 0x05

	u8 LocalCounter=0;
    1d9e:	1c 82       	std	Y+4, r1	; 0x04
	u8 TIMEOUT = 255;
    1da0:	8f ef       	ldi	r24, 0xFF	; 255
    1da2:	8b 83       	std	Y+3, r24	; 0x03

	u8 LocalInterruptFlag = GET_BIT(SPI_SPSR,SPI_enuSPIF);
    1da4:	ae e2       	ldi	r26, 0x2E	; 46
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	ee e2       	ldi	r30, 0x2E	; 46
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	80 78       	andi	r24, 0x80	; 128
    1db0:	8c 93       	st	X, r24
    1db2:	8c 91       	ld	r24, X
    1db4:	8a 83       	std	Y+2, r24	; 0x02
	u8 LocalWriteCollisionFlag = GET_BIT(SPI_SPSR,SPI_enuWCOL);
    1db6:	ae e2       	ldi	r26, 0x2E	; 46
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	ee e2       	ldi	r30, 0x2E	; 46
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 74       	andi	r24, 0x40	; 64
    1dc2:	8c 93       	st	X, r24
    1dc4:	8c 91       	ld	r24, X
    1dc6:	89 83       	std	Y+1, r24	; 0x01

	/********* Sending **********/
	SPI_SPDR = Cpy_u8Data;
    1dc8:	ef e2       	ldi	r30, 0x2F	; 47
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dce:	80 83       	st	Z, r24
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <SPI_u8Transcieve+0x4c>

	/* Waiting for transfer to complete */
	while ((LocalInterruptFlag != 1) && (LocalWriteCollisionFlag == 0) && (TIMEOUT > LocalCounter))
	{
		TIMEOUT --;
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	81 50       	subi	r24, 0x01	; 1
    1dd6:	8b 83       	std	Y+3, r24	; 0x03

	/********* Sending **********/
	SPI_SPDR = Cpy_u8Data;

	/* Waiting for transfer to complete */
	while ((LocalInterruptFlag != 1) && (LocalWriteCollisionFlag == 0) && (TIMEOUT > LocalCounter))
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	39 f0       	breq	.+14     	; 0x1dec <SPI_u8Transcieve+0x60>
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	88 23       	and	r24, r24
    1de2:	21 f4       	brne	.+8      	; 0x1dec <SPI_u8Transcieve+0x60>
    1de4:	9b 81       	ldd	r25, Y+3	; 0x03
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	89 17       	cp	r24, r25
    1dea:	98 f3       	brcs	.-26     	; 0x1dd2 <SPI_u8Transcieve+0x46>
	{
		TIMEOUT --;
	}
	if (LocalWriteCollisionFlag == 1)
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <SPI_u8Transcieve+0x6a>
	{
		LocalErrorStatus = SPI_enuDataCollision;
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	8d 83       	std	Y+5, r24	; 0x05
	}

	/******** Receiving **********/
	/* Return the updated value in the register */
	return SPI_SPDR;
    1df6:	ef e2       	ldi	r30, 0x2F	; 47
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z

}
    1dfc:	26 96       	adiw	r28, 0x06	; 6
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <__vector_SPI_INTERRUPT>:
//	return LocalErrorStatus;
//
//}
/****************************************************************/
SPI_ISR(SPI_INTERRUPT)
{
    1e0e:	1f 92       	push	r1
    1e10:	0f 92       	push	r0
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	0f 92       	push	r0
    1e16:	11 24       	eor	r1, r1
    1e18:	8f 93       	push	r24
    1e1a:	ef 93       	push	r30
    1e1c:	ff 93       	push	r31
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
	SPI_SPDR = Cpy_u8DataTransfer;
    1e26:	ef e2       	ldi	r30, 0x2F	; 47
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 91 a8 01 	lds	r24, 0x01A8
    1e2e:	80 83       	st	Z, r24
}
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	8f 91       	pop	r24
    1e3a:	0f 90       	pop	r0
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	0f 90       	pop	r0
    1e40:	1f 90       	pop	r1
    1e42:	18 95       	reti

00001e44 <TMR0_enuInitPreCompile>:
static void (*Timer0_CallBack_CTC)(void) =		NULL;


/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuInitPreCompile(void)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	0f 92       	push	r0
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    1e4e:	19 82       	std	Y+1, r1	; 0x01

	/***************** Mode [WaveGeneration] ********************/
#if (TIMER0_Wave == TIMER_0_enuNormal_Mode)
	{
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM00);
    1e50:	a3 e5       	ldi	r26, 0x53	; 83
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e3 e5       	ldi	r30, 0x53	; 83
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	8f 7b       	andi	r24, 0xBF	; 191
    1e5c:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM01);
    1e5e:	a3 e5       	ldi	r26, 0x53	; 83
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e3 e5       	ldi	r30, 0x53	; 83
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	87 7f       	andi	r24, 0xF7	; 247
    1e6a:	8c 93       	st	X, r24
#if (TIMER0_Mode == TIMER0_TimerMode)
		{
			/* Prescaler options */
#if (TIMER0_ClockSrc == TIMER_0_enuPrescaler_8)
			{
				CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    1e6c:	a3 e5       	ldi	r26, 0x53	; 83
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e3 e5       	ldi	r30, 0x53	; 83
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	8e 7f       	andi	r24, 0xFE	; 254
    1e78:	8c 93       	st	X, r24
				SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    1e7a:	a3 e5       	ldi	r26, 0x53	; 83
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e3 e5       	ldi	r30, 0x53	; 83
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	82 60       	ori	r24, 0x02	; 2
    1e86:	8c 93       	st	X, r24
				CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    1e88:	a3 e5       	ldi	r26, 0x53	; 83
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e3 e5       	ldi	r30, 0x53	; 83
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	8b 7f       	andi	r24, 0xFB	; 251
    1e94:	8c 93       	st	X, r24
		{LocalErrorStatus = TIMER0_enuInvalidCounterMode;}
#endif
	}

#else
	LocalErrorStatus = Timer0_enuOFF;
    1e96:	88 e0       	ldi	r24, 0x08	; 8
    1e98:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
	}
#else
	LocalErrorStatus = Timer0_enuNOK;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	89 83       	std	Y+1, r24	; 0x01
#else
#endif
	}
#elif (TIMER0_SysInterrupt == TIMER0_InterruptOFF)
	{
		CLR_BIT(TIMER0_TIMSK,TIMER0_enuTIMSK_TOIE0);
    1e9e:	a9 e5       	ldi	r26, 0x59	; 89
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e9 e5       	ldi	r30, 0x59	; 89
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8e 7f       	andi	r24, 0xFE	; 254
    1eaa:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_TIMSK,TIMER0_enuTIMSK_OCIE0);
    1eac:	a9 e5       	ldi	r26, 0x59	; 89
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e9 e5       	ldi	r30, 0x59	; 89
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8d 7f       	andi	r24, 0xFD	; 253
    1eb8:	8c 93       	st	X, r24
		{
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
		}
#else
		LocalErrorStatus = TIMER0_enuInvalidNonPWM_Mode;
    1eba:	8a e0       	ldi	r24, 0x0A	; 10
    1ebc:	89 83       	std	Y+1, r24	; 0x01
#endif

		// 2- Fast PWM
#if (TIMER0_CompareMatch_FastPWM_Mode == TIMER_0_enuCompareMatch_FastNormal)
		{
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    1ebe:	a3 e5       	ldi	r26, 0x53	; 83
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e3 e5       	ldi	r30, 0x53	; 83
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8e 7f       	andi	r24, 0xFE	; 254
    1eca:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    1ecc:	a3 e5       	ldi	r26, 0x53	; 83
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e3 e5       	ldi	r30, 0x53	; 83
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8d 7f       	andi	r24, 0xFD	; 253
    1ed8:	8c 93       	st	X, r24
		{
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
		}
#else
		LocalErrorStatus = TIMER0_enuInvalidPhaseCorrect_Mode;
    1eda:	8c e0       	ldi	r24, 0x0C	; 12
    1edc:	89 83       	std	Y+1, r24	; 0x01
	}
#else
	LocalErrorStatus = TIMER0_enuCompareMatchOFF;
#endif

	return LocalErrorStatus;
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <TMR0_enuInitPostCompile>:
/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuInitPostCompile(TMR0Config_t *TMR0Config)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	2d 97       	sbiw	r28, 0x0d	; 13
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	9b 83       	std	Y+3, r25	; 0x03
    1efe:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    1f00:	19 82       	std	Y+1, r1	; 0x01

	if (TMR0Config->Timer0_Mode < TIMER_0_enuNumberOfWaveformModes)
    1f02:	ea 81       	ldd	r30, Y+2	; 0x02
    1f04:	fb 81       	ldd	r31, Y+3	; 0x03
    1f06:	80 81       	ld	r24, Z
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <TMR0_enuInitPostCompile+0x26>
    1f0c:	60 c0       	rjmp	.+192    	; 0x1fce <TMR0_enuInitPostCompile+0xe6>
	{
		switch(TMR0Config->Timer0_Mode)
    1f0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f10:	fb 81       	ldd	r31, Y+3	; 0x03
    1f12:	80 81       	ld	r24, Z
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	3d 87       	std	Y+13, r19	; 0x0d
    1f1a:	2c 87       	std	Y+12, r18	; 0x0c
    1f1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	91 05       	cpc	r25, r1
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <TMR0_enuInitPostCompile+0x40>
    1f26:	42 c0       	rjmp	.+132    	; 0x1fac <TMR0_enuInitPostCompile+0xc4>
    1f28:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f2a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	31 05       	cpc	r19, r1
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <TMR0_enuInitPostCompile+0x54>
    1f32:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f34:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	61 f0       	breq	.+24     	; 0x1f52 <TMR0_enuInitPostCompile+0x6a>
    1f3a:	47 c0       	rjmp	.+142    	; 0x1fca <TMR0_enuInitPostCompile+0xe2>
    1f3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f3e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	a9 f0       	breq	.+42     	; 0x1f70 <TMR0_enuInitPostCompile+0x88>
    1f46:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f48:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f4a:	83 30       	cpi	r24, 0x03	; 3
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	f9 f0       	breq	.+62     	; 0x1f8e <TMR0_enuInitPostCompile+0xa6>
    1f50:	3c c0       	rjmp	.+120    	; 0x1fca <TMR0_enuInitPostCompile+0xe2>
		{
		case TIMER_0_enuNormal_Mode:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM00);
    1f52:	a3 e5       	ldi	r26, 0x53	; 83
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e3 e5       	ldi	r30, 0x53	; 83
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8f 7b       	andi	r24, 0xBF	; 191
    1f5e:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM01);
    1f60:	a3 e5       	ldi	r26, 0x53	; 83
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e3 e5       	ldi	r30, 0x53	; 83
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	87 7f       	andi	r24, 0xF7	; 247
    1f6c:	8c 93       	st	X, r24
    1f6e:	2f c0       	rjmp	.+94     	; 0x1fce <TMR0_enuInitPostCompile+0xe6>

			// 			TIMER0_TCCR0 = TMR0Config->Timer0_PreloadValue;
			break;

		case TIMER_0_enuCTC_Mode:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM00);
    1f70:	a3 e5       	ldi	r26, 0x53	; 83
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e3 e5       	ldi	r30, 0x53	; 83
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	8f 7b       	andi	r24, 0xBF	; 191
    1f7c:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM01);
    1f7e:	a3 e5       	ldi	r26, 0x53	; 83
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e3 e5       	ldi	r30, 0x53	; 83
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	88 60       	ori	r24, 0x08	; 8
    1f8a:	8c 93       	st	X, r24
    1f8c:	20 c0       	rjmp	.+64     	; 0x1fce <TMR0_enuInitPostCompile+0xe6>

			// 			TIMER0_OCR0 = TMR0Config->Timer0_PreloadValue;
			break;

		case TIMER_0_enuPWM_Fast_Mode:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM00);
    1f8e:	a3 e5       	ldi	r26, 0x53	; 83
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e3 e5       	ldi	r30, 0x53	; 83
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	80 64       	ori	r24, 0x40	; 64
    1f9a:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM01);
    1f9c:	a3 e5       	ldi	r26, 0x53	; 83
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e3 e5       	ldi	r30, 0x53	; 83
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 60       	ori	r24, 0x08	; 8
    1fa8:	8c 93       	st	X, r24
    1faa:	11 c0       	rjmp	.+34     	; 0x1fce <TMR0_enuInitPostCompile+0xe6>

			// 			TIMER0_OCR0 = TMR0Config->Timer0_PreloadValue;
			break;

		case TIMER_0_enuPWM_PhaseCorrect_Mode:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM00);
    1fac:	a3 e5       	ldi	r26, 0x53	; 83
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e3 e5       	ldi	r30, 0x53	; 83
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 64       	ori	r24, 0x40	; 64
    1fb8:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM01);
    1fba:	a3 e5       	ldi	r26, 0x53	; 83
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e3 e5       	ldi	r30, 0x53	; 83
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	87 7f       	andi	r24, 0xF7	; 247
    1fc6:	8c 93       	st	X, r24
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <TMR0_enuInitPostCompile+0xe6>

			// 			TIMER0_OCR0 = TMR0Config->Timer0_PreloadValue;
			break;

		default:
			LocalErrorStatus = Timer0_enuInvalidMode;
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	if (TMR0Config->Timer0_Clk < TIMER_0_enuNumberOfClockSelectionSources)
    1fce:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd2:	81 81       	ldd	r24, Z+1	; 0x01
    1fd4:	88 30       	cpi	r24, 0x08	; 8
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <TMR0_enuInitPostCompile+0xf2>
    1fd8:	ed c0       	rjmp	.+474    	; 0x21b4 <TMR0_enuInitPostCompile+0x2cc>
	{
		switch(TMR0Config->Timer0_Clk)
    1fda:	ea 81       	ldd	r30, Y+2	; 0x02
    1fdc:	fb 81       	ldd	r31, Y+3	; 0x03
    1fde:	81 81       	ldd	r24, Z+1	; 0x01
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	3b 87       	std	Y+11, r19	; 0x0b
    1fe6:	2a 87       	std	Y+10, r18	; 0x0a
    1fe8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fec:	83 30       	cpi	r24, 0x03	; 3
    1fee:	91 05       	cpc	r25, r1
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <TMR0_enuInitPostCompile+0x10c>
    1ff2:	70 c0       	rjmp	.+224    	; 0x20d4 <TMR0_enuInitPostCompile+0x1ec>
    1ff4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ff6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ff8:	24 30       	cpi	r18, 0x04	; 4
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	84 f4       	brge	.+32     	; 0x201e <TMR0_enuInitPostCompile+0x136>
    1ffe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2000:	9b 85       	ldd	r25, Y+11	; 0x0b
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	91 05       	cpc	r25, r1
    2006:	d1 f1       	breq	.+116    	; 0x207c <TMR0_enuInitPostCompile+0x194>
    2008:	2a 85       	ldd	r18, Y+10	; 0x0a
    200a:	3b 85       	ldd	r19, Y+11	; 0x0b
    200c:	22 30       	cpi	r18, 0x02	; 2
    200e:	31 05       	cpc	r19, r1
    2010:	0c f0       	brlt	.+2      	; 0x2014 <TMR0_enuInitPostCompile+0x12c>
    2012:	4a c0       	rjmp	.+148    	; 0x20a8 <TMR0_enuInitPostCompile+0x1c0>
    2014:	8a 85       	ldd	r24, Y+10	; 0x0a
    2016:	9b 85       	ldd	r25, Y+11	; 0x0b
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	d1 f0       	breq	.+52     	; 0x2050 <TMR0_enuInitPostCompile+0x168>
    201c:	c9 c0       	rjmp	.+402    	; 0x21b0 <TMR0_enuInitPostCompile+0x2c8>
    201e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2020:	3b 85       	ldd	r19, Y+11	; 0x0b
    2022:	25 30       	cpi	r18, 0x05	; 5
    2024:	31 05       	cpc	r19, r1
    2026:	09 f4       	brne	.+2      	; 0x202a <TMR0_enuInitPostCompile+0x142>
    2028:	81 c0       	rjmp	.+258    	; 0x212c <TMR0_enuInitPostCompile+0x244>
    202a:	8a 85       	ldd	r24, Y+10	; 0x0a
    202c:	9b 85       	ldd	r25, Y+11	; 0x0b
    202e:	85 30       	cpi	r24, 0x05	; 5
    2030:	91 05       	cpc	r25, r1
    2032:	0c f4       	brge	.+2      	; 0x2036 <TMR0_enuInitPostCompile+0x14e>
    2034:	65 c0       	rjmp	.+202    	; 0x2100 <TMR0_enuInitPostCompile+0x218>
    2036:	2a 85       	ldd	r18, Y+10	; 0x0a
    2038:	3b 85       	ldd	r19, Y+11	; 0x0b
    203a:	26 30       	cpi	r18, 0x06	; 6
    203c:	31 05       	cpc	r19, r1
    203e:	09 f4       	brne	.+2      	; 0x2042 <TMR0_enuInitPostCompile+0x15a>
    2040:	8b c0       	rjmp	.+278    	; 0x2158 <TMR0_enuInitPostCompile+0x270>
    2042:	8a 85       	ldd	r24, Y+10	; 0x0a
    2044:	9b 85       	ldd	r25, Y+11	; 0x0b
    2046:	87 30       	cpi	r24, 0x07	; 7
    2048:	91 05       	cpc	r25, r1
    204a:	09 f4       	brne	.+2      	; 0x204e <TMR0_enuInitPostCompile+0x166>
    204c:	9b c0       	rjmp	.+310    	; 0x2184 <TMR0_enuInitPostCompile+0x29c>
    204e:	b0 c0       	rjmp	.+352    	; 0x21b0 <TMR0_enuInitPostCompile+0x2c8>
		{
		case TIMER_0_enuDisabled:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2050:	a3 e5       	ldi	r26, 0x53	; 83
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e3 e5       	ldi	r30, 0x53	; 83
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8e 7f       	andi	r24, 0xFE	; 254
    205c:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    205e:	a3 e5       	ldi	r26, 0x53	; 83
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e3 e5       	ldi	r30, 0x53	; 83
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	8d 7f       	andi	r24, 0xFD	; 253
    206a:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    206c:	a3 e5       	ldi	r26, 0x53	; 83
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e3 e5       	ldi	r30, 0x53	; 83
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	8b 7f       	andi	r24, 0xFB	; 251
    2078:	8c 93       	st	X, r24
    207a:	9c c0       	rjmp	.+312    	; 0x21b4 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuSystemClock:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    207c:	a3 e5       	ldi	r26, 0x53	; 83
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e3 e5       	ldi	r30, 0x53	; 83
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	81 60       	ori	r24, 0x01	; 1
    2088:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    208a:	a3 e5       	ldi	r26, 0x53	; 83
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e3 e5       	ldi	r30, 0x53	; 83
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	8d 7f       	andi	r24, 0xFD	; 253
    2096:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    2098:	a3 e5       	ldi	r26, 0x53	; 83
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e3 e5       	ldi	r30, 0x53	; 83
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	8b 7f       	andi	r24, 0xFB	; 251
    20a4:	8c 93       	st	X, r24
    20a6:	86 c0       	rjmp	.+268    	; 0x21b4 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuPrescaler_8:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    20a8:	a3 e5       	ldi	r26, 0x53	; 83
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e3 e5       	ldi	r30, 0x53	; 83
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	8e 7f       	andi	r24, 0xFE	; 254
    20b4:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    20b6:	a3 e5       	ldi	r26, 0x53	; 83
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e3 e5       	ldi	r30, 0x53	; 83
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	82 60       	ori	r24, 0x02	; 2
    20c2:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    20c4:	a3 e5       	ldi	r26, 0x53	; 83
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e3 e5       	ldi	r30, 0x53	; 83
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	8b 7f       	andi	r24, 0xFB	; 251
    20d0:	8c 93       	st	X, r24
    20d2:	70 c0       	rjmp	.+224    	; 0x21b4 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuPrescaler_64:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    20d4:	a3 e5       	ldi	r26, 0x53	; 83
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e3 e5       	ldi	r30, 0x53	; 83
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	81 60       	ori	r24, 0x01	; 1
    20e0:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    20e2:	a3 e5       	ldi	r26, 0x53	; 83
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e3 e5       	ldi	r30, 0x53	; 83
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	82 60       	ori	r24, 0x02	; 2
    20ee:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    20f0:	a3 e5       	ldi	r26, 0x53	; 83
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e3 e5       	ldi	r30, 0x53	; 83
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	8b 7f       	andi	r24, 0xFB	; 251
    20fc:	8c 93       	st	X, r24
    20fe:	5a c0       	rjmp	.+180    	; 0x21b4 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuPrescaler_256:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2100:	a3 e5       	ldi	r26, 0x53	; 83
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e3 e5       	ldi	r30, 0x53	; 83
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	8e 7f       	andi	r24, 0xFE	; 254
    210c:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    210e:	a3 e5       	ldi	r26, 0x53	; 83
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e3 e5       	ldi	r30, 0x53	; 83
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	8d 7f       	andi	r24, 0xFD	; 253
    211a:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    211c:	a3 e5       	ldi	r26, 0x53	; 83
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e3 e5       	ldi	r30, 0x53	; 83
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	84 60       	ori	r24, 0x04	; 4
    2128:	8c 93       	st	X, r24
    212a:	44 c0       	rjmp	.+136    	; 0x21b4 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuPrescaler_1024:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    212c:	a3 e5       	ldi	r26, 0x53	; 83
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e3 e5       	ldi	r30, 0x53	; 83
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	81 60       	ori	r24, 0x01	; 1
    2138:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    213a:	a3 e5       	ldi	r26, 0x53	; 83
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e3 e5       	ldi	r30, 0x53	; 83
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	8d 7f       	andi	r24, 0xFD	; 253
    2146:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    2148:	a3 e5       	ldi	r26, 0x53	; 83
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e3 e5       	ldi	r30, 0x53	; 83
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	84 60       	ori	r24, 0x04	; 4
    2154:	8c 93       	st	X, r24
    2156:	2e c0       	rjmp	.+92     	; 0x21b4 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuCounterMode_FallingEdge:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2158:	a3 e5       	ldi	r26, 0x53	; 83
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e3 e5       	ldi	r30, 0x53	; 83
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	8e 7f       	andi	r24, 0xFE	; 254
    2164:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2166:	a3 e5       	ldi	r26, 0x53	; 83
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e3 e5       	ldi	r30, 0x53	; 83
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	82 60       	ori	r24, 0x02	; 2
    2172:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    2174:	a3 e5       	ldi	r26, 0x53	; 83
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e3 e5       	ldi	r30, 0x53	; 83
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	84 60       	ori	r24, 0x04	; 4
    2180:	8c 93       	st	X, r24
    2182:	18 c0       	rjmp	.+48     	; 0x21b4 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuCounterMode_RaisingEdge:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2184:	a3 e5       	ldi	r26, 0x53	; 83
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e3 e5       	ldi	r30, 0x53	; 83
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	81 60       	ori	r24, 0x01	; 1
    2190:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2192:	a3 e5       	ldi	r26, 0x53	; 83
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e3 e5       	ldi	r30, 0x53	; 83
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	82 60       	ori	r24, 0x02	; 2
    219e:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    21a0:	a3 e5       	ldi	r26, 0x53	; 83
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e3 e5       	ldi	r30, 0x53	; 83
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	84 60       	ori	r24, 0x04	; 4
    21ac:	8c 93       	st	X, r24
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <TMR0_enuInitPostCompile+0x2cc>
			break;

		default:
			LocalErrorStatus = Timer0_enuInvalidPrescaler;
    21b0:	84 e0       	ldi	r24, 0x04	; 4
    21b2:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	switch (TMR0Config->Timer0_CompareMatchOutput)
    21b4:	ea 81       	ldd	r30, Y+2	; 0x02
    21b6:	fb 81       	ldd	r31, Y+3	; 0x03
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	39 87       	std	Y+9, r19	; 0x09
    21c0:	28 87       	std	Y+8, r18	; 0x08
    21c2:	88 85       	ldd	r24, Y+8	; 0x08
    21c4:	99 85       	ldd	r25, Y+9	; 0x09
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	91 05       	cpc	r25, r1
    21ca:	21 f1       	breq	.+72     	; 0x2214 <TMR0_enuInitPostCompile+0x32c>
    21cc:	28 85       	ldd	r18, Y+8	; 0x08
    21ce:	39 85       	ldd	r19, Y+9	; 0x09
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	2c f4       	brge	.+10     	; 0x21e0 <TMR0_enuInitPostCompile+0x2f8>
    21d6:	88 85       	ldd	r24, Y+8	; 0x08
    21d8:	99 85       	ldd	r25, Y+9	; 0x09
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	61 f0       	breq	.+24     	; 0x21f6 <TMR0_enuInitPostCompile+0x30e>
    21de:	47 c0       	rjmp	.+142    	; 0x226e <TMR0_enuInitPostCompile+0x386>
    21e0:	28 85       	ldd	r18, Y+8	; 0x08
    21e2:	39 85       	ldd	r19, Y+9	; 0x09
    21e4:	22 30       	cpi	r18, 0x02	; 2
    21e6:	31 05       	cpc	r19, r1
    21e8:	21 f1       	breq	.+72     	; 0x2232 <TMR0_enuInitPostCompile+0x34a>
    21ea:	88 85       	ldd	r24, Y+8	; 0x08
    21ec:	99 85       	ldd	r25, Y+9	; 0x09
    21ee:	83 30       	cpi	r24, 0x03	; 3
    21f0:	91 05       	cpc	r25, r1
    21f2:	71 f1       	breq	.+92     	; 0x2250 <TMR0_enuInitPostCompile+0x368>
    21f4:	3c c0       	rjmp	.+120    	; 0x226e <TMR0_enuInitPostCompile+0x386>
	{
	case TIMER_0_enuCompareMatch_Normal:
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    21f6:	a3 e5       	ldi	r26, 0x53	; 83
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e3 e5       	ldi	r30, 0x53	; 83
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	8e 7f       	andi	r24, 0xFE	; 254
    2202:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2204:	a3 e5       	ldi	r26, 0x53	; 83
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e3 e5       	ldi	r30, 0x53	; 83
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	8d 7f       	andi	r24, 0xFD	; 253
    2210:	8c 93       	st	X, r24
    2212:	2f c0       	rjmp	.+94     	; 0x2272 <TMR0_enuInitPostCompile+0x38a>
		break;

	case TIMER_0_enuCompareMatch_Toggle:
		SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2214:	a3 e5       	ldi	r26, 0x53	; 83
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e3 e5       	ldi	r30, 0x53	; 83
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	81 60       	ori	r24, 0x01	; 1
    2220:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2222:	a3 e5       	ldi	r26, 0x53	; 83
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e3 e5       	ldi	r30, 0x53	; 83
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	8d 7f       	andi	r24, 0xFD	; 253
    222e:	8c 93       	st	X, r24
    2230:	20 c0       	rjmp	.+64     	; 0x2272 <TMR0_enuInitPostCompile+0x38a>
		break;

	case TIMER_0_enuCompareMatch_Clear:
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2232:	a3 e5       	ldi	r26, 0x53	; 83
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e3 e5       	ldi	r30, 0x53	; 83
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	8e 7f       	andi	r24, 0xFE	; 254
    223e:	8c 93       	st	X, r24
		SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2240:	a3 e5       	ldi	r26, 0x53	; 83
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e3 e5       	ldi	r30, 0x53	; 83
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	82 60       	ori	r24, 0x02	; 2
    224c:	8c 93       	st	X, r24
    224e:	11 c0       	rjmp	.+34     	; 0x2272 <TMR0_enuInitPostCompile+0x38a>
		break;

	case TIMER_0_enuCompareMatch_Set:
		SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2250:	a3 e5       	ldi	r26, 0x53	; 83
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e3 e5       	ldi	r30, 0x53	; 83
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	81 60       	ori	r24, 0x01	; 1
    225c:	8c 93       	st	X, r24
		SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    225e:	a3 e5       	ldi	r26, 0x53	; 83
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e3 e5       	ldi	r30, 0x53	; 83
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	82 60       	ori	r24, 0x02	; 2
    226a:	8c 93       	st	X, r24
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <TMR0_enuInitPostCompile+0x38a>
		break;

	default:
		LocalErrorStatus = TIMER0_enuInvalidNonPWM_Mode;
    226e:	8a e0       	ldi	r24, 0x0A	; 10
    2270:	89 83       	std	Y+1, r24	; 0x01
	}
	/*******************/
	if (TMR0Config->Timer0_FastPWMOutput < TIMER_0_enuFastNumberOfCompareMatchModes)
    2272:	ea 81       	ldd	r30, Y+2	; 0x02
    2274:	fb 81       	ldd	r31, Y+3	; 0x03
    2276:	83 81       	ldd	r24, Z+3	; 0x03
    2278:	84 30       	cpi	r24, 0x04	; 4
    227a:	08 f0       	brcs	.+2      	; 0x227e <TMR0_enuInitPostCompile+0x396>
    227c:	5f c0       	rjmp	.+190    	; 0x233c <TMR0_enuInitPostCompile+0x454>
	{
		switch (TMR0Config->Timer0_FastPWMOutput)
    227e:	ea 81       	ldd	r30, Y+2	; 0x02
    2280:	fb 81       	ldd	r31, Y+3	; 0x03
    2282:	83 81       	ldd	r24, Z+3	; 0x03
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	3f 83       	std	Y+7, r19	; 0x07
    228a:	2e 83       	std	Y+6, r18	; 0x06
    228c:	8e 81       	ldd	r24, Y+6	; 0x06
    228e:	9f 81       	ldd	r25, Y+7	; 0x07
    2290:	81 30       	cpi	r24, 0x01	; 1
    2292:	91 05       	cpc	r25, r1
    2294:	21 f1       	breq	.+72     	; 0x22de <TMR0_enuInitPostCompile+0x3f6>
    2296:	2e 81       	ldd	r18, Y+6	; 0x06
    2298:	3f 81       	ldd	r19, Y+7	; 0x07
    229a:	22 30       	cpi	r18, 0x02	; 2
    229c:	31 05       	cpc	r19, r1
    229e:	2c f4       	brge	.+10     	; 0x22aa <TMR0_enuInitPostCompile+0x3c2>
    22a0:	8e 81       	ldd	r24, Y+6	; 0x06
    22a2:	9f 81       	ldd	r25, Y+7	; 0x07
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	61 f0       	breq	.+24     	; 0x22c0 <TMR0_enuInitPostCompile+0x3d8>
    22a8:	47 c0       	rjmp	.+142    	; 0x2338 <TMR0_enuInitPostCompile+0x450>
    22aa:	2e 81       	ldd	r18, Y+6	; 0x06
    22ac:	3f 81       	ldd	r19, Y+7	; 0x07
    22ae:	22 30       	cpi	r18, 0x02	; 2
    22b0:	31 05       	cpc	r19, r1
    22b2:	21 f1       	breq	.+72     	; 0x22fc <TMR0_enuInitPostCompile+0x414>
    22b4:	8e 81       	ldd	r24, Y+6	; 0x06
    22b6:	9f 81       	ldd	r25, Y+7	; 0x07
    22b8:	83 30       	cpi	r24, 0x03	; 3
    22ba:	91 05       	cpc	r25, r1
    22bc:	71 f1       	breq	.+92     	; 0x231a <TMR0_enuInitPostCompile+0x432>
    22be:	3c c0       	rjmp	.+120    	; 0x2338 <TMR0_enuInitPostCompile+0x450>
		{
		case TIMER_0_enuCompareMatch_FastNormal:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    22c0:	a3 e5       	ldi	r26, 0x53	; 83
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e3 e5       	ldi	r30, 0x53	; 83
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8e 7f       	andi	r24, 0xFE	; 254
    22cc:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    22ce:	a3 e5       	ldi	r26, 0x53	; 83
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e3 e5       	ldi	r30, 0x53	; 83
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	8d 7f       	andi	r24, 0xFD	; 253
    22da:	8c 93       	st	X, r24
    22dc:	2f c0       	rjmp	.+94     	; 0x233c <TMR0_enuInitPostCompile+0x454>
			break;

		case TIMER_0_enuCompareMatch_FastReserved:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    22de:	a3 e5       	ldi	r26, 0x53	; 83
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e3 e5       	ldi	r30, 0x53	; 83
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	81 60       	ori	r24, 0x01	; 1
    22ea:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    22ec:	a3 e5       	ldi	r26, 0x53	; 83
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e3 e5       	ldi	r30, 0x53	; 83
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	8d 7f       	andi	r24, 0xFD	; 253
    22f8:	8c 93       	st	X, r24
    22fa:	20 c0       	rjmp	.+64     	; 0x233c <TMR0_enuInitPostCompile+0x454>
			break;

		case TIMER_0_enuCompareMatch_FastClearCM_SetTop:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    22fc:	a3 e5       	ldi	r26, 0x53	; 83
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e3 e5       	ldi	r30, 0x53	; 83
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	8e 7f       	andi	r24, 0xFE	; 254
    2308:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    230a:	a3 e5       	ldi	r26, 0x53	; 83
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e3 e5       	ldi	r30, 0x53	; 83
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	82 60       	ori	r24, 0x02	; 2
    2316:	8c 93       	st	X, r24
    2318:	11 c0       	rjmp	.+34     	; 0x233c <TMR0_enuInitPostCompile+0x454>
			break;

		case TIMER_0_enuCompareMatch_FastSetCM_ClrTop:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    231a:	a3 e5       	ldi	r26, 0x53	; 83
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e3 e5       	ldi	r30, 0x53	; 83
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	81 60       	ori	r24, 0x01	; 1
    2326:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2328:	a3 e5       	ldi	r26, 0x53	; 83
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e3 e5       	ldi	r30, 0x53	; 83
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	82 60       	ori	r24, 0x02	; 2
    2334:	8c 93       	st	X, r24
    2336:	02 c0       	rjmp	.+4      	; 0x233c <TMR0_enuInitPostCompile+0x454>
			break;

		default:
			LocalErrorStatus = TIMER0_enuInvalidNonPWM_Mode;
    2338:	8a e0       	ldi	r24, 0x0A	; 10
    233a:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	if (TMR0Config->Timer0_PhaseCorrectOutput < TIMER_0_enuPhaseCorrectNumberOfCompareMatchModes)
    233c:	ea 81       	ldd	r30, Y+2	; 0x02
    233e:	fb 81       	ldd	r31, Y+3	; 0x03
    2340:	84 81       	ldd	r24, Z+4	; 0x04
    2342:	84 30       	cpi	r24, 0x04	; 4
    2344:	08 f0       	brcs	.+2      	; 0x2348 <TMR0_enuInitPostCompile+0x460>
    2346:	5f c0       	rjmp	.+190    	; 0x2406 <TMR0_enuInitPostCompile+0x51e>
	{
		switch (TMR0Config->Timer0_PhaseCorrectOutput)
    2348:	ea 81       	ldd	r30, Y+2	; 0x02
    234a:	fb 81       	ldd	r31, Y+3	; 0x03
    234c:	84 81       	ldd	r24, Z+4	; 0x04
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	3d 83       	std	Y+5, r19	; 0x05
    2354:	2c 83       	std	Y+4, r18	; 0x04
    2356:	8c 81       	ldd	r24, Y+4	; 0x04
    2358:	9d 81       	ldd	r25, Y+5	; 0x05
    235a:	81 30       	cpi	r24, 0x01	; 1
    235c:	91 05       	cpc	r25, r1
    235e:	21 f1       	breq	.+72     	; 0x23a8 <TMR0_enuInitPostCompile+0x4c0>
    2360:	2c 81       	ldd	r18, Y+4	; 0x04
    2362:	3d 81       	ldd	r19, Y+5	; 0x05
    2364:	22 30       	cpi	r18, 0x02	; 2
    2366:	31 05       	cpc	r19, r1
    2368:	2c f4       	brge	.+10     	; 0x2374 <TMR0_enuInitPostCompile+0x48c>
    236a:	8c 81       	ldd	r24, Y+4	; 0x04
    236c:	9d 81       	ldd	r25, Y+5	; 0x05
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	61 f0       	breq	.+24     	; 0x238a <TMR0_enuInitPostCompile+0x4a2>
    2372:	47 c0       	rjmp	.+142    	; 0x2402 <TMR0_enuInitPostCompile+0x51a>
    2374:	2c 81       	ldd	r18, Y+4	; 0x04
    2376:	3d 81       	ldd	r19, Y+5	; 0x05
    2378:	22 30       	cpi	r18, 0x02	; 2
    237a:	31 05       	cpc	r19, r1
    237c:	21 f1       	breq	.+72     	; 0x23c6 <TMR0_enuInitPostCompile+0x4de>
    237e:	8c 81       	ldd	r24, Y+4	; 0x04
    2380:	9d 81       	ldd	r25, Y+5	; 0x05
    2382:	83 30       	cpi	r24, 0x03	; 3
    2384:	91 05       	cpc	r25, r1
    2386:	71 f1       	breq	.+92     	; 0x23e4 <TMR0_enuInitPostCompile+0x4fc>
    2388:	3c c0       	rjmp	.+120    	; 0x2402 <TMR0_enuInitPostCompile+0x51a>
		{
		case TIMER_0_enuCompareMatch_PhaseCorrect_Normal:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    238a:	a3 e5       	ldi	r26, 0x53	; 83
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e3 e5       	ldi	r30, 0x53	; 83
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	8e 7f       	andi	r24, 0xFE	; 254
    2396:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2398:	a3 e5       	ldi	r26, 0x53	; 83
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e3 e5       	ldi	r30, 0x53	; 83
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	8d 7f       	andi	r24, 0xFD	; 253
    23a4:	8c 93       	st	X, r24
    23a6:	2f c0       	rjmp	.+94     	; 0x2406 <TMR0_enuInitPostCompile+0x51e>
			break;

		case TIMER_0_enuCompareMatch_PhaseCorrect_Reserved:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    23a8:	a3 e5       	ldi	r26, 0x53	; 83
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e3 e5       	ldi	r30, 0x53	; 83
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	81 60       	ori	r24, 0x01	; 1
    23b4:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    23b6:	a3 e5       	ldi	r26, 0x53	; 83
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e3 e5       	ldi	r30, 0x53	; 83
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	8d 7f       	andi	r24, 0xFD	; 253
    23c2:	8c 93       	st	X, r24
    23c4:	20 c0       	rjmp	.+64     	; 0x2406 <TMR0_enuInitPostCompile+0x51e>
			break;

		case TIMER_0_enuCompareMatch_PhaseCorrect_ClearUpCount_SetDownCount:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    23c6:	a3 e5       	ldi	r26, 0x53	; 83
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e3 e5       	ldi	r30, 0x53	; 83
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	8e 7f       	andi	r24, 0xFE	; 254
    23d2:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    23d4:	a3 e5       	ldi	r26, 0x53	; 83
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e3 e5       	ldi	r30, 0x53	; 83
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	82 60       	ori	r24, 0x02	; 2
    23e0:	8c 93       	st	X, r24
    23e2:	11 c0       	rjmp	.+34     	; 0x2406 <TMR0_enuInitPostCompile+0x51e>
			break;

		case TIMER_0_enuCompareMatch_PhaseCorrect_SetUpCount_ClrDownCount:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    23e4:	a3 e5       	ldi	r26, 0x53	; 83
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e3 e5       	ldi	r30, 0x53	; 83
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	81 60       	ori	r24, 0x01	; 1
    23f0:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    23f2:	a3 e5       	ldi	r26, 0x53	; 83
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e3 e5       	ldi	r30, 0x53	; 83
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	82 60       	ori	r24, 0x02	; 2
    23fe:	8c 93       	st	X, r24
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <TMR0_enuInitPostCompile+0x51e>
			break;

		default:
			LocalErrorStatus = TIMER0_enuInvalidNonPWM_Mode;
    2402:	8a e0       	ldi	r24, 0x0A	; 10
    2404:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return LocalErrorStatus;
    2406:	89 81       	ldd	r24, Y+1	; 0x01
}
    2408:	2d 96       	adiw	r28, 0x0d	; 13
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <TMR0_enuSetTimerValue>:
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;

}*/
/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuSetTimerValue (u8 Cpy_u8TimerValue)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <TMR0_enuSetTimerValue+0x6>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    2426:	19 82       	std	Y+1, r1	; 0x01
	if (Cpy_u8TimerValue < TIMER0_OVERFLOW_VAL)
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	8f 3f       	cpi	r24, 0xFF	; 255
    242c:	29 f0       	breq	.+10     	; 0x2438 <TMR0_enuSetTimerValue+0x1e>
	{
		/* Writing Preload Value */
		TIMER0_TCNT0 = Cpy_u8TimerValue;
    242e:	e2 e5       	ldi	r30, 0x52	; 82
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	80 83       	st	Z, r24
    2436:	02 c0       	rjmp	.+4      	; 0x243c <TMR0_enuSetTimerValue+0x22>
	}
	else
	{
		LocalErrorStatus = TIMER0_enuReachedOverflowValue;
    2438:	8e e0       	ldi	r24, 0x0E	; 14
    243a:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorStatus;
    243c:	89 81       	ldd	r24, Y+1	; 0x01
}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <TMR0_enuSetCompareMatchValue>:
/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuSetCompareMatchValue(u8 Cpy_u8CompareMatchValue)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	00 d0       	rcall	.+0      	; 0x244e <TMR0_enuSetCompareMatchValue+0x6>
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    2454:	19 82       	std	Y+1, r1	; 0x01
	if (Cpy_u8CompareMatchValue < TIMER0_OVERFLOW_VAL)
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	8f 3f       	cpi	r24, 0xFF	; 255
    245a:	29 f0       	breq	.+10     	; 0x2466 <TMR0_enuSetCompareMatchValue+0x1e>
	{
		TIMER0_OCR0 = Cpy_u8CompareMatchValue;
    245c:	ec e5       	ldi	r30, 0x5C	; 92
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	80 83       	st	Z, r24
    2464:	02 c0       	rjmp	.+4      	; 0x246a <TMR0_enuSetCompareMatchValue+0x22>
	}
	else
	{
		LocalErrorStatus = TIMER0_enuReachedOverflowValue;
    2466:	8e e0       	ldi	r24, 0x0E	; 14
    2468:	89 83       	std	Y+1, r24	; 0x01
	}

	return LocalErrorStatus;
    246a:	89 81       	ldd	r24, Y+1	; 0x01
}
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <TMR0_enuRegisterCallback_Overflow>:
/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuRegisterCallback_Overflow(void (*TMR0cbf_t)(void))
{
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	00 d0       	rcall	.+0      	; 0x247c <TMR0_enuRegisterCallback_Overflow+0x6>
    247c:	0f 92       	push	r0
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	9b 83       	std	Y+3, r25	; 0x03
    2484:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    2486:	19 82       	std	Y+1, r1	; 0x01

	/* Set Interrupt for OVF */
	SET_BIT(TIMER0_TIMSK,TIMER0_enuTIMSK_TOIE0);
    2488:	a9 e5       	ldi	r26, 0x59	; 89
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e9 e5       	ldi	r30, 0x59	; 89
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	81 60       	ori	r24, 0x01	; 1
    2494:	8c 93       	st	X, r24

	if (TMR0cbf_t != NULL_PTR)
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	9b 81       	ldd	r25, Y+3	; 0x03
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	39 f0       	breq	.+14     	; 0x24ac <TMR0_enuRegisterCallback_Overflow+0x36>
	{
		Timer0_CallBack_Overflow = TMR0cbf_t;
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	9b 81       	ldd	r25, Y+3	; 0x03
    24a2:	90 93 aa 01 	sts	0x01AA, r25
    24a6:	80 93 a9 01 	sts	0x01A9, r24
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <TMR0_enuRegisterCallback_Overflow+0x3a>
	}
	else
	{
		LocalErrorStatus = TIMER0_enuNullPointerException;
    24ac:	8d e0       	ldi	r24, 0x0D	; 13
    24ae:	89 83       	std	Y+1, r24	; 0x01
	}

	return LocalErrorStatus;
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <TMR0_enuRegisterCallback_CTC>:
/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuRegisterCallback_CTC(void (*TMR0cbf_t)(void))
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <TMR0_enuRegisterCallback_CTC+0x6>
    24c4:	0f 92       	push	r0
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	9b 83       	std	Y+3, r25	; 0x03
    24cc:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    24ce:	19 82       	std	Y+1, r1	; 0x01

	/* Set Interrupt for CTC */
	SET_BIT(TIMER0_TIMSK,TIMER0_enuTIMSK_OCIE0);
    24d0:	a9 e5       	ldi	r26, 0x59	; 89
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e9 e5       	ldi	r30, 0x59	; 89
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	82 60       	ori	r24, 0x02	; 2
    24dc:	8c 93       	st	X, r24

	if (TMR0cbf_t != NULL_PTR)
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	39 f0       	breq	.+14     	; 0x24f4 <TMR0_enuRegisterCallback_CTC+0x36>
	{
		Timer0_CallBack_CTC = TMR0cbf_t;
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ea:	90 93 ac 01 	sts	0x01AC, r25
    24ee:	80 93 ab 01 	sts	0x01AB, r24
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <TMR0_enuRegisterCallback_CTC+0x3a>
	}
	else
	{
		LocalErrorStatus = TIMER0_enuNullPointerException;
    24f4:	8d e0       	ldi	r24, 0x0D	; 13
    24f6:	89 83       	std	Y+1, r24	; 0x01
	}

	return LocalErrorStatus;
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <__vector_ISR_TIMER0_OVF>:
/*********************************************************************************************/
/* Timer0 Overflow ISR */
TIMER_0_OverFlow(ISR_TIMER0_OVF)
{
    2506:	1f 92       	push	r1
    2508:	0f 92       	push	r0
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	0f 92       	push	r0
    250e:	11 24       	eor	r1, r1
    2510:	2f 93       	push	r18
    2512:	3f 93       	push	r19
    2514:	4f 93       	push	r20
    2516:	5f 93       	push	r21
    2518:	6f 93       	push	r22
    251a:	7f 93       	push	r23
    251c:	8f 93       	push	r24
    251e:	9f 93       	push	r25
    2520:	af 93       	push	r26
    2522:	bf 93       	push	r27
    2524:	ef 93       	push	r30
    2526:	ff 93       	push	r31
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
	/* Check Pointer != NULL */
	if (Timer0_CallBack_Overflow != NULL_PTR)
    2530:	80 91 a9 01 	lds	r24, 0x01A9
    2534:	90 91 aa 01 	lds	r25, 0x01AA
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	29 f0       	breq	.+10     	; 0x2546 <__vector_ISR_TIMER0_OVF+0x40>
	{
		Timer0_CallBack_Overflow();
    253c:	e0 91 a9 01 	lds	r30, 0x01A9
    2540:	f0 91 aa 01 	lds	r31, 0x01AA
    2544:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	ff 91       	pop	r31
    254c:	ef 91       	pop	r30
    254e:	bf 91       	pop	r27
    2550:	af 91       	pop	r26
    2552:	9f 91       	pop	r25
    2554:	8f 91       	pop	r24
    2556:	7f 91       	pop	r23
    2558:	6f 91       	pop	r22
    255a:	5f 91       	pop	r21
    255c:	4f 91       	pop	r20
    255e:	3f 91       	pop	r19
    2560:	2f 91       	pop	r18
    2562:	0f 90       	pop	r0
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	0f 90       	pop	r0
    2568:	1f 90       	pop	r1
    256a:	18 95       	reti

0000256c <__vector_ISR_TIMER0_COMP>:
/*********************************************************************************************/
/* Timer0 Compare Match ISR */
TIMER_0_CompareMatch(ISR_TIMER0_COMP)
{
    256c:	1f 92       	push	r1
    256e:	0f 92       	push	r0
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	0f 92       	push	r0
    2574:	11 24       	eor	r1, r1
    2576:	2f 93       	push	r18
    2578:	3f 93       	push	r19
    257a:	4f 93       	push	r20
    257c:	5f 93       	push	r21
    257e:	6f 93       	push	r22
    2580:	7f 93       	push	r23
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	af 93       	push	r26
    2588:	bf 93       	push	r27
    258a:	ef 93       	push	r30
    258c:	ff 93       	push	r31
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
	/* Check Pointer != NULL */
	if (Timer0_CallBack_CTC != NULL_PTR)
    2596:	80 91 ab 01 	lds	r24, 0x01AB
    259a:	90 91 ac 01 	lds	r25, 0x01AC
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	29 f0       	breq	.+10     	; 0x25ac <__vector_ISR_TIMER0_COMP+0x40>
	{
		Timer0_CallBack_CTC();
    25a2:	e0 91 ab 01 	lds	r30, 0x01AB
    25a6:	f0 91 ac 01 	lds	r31, 0x01AC
    25aa:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	ff 91       	pop	r31
    25b2:	ef 91       	pop	r30
    25b4:	bf 91       	pop	r27
    25b6:	af 91       	pop	r26
    25b8:	9f 91       	pop	r25
    25ba:	8f 91       	pop	r24
    25bc:	7f 91       	pop	r23
    25be:	6f 91       	pop	r22
    25c0:	5f 91       	pop	r21
    25c2:	4f 91       	pop	r20
    25c4:	3f 91       	pop	r19
    25c6:	2f 91       	pop	r18
    25c8:	0f 90       	pop	r0
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	0f 90       	pop	r0
    25ce:	1f 90       	pop	r1
    25d0:	18 95       	reti

000025d2 <Delay_MS>:
/*    Delay PIN Function										*/
/*	  Input  : Time passed to halt system with [MILLIS]			*/
/*	  Output : Delay_tenuErrorStatus to Report Errors			*/
/****************************************************************/
Delay_tenuErrorStatus Delay_MS(u32 time)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	29 97       	sbiw	r28, 0x09	; 9
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	6e 83       	std	Y+6, r22	; 0x06
    25e8:	7f 83       	std	Y+7, r23	; 0x07
    25ea:	88 87       	std	Y+8, r24	; 0x08
    25ec:	99 87       	std	Y+9, r25	; 0x09
	Delay_tenuErrorStatus Local_ErrorStatus = DELAY_enuOK;      	// Assuming the current status is OK
    25ee:	1d 82       	std	Y+5, r1	; 0x05
	//u32 TIME=0;
	
	u32 Counter = 0 ;
    25f0:	19 82       	std	Y+1, r1	; 0x01
    25f2:	1a 82       	std	Y+2, r1	; 0x02
    25f4:	1b 82       	std	Y+3, r1	; 0x03
    25f6:	1c 82       	std	Y+4, r1	; 0x04
	time = (u32)((f32)time* Amplification *((f32)F_CPU/MHz));
    25f8:	6e 81       	ldd	r22, Y+6	; 0x06
    25fa:	7f 81       	ldd	r23, Y+7	; 0x07
    25fc:	88 85       	ldd	r24, Y+8	; 0x08
    25fe:	99 85       	ldd	r25, Y+9	; 0x09
    2600:	0e 94 9d 03 	call	0x73a	; 0x73a <__floatunsisf>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	26 e6       	ldi	r18, 0x66	; 102
    260e:	36 e6       	ldi	r19, 0x66	; 102
    2610:	47 eb       	ldi	r20, 0xB7	; 183
    2612:	52 e4       	ldi	r21, 0x42	; 66
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	51 e4       	ldi	r21, 0x41	; 65
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	8e 83       	std	Y+6, r24	; 0x06
    263e:	9f 83       	std	Y+7, r25	; 0x07
    2640:	a8 87       	std	Y+8, r26	; 0x08
    2642:	b9 87       	std	Y+9, r27	; 0x09
    2644:	0c c0       	rjmp	.+24     	; 0x265e <Delay_MS+0x8c>
	{
		*/
		while(Counter < time)
		//while(time)
		{
			asm("NOP"); // processor do nothing
    2646:	00 00       	nop
			Counter++;
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	ab 81       	ldd	r26, Y+3	; 0x03
    264e:	bc 81       	ldd	r27, Y+4	; 0x04
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	a1 1d       	adc	r26, r1
    2654:	b1 1d       	adc	r27, r1
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	ab 83       	std	Y+3, r26	; 0x03
    265c:	bc 83       	std	Y+4, r27	; 0x04
		Local_ErrorStatus = DELAY_enuNOK;
	}
	else
	{
		*/
		while(Counter < time)
    265e:	29 81       	ldd	r18, Y+1	; 0x01
    2660:	3a 81       	ldd	r19, Y+2	; 0x02
    2662:	4b 81       	ldd	r20, Y+3	; 0x03
    2664:	5c 81       	ldd	r21, Y+4	; 0x04
    2666:	8e 81       	ldd	r24, Y+6	; 0x06
    2668:	9f 81       	ldd	r25, Y+7	; 0x07
    266a:	a8 85       	ldd	r26, Y+8	; 0x08
    266c:	b9 85       	ldd	r27, Y+9	; 0x09
    266e:	28 17       	cp	r18, r24
    2670:	39 07       	cpc	r19, r25
    2672:	4a 07       	cpc	r20, r26
    2674:	5b 07       	cpc	r21, r27
    2676:	38 f3       	brcs	.-50     	; 0x2646 <Delay_MS+0x74>
			asm("NOP"); // processor do nothing
			Counter++;
			//time--;
		}
	//}	
	return Local_ErrorStatus;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
}
    267a:	29 96       	adiw	r28, 0x09	; 9
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <Delay_US>:
/*    Delay Set PIN Function									*/
/*	  Input  : Time passed to halt system with 	[MICROS]		*/
/*	  Output : Delay_tenuErrorStatus to Report Errors			*/
/****************************************************************/
Delay_tenuErrorStatus Delay_US(u32 time)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	2d 97       	sbiw	r28, 0x0d	; 13
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	6a 87       	std	Y+10, r22	; 0x0a
    26a2:	7b 87       	std	Y+11, r23	; 0x0b
    26a4:	8c 87       	std	Y+12, r24	; 0x0c
    26a6:	9d 87       	std	Y+13, r25	; 0x0d
	Delay_tenuErrorStatus Local_ErrorStatus = DELAY_enuOK;      	// Assuming the current status is OK
    26a8:	19 86       	std	Y+9, r1	; 0x09
	u32 TIME=0;
    26aa:	1d 82       	std	Y+5, r1	; 0x05
    26ac:	1e 82       	std	Y+6, r1	; 0x06
    26ae:	1f 82       	std	Y+7, r1	; 0x07
    26b0:	18 86       	std	Y+8, r1	; 0x08
	
	u32 Counter = 0 ;
    26b2:	19 82       	std	Y+1, r1	; 0x01
    26b4:	1a 82       	std	Y+2, r1	; 0x02
    26b6:	1b 82       	std	Y+3, r1	; 0x03
    26b8:	1c 82       	std	Y+4, r1	; 0x04
	TIME = (u32)((f32)time* Amplification *((f32)F_CPU/GHz));
    26ba:	6a 85       	ldd	r22, Y+10	; 0x0a
    26bc:	7b 85       	ldd	r23, Y+11	; 0x0b
    26be:	8c 85       	ldd	r24, Y+12	; 0x0c
    26c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    26c2:	0e 94 9d 03 	call	0x73a	; 0x73a <__floatunsisf>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	26 e6       	ldi	r18, 0x66	; 102
    26d0:	36 e6       	ldi	r19, 0x66	; 102
    26d2:	47 eb       	ldi	r20, 0xB7	; 183
    26d4:	52 e4       	ldi	r21, 0x42	; 66
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	2f e6       	ldi	r18, 0x6F	; 111
    26e4:	32 e1       	ldi	r19, 0x12	; 18
    26e6:	43 e0       	ldi	r20, 0x03	; 3
    26e8:	5c e3       	ldi	r21, 0x3C	; 60
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	af 83       	std	Y+7, r26	; 0x07
    2704:	b8 87       	std	Y+8, r27	; 0x08

	if (TIME != (time/100000))
    2706:	8a 85       	ldd	r24, Y+10	; 0x0a
    2708:	9b 85       	ldd	r25, Y+11	; 0x0b
    270a:	ac 85       	ldd	r26, Y+12	; 0x0c
    270c:	bd 85       	ldd	r27, Y+13	; 0x0d
    270e:	20 ea       	ldi	r18, 0xA0	; 160
    2710:	36 e8       	ldi	r19, 0x86	; 134
    2712:	41 e0       	ldi	r20, 0x01	; 1
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 c2 13 	call	0x2784	; 0x2784 <__udivmodsi4>
    271e:	da 01       	movw	r26, r20
    2720:	c9 01       	movw	r24, r18
    2722:	9c 01       	movw	r18, r24
    2724:	ad 01       	movw	r20, r26
    2726:	8d 81       	ldd	r24, Y+5	; 0x05
    2728:	9e 81       	ldd	r25, Y+6	; 0x06
    272a:	af 81       	ldd	r26, Y+7	; 0x07
    272c:	b8 85       	ldd	r27, Y+8	; 0x08
    272e:	28 17       	cp	r18, r24
    2730:	39 07       	cpc	r19, r25
    2732:	4a 07       	cpc	r20, r26
    2734:	5b 07       	cpc	r21, r27
    2736:	79 f0       	breq	.+30     	; 0x2756 <Delay_US+0xca>
	{
		Local_ErrorStatus = DELAY_enuNOK;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	89 87       	std	Y+9, r24	; 0x09
    273c:	0c c0       	rjmp	.+24     	; 0x2756 <Delay_US+0xca>
	}
	
	while(Counter < TIME)
	//while(time)
	{
		asm("NOP"); // processor do nothing
    273e:	00 00       	nop
		Counter++;
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	ab 81       	ldd	r26, Y+3	; 0x03
    2746:	bc 81       	ldd	r27, Y+4	; 0x04
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	a1 1d       	adc	r26, r1
    274c:	b1 1d       	adc	r27, r1
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	9a 83       	std	Y+2, r25	; 0x02
    2752:	ab 83       	std	Y+3, r26	; 0x03
    2754:	bc 83       	std	Y+4, r27	; 0x04
	if (TIME != (time/100000))
	{
		Local_ErrorStatus = DELAY_enuNOK;
	}
	
	while(Counter < TIME)
    2756:	29 81       	ldd	r18, Y+1	; 0x01
    2758:	3a 81       	ldd	r19, Y+2	; 0x02
    275a:	4b 81       	ldd	r20, Y+3	; 0x03
    275c:	5c 81       	ldd	r21, Y+4	; 0x04
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	9e 81       	ldd	r25, Y+6	; 0x06
    2762:	af 81       	ldd	r26, Y+7	; 0x07
    2764:	b8 85       	ldd	r27, Y+8	; 0x08
    2766:	28 17       	cp	r18, r24
    2768:	39 07       	cpc	r19, r25
    276a:	4a 07       	cpc	r20, r26
    276c:	5b 07       	cpc	r21, r27
    276e:	38 f3       	brcs	.-50     	; 0x273e <Delay_US+0xb2>
		asm("NOP"); // processor do nothing
		Counter++;
		//time--;
	}	

	return Local_ErrorStatus;
    2770:	89 85       	ldd	r24, Y+9	; 0x09
}
    2772:	2d 96       	adiw	r28, 0x0d	; 13
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <__udivmodsi4>:
    2784:	a1 e2       	ldi	r26, 0x21	; 33
    2786:	1a 2e       	mov	r1, r26
    2788:	aa 1b       	sub	r26, r26
    278a:	bb 1b       	sub	r27, r27
    278c:	fd 01       	movw	r30, r26
    278e:	0d c0       	rjmp	.+26     	; 0x27aa <__udivmodsi4_ep>

00002790 <__udivmodsi4_loop>:
    2790:	aa 1f       	adc	r26, r26
    2792:	bb 1f       	adc	r27, r27
    2794:	ee 1f       	adc	r30, r30
    2796:	ff 1f       	adc	r31, r31
    2798:	a2 17       	cp	r26, r18
    279a:	b3 07       	cpc	r27, r19
    279c:	e4 07       	cpc	r30, r20
    279e:	f5 07       	cpc	r31, r21
    27a0:	20 f0       	brcs	.+8      	; 0x27aa <__udivmodsi4_ep>
    27a2:	a2 1b       	sub	r26, r18
    27a4:	b3 0b       	sbc	r27, r19
    27a6:	e4 0b       	sbc	r30, r20
    27a8:	f5 0b       	sbc	r31, r21

000027aa <__udivmodsi4_ep>:
    27aa:	66 1f       	adc	r22, r22
    27ac:	77 1f       	adc	r23, r23
    27ae:	88 1f       	adc	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	1a 94       	dec	r1
    27b4:	69 f7       	brne	.-38     	; 0x2790 <__udivmodsi4_loop>
    27b6:	60 95       	com	r22
    27b8:	70 95       	com	r23
    27ba:	80 95       	com	r24
    27bc:	90 95       	com	r25
    27be:	9b 01       	movw	r18, r22
    27c0:	ac 01       	movw	r20, r24
    27c2:	bd 01       	movw	r22, r26
    27c4:	cf 01       	movw	r24, r30
    27c6:	08 95       	ret

000027c8 <__prologue_saves__>:
    27c8:	2f 92       	push	r2
    27ca:	3f 92       	push	r3
    27cc:	4f 92       	push	r4
    27ce:	5f 92       	push	r5
    27d0:	6f 92       	push	r6
    27d2:	7f 92       	push	r7
    27d4:	8f 92       	push	r8
    27d6:	9f 92       	push	r9
    27d8:	af 92       	push	r10
    27da:	bf 92       	push	r11
    27dc:	cf 92       	push	r12
    27de:	df 92       	push	r13
    27e0:	ef 92       	push	r14
    27e2:	ff 92       	push	r15
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	ca 1b       	sub	r28, r26
    27f2:	db 0b       	sbc	r29, r27
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	09 94       	ijmp

00002800 <__epilogue_restores__>:
    2800:	2a 88       	ldd	r2, Y+18	; 0x12
    2802:	39 88       	ldd	r3, Y+17	; 0x11
    2804:	48 88       	ldd	r4, Y+16	; 0x10
    2806:	5f 84       	ldd	r5, Y+15	; 0x0f
    2808:	6e 84       	ldd	r6, Y+14	; 0x0e
    280a:	7d 84       	ldd	r7, Y+13	; 0x0d
    280c:	8c 84       	ldd	r8, Y+12	; 0x0c
    280e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2810:	aa 84       	ldd	r10, Y+10	; 0x0a
    2812:	b9 84       	ldd	r11, Y+9	; 0x09
    2814:	c8 84       	ldd	r12, Y+8	; 0x08
    2816:	df 80       	ldd	r13, Y+7	; 0x07
    2818:	ee 80       	ldd	r14, Y+6	; 0x06
    281a:	fd 80       	ldd	r15, Y+5	; 0x05
    281c:	0c 81       	ldd	r16, Y+4	; 0x04
    281e:	1b 81       	ldd	r17, Y+3	; 0x03
    2820:	aa 81       	ldd	r26, Y+2	; 0x02
    2822:	b9 81       	ldd	r27, Y+1	; 0x01
    2824:	ce 0f       	add	r28, r30
    2826:	d1 1d       	adc	r29, r1
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	ed 01       	movw	r28, r26
    2834:	08 95       	ret

00002836 <_exit>:
    2836:	f8 94       	cli

00002838 <__stop_program>:
    2838:	ff cf       	rjmp	.-2      	; 0x2838 <__stop_program>
