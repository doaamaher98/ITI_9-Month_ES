
18-SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000286e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  0000286e  00002902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001a8  008001a8  00002a4a  2**0
                  ALLOC
  3 .stab         00002bbc  00000000  00000000  00002a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a91  00000000  00000000  00005608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008099  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  000081d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b11  00000000  00000000  00008370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ebc  00000000  00000000  00009e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5b  00000000  00000000  0000ad3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b1  00000000  00000000  0000bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000836  00000000  00000000  0000bfa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 06 	call	0xc16	; 0xc16 <main>
      8a:	0c 94 35 14 	jmp	0x286a	; 0x286a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x18>

00000692 <__fixsfsi>:
     692:	ac e0       	ldi	r26, 0x0C	; 12
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__+0x20>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	be 01       	movw	r22, r28
     6ac:	6b 5f       	subi	r22, 0xFB	; 251
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     6b4:	8d 81       	ldd	r24, Y+5	; 0x05
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	61 f1       	breq	.+88     	; 0x712 <__fixsfsi+0x80>
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	50 f1       	brcs	.+84     	; 0x712 <__fixsfsi+0x80>
     6be:	84 30       	cpi	r24, 0x04	; 4
     6c0:	21 f4       	brne	.+8      	; 0x6ca <__fixsfsi+0x38>
     6c2:	8e 81       	ldd	r24, Y+6	; 0x06
     6c4:	88 23       	and	r24, r24
     6c6:	51 f1       	breq	.+84     	; 0x71c <__fixsfsi+0x8a>
     6c8:	2e c0       	rjmp	.+92     	; 0x726 <__fixsfsi+0x94>
     6ca:	2f 81       	ldd	r18, Y+7	; 0x07
     6cc:	38 85       	ldd	r19, Y+8	; 0x08
     6ce:	37 fd       	sbrc	r19, 7
     6d0:	20 c0       	rjmp	.+64     	; 0x712 <__fixsfsi+0x80>
     6d2:	6e 81       	ldd	r22, Y+6	; 0x06
     6d4:	2f 31       	cpi	r18, 0x1F	; 31
     6d6:	31 05       	cpc	r19, r1
     6d8:	1c f0       	brlt	.+6      	; 0x6e0 <__fixsfsi+0x4e>
     6da:	66 23       	and	r22, r22
     6dc:	f9 f0       	breq	.+62     	; 0x71c <__fixsfsi+0x8a>
     6de:	23 c0       	rjmp	.+70     	; 0x726 <__fixsfsi+0x94>
     6e0:	8e e1       	ldi	r24, 0x1E	; 30
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	29 85       	ldd	r18, Y+9	; 0x09
     6ea:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ec:	4b 85       	ldd	r20, Y+11	; 0x0b
     6ee:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <__fixsfsi+0x68>
     6f2:	56 95       	lsr	r21
     6f4:	47 95       	ror	r20
     6f6:	37 95       	ror	r19
     6f8:	27 95       	ror	r18
     6fa:	8a 95       	dec	r24
     6fc:	d2 f7       	brpl	.-12     	; 0x6f2 <__fixsfsi+0x60>
     6fe:	66 23       	and	r22, r22
     700:	b1 f0       	breq	.+44     	; 0x72e <__fixsfsi+0x9c>
     702:	50 95       	com	r21
     704:	40 95       	com	r20
     706:	30 95       	com	r19
     708:	21 95       	neg	r18
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	4f 4f       	sbci	r20, 0xFF	; 255
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
     710:	0e c0       	rjmp	.+28     	; 0x72e <__fixsfsi+0x9c>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	09 c0       	rjmp	.+18     	; 0x72e <__fixsfsi+0x9c>
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	3f ef       	ldi	r19, 0xFF	; 255
     720:	4f ef       	ldi	r20, 0xFF	; 255
     722:	5f e7       	ldi	r21, 0x7F	; 127
     724:	04 c0       	rjmp	.+8      	; 0x72e <__fixsfsi+0x9c>
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e8       	ldi	r21, 0x80	; 128
     72e:	b9 01       	movw	r22, r18
     730:	ca 01       	movw	r24, r20
     732:	2c 96       	adiw	r28, 0x0c	; 12
     734:	e2 e0       	ldi	r30, 0x02	; 2
     736:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__+0x20>

0000073a <__floatunsisf>:
     73a:	a8 e0       	ldi	r26, 0x08	; 8
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e3 ea       	ldi	r30, 0xA3	; 163
     740:	f3 e0       	ldi	r31, 0x03	; 3
     742:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x10>
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
     74a:	61 15       	cp	r22, r1
     74c:	71 05       	cpc	r23, r1
     74e:	81 05       	cpc	r24, r1
     750:	91 05       	cpc	r25, r1
     752:	19 f4       	brne	.+6      	; 0x75a <__floatunsisf+0x20>
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	60 c0       	rjmp	.+192    	; 0x81a <__floatunsisf+0xe0>
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	89 83       	std	Y+1, r24	; 0x01
     75e:	8e e1       	ldi	r24, 0x1E	; 30
     760:	c8 2e       	mov	r12, r24
     762:	d1 2c       	mov	r13, r1
     764:	dc 82       	std	Y+4, r13	; 0x04
     766:	cb 82       	std	Y+3, r12	; 0x03
     768:	ed 82       	std	Y+5, r14	; 0x05
     76a:	fe 82       	std	Y+6, r15	; 0x06
     76c:	0f 83       	std	Y+7, r16	; 0x07
     76e:	18 87       	std	Y+8, r17	; 0x08
     770:	c8 01       	movw	r24, r16
     772:	b7 01       	movw	r22, r14
     774:	0e 94 16 04 	call	0x82c	; 0x82c <__clzsi2>
     778:	fc 01       	movw	r30, r24
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	f7 ff       	sbrs	r31, 7
     77e:	3b c0       	rjmp	.+118    	; 0x7f6 <__floatunsisf+0xbc>
     780:	22 27       	eor	r18, r18
     782:	33 27       	eor	r19, r19
     784:	2e 1b       	sub	r18, r30
     786:	3f 0b       	sbc	r19, r31
     788:	57 01       	movw	r10, r14
     78a:	68 01       	movw	r12, r16
     78c:	02 2e       	mov	r0, r18
     78e:	04 c0       	rjmp	.+8      	; 0x798 <__floatunsisf+0x5e>
     790:	d6 94       	lsr	r13
     792:	c7 94       	ror	r12
     794:	b7 94       	ror	r11
     796:	a7 94       	ror	r10
     798:	0a 94       	dec	r0
     79a:	d2 f7       	brpl	.-12     	; 0x790 <__floatunsisf+0x56>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__floatunsisf+0x7c>
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	aa 1f       	adc	r26, r26
     7b4:	bb 1f       	adc	r27, r27
     7b6:	2a 95       	dec	r18
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__floatunsisf+0x74>
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	a1 09       	sbc	r26, r1
     7be:	b1 09       	sbc	r27, r1
     7c0:	8e 21       	and	r24, r14
     7c2:	9f 21       	and	r25, r15
     7c4:	a0 23       	and	r26, r16
     7c6:	b1 23       	and	r27, r17
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	a1 05       	cpc	r26, r1
     7cc:	b1 05       	cpc	r27, r1
     7ce:	21 f0       	breq	.+8      	; 0x7d8 <__floatunsisf+0x9e>
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	4a 29       	or	r20, r10
     7da:	5b 29       	or	r21, r11
     7dc:	6c 29       	or	r22, r12
     7de:	7d 29       	or	r23, r13
     7e0:	4d 83       	std	Y+5, r20	; 0x05
     7e2:	5e 83       	std	Y+6, r21	; 0x06
     7e4:	6f 83       	std	Y+7, r22	; 0x07
     7e6:	78 87       	std	Y+8, r23	; 0x08
     7e8:	8e e1       	ldi	r24, 0x1E	; 30
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	8e 1b       	sub	r24, r30
     7ee:	9f 0b       	sbc	r25, r31
     7f0:	9c 83       	std	Y+4, r25	; 0x04
     7f2:	8b 83       	std	Y+3, r24	; 0x03
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <__floatunsisf+0xe0>
     7f6:	30 97       	sbiw	r30, 0x00	; 0
     7f8:	81 f0       	breq	.+32     	; 0x81a <__floatunsisf+0xe0>
     7fa:	0e 2e       	mov	r0, r30
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <__floatunsisf+0xcc>
     7fe:	ee 0c       	add	r14, r14
     800:	ff 1c       	adc	r15, r15
     802:	00 1f       	adc	r16, r16
     804:	11 1f       	adc	r17, r17
     806:	0a 94       	dec	r0
     808:	d2 f7       	brpl	.-12     	; 0x7fe <__floatunsisf+0xc4>
     80a:	ed 82       	std	Y+5, r14	; 0x05
     80c:	fe 82       	std	Y+6, r15	; 0x06
     80e:	0f 83       	std	Y+7, r16	; 0x07
     810:	18 87       	std	Y+8, r17	; 0x08
     812:	ce 1a       	sub	r12, r30
     814:	df 0a       	sbc	r13, r31
     816:	dc 82       	std	Y+4, r13	; 0x04
     818:	cb 82       	std	Y+3, r12	; 0x03
     81a:	1a 82       	std	Y+2, r1	; 0x02
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     824:	28 96       	adiw	r28, 0x08	; 8
     826:	ea e0       	ldi	r30, 0x0A	; 10
     828:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x10>

0000082c <__clzsi2>:
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	7b 01       	movw	r14, r22
     836:	8c 01       	movw	r16, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	e8 16       	cp	r14, r24
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	f8 06       	cpc	r15, r24
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 07       	cpc	r16, r24
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	18 07       	cpc	r17, r24
     848:	88 f4       	brcc	.+34     	; 0x86c <__stack+0xd>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	e8 16       	cp	r14, r24
     84e:	f1 04       	cpc	r15, r1
     850:	01 05       	cpc	r16, r1
     852:	11 05       	cpc	r17, r1
     854:	31 f0       	breq	.+12     	; 0x862 <__stack+0x3>
     856:	28 f0       	brcs	.+10     	; 0x862 <__stack+0x3>
     858:	88 e0       	ldi	r24, 0x08	; 8
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	a0 e0       	ldi	r26, 0x00	; 0
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	17 c0       	rjmp	.+46     	; 0x890 <__stack+0x31>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	12 c0       	rjmp	.+36     	; 0x890 <__stack+0x31>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	e8 16       	cp	r14, r24
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	f8 06       	cpc	r15, r24
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	08 07       	cpc	r16, r24
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	18 07       	cpc	r17, r24
     87c:	28 f0       	brcs	.+10     	; 0x888 <__stack+0x29>
     87e:	88 e1       	ldi	r24, 0x18	; 24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	04 c0       	rjmp	.+8      	; 0x890 <__stack+0x31>
     888:	80 e1       	ldi	r24, 0x10	; 16
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	20 e2       	ldi	r18, 0x20	; 32
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	28 1b       	sub	r18, r24
     89a:	39 0b       	sbc	r19, r25
     89c:	4a 0b       	sbc	r20, r26
     89e:	5b 0b       	sbc	r21, r27
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	16 95       	lsr	r17
     8a4:	07 95       	ror	r16
     8a6:	f7 94       	ror	r15
     8a8:	e7 94       	ror	r14
     8aa:	8a 95       	dec	r24
     8ac:	d2 f7       	brpl	.-12     	; 0x8a2 <__stack+0x43>
     8ae:	f7 01       	movw	r30, r14
     8b0:	e8 59       	subi	r30, 0x98	; 152
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	80 81       	ld	r24, Z
     8b6:	28 1b       	sub	r18, r24
     8b8:	31 09       	sbc	r19, r1
     8ba:	41 09       	sbc	r20, r1
     8bc:	51 09       	sbc	r21, r1
     8be:	c9 01       	movw	r24, r18
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	08 95       	ret

000008ca <__pack_f>:
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	fc 01       	movw	r30, r24
     8d6:	e4 80       	ldd	r14, Z+4	; 0x04
     8d8:	f5 80       	ldd	r15, Z+5	; 0x05
     8da:	06 81       	ldd	r16, Z+6	; 0x06
     8dc:	17 81       	ldd	r17, Z+7	; 0x07
     8de:	d1 80       	ldd	r13, Z+1	; 0x01
     8e0:	80 81       	ld	r24, Z
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	48 f4       	brcc	.+18     	; 0x8f8 <__pack_f+0x2e>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a0 e1       	ldi	r26, 0x10	; 16
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	e8 2a       	or	r14, r24
     8f0:	f9 2a       	or	r15, r25
     8f2:	0a 2b       	or	r16, r26
     8f4:	1b 2b       	or	r17, r27
     8f6:	a5 c0       	rjmp	.+330    	; 0xa42 <__pack_f+0x178>
     8f8:	84 30       	cpi	r24, 0x04	; 4
     8fa:	09 f4       	brne	.+2      	; 0x8fe <__pack_f+0x34>
     8fc:	9f c0       	rjmp	.+318    	; 0xa3c <__pack_f+0x172>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	21 f4       	brne	.+8      	; 0x90a <__pack_f+0x40>
     902:	ee 24       	eor	r14, r14
     904:	ff 24       	eor	r15, r15
     906:	87 01       	movw	r16, r14
     908:	05 c0       	rjmp	.+10     	; 0x914 <__pack_f+0x4a>
     90a:	e1 14       	cp	r14, r1
     90c:	f1 04       	cpc	r15, r1
     90e:	01 05       	cpc	r16, r1
     910:	11 05       	cpc	r17, r1
     912:	19 f4       	brne	.+6      	; 0x91a <__pack_f+0x50>
     914:	e0 e0       	ldi	r30, 0x00	; 0
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	96 c0       	rjmp	.+300    	; 0xa46 <__pack_f+0x17c>
     91a:	62 81       	ldd	r22, Z+2	; 0x02
     91c:	73 81       	ldd	r23, Z+3	; 0x03
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	62 38       	cpi	r22, 0x82	; 130
     922:	79 07       	cpc	r23, r25
     924:	0c f0       	brlt	.+2      	; 0x928 <__pack_f+0x5e>
     926:	5b c0       	rjmp	.+182    	; 0x9de <__pack_f+0x114>
     928:	22 e8       	ldi	r18, 0x82	; 130
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	26 1b       	sub	r18, r22
     92e:	37 0b       	sbc	r19, r23
     930:	2a 31       	cpi	r18, 0x1A	; 26
     932:	31 05       	cpc	r19, r1
     934:	2c f0       	brlt	.+10     	; 0x940 <__pack_f+0x76>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	2a c0       	rjmp	.+84     	; 0x994 <__pack_f+0xca>
     940:	b8 01       	movw	r22, r16
     942:	a7 01       	movw	r20, r14
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__pack_f+0x86>
     948:	76 95       	lsr	r23
     94a:	67 95       	ror	r22
     94c:	57 95       	ror	r21
     94e:	47 95       	ror	r20
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__pack_f+0x7e>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	04 c0       	rjmp	.+8      	; 0x966 <__pack_f+0x9c>
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	aa 1f       	adc	r26, r26
     964:	bb 1f       	adc	r27, r27
     966:	2a 95       	dec	r18
     968:	d2 f7       	brpl	.-12     	; 0x95e <__pack_f+0x94>
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	a1 09       	sbc	r26, r1
     96e:	b1 09       	sbc	r27, r1
     970:	8e 21       	and	r24, r14
     972:	9f 21       	and	r25, r15
     974:	a0 23       	and	r26, r16
     976:	b1 23       	and	r27, r17
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	a1 05       	cpc	r26, r1
     97c:	b1 05       	cpc	r27, r1
     97e:	21 f0       	breq	.+8      	; 0x988 <__pack_f+0xbe>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	9a 01       	movw	r18, r20
     98a:	ab 01       	movw	r20, r22
     98c:	28 2b       	or	r18, r24
     98e:	39 2b       	or	r19, r25
     990:	4a 2b       	or	r20, r26
     992:	5b 2b       	or	r21, r27
     994:	da 01       	movw	r26, r20
     996:	c9 01       	movw	r24, r18
     998:	8f 77       	andi	r24, 0x7F	; 127
     99a:	90 70       	andi	r25, 0x00	; 0
     99c:	a0 70       	andi	r26, 0x00	; 0
     99e:	b0 70       	andi	r27, 0x00	; 0
     9a0:	80 34       	cpi	r24, 0x40	; 64
     9a2:	91 05       	cpc	r25, r1
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	39 f4       	brne	.+14     	; 0x9b8 <__pack_f+0xee>
     9aa:	27 ff       	sbrs	r18, 7
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__pack_f+0xf6>
     9ae:	20 5c       	subi	r18, 0xC0	; 192
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	4f 4f       	sbci	r20, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__pack_f+0xf6>
     9b8:	21 5c       	subi	r18, 0xC1	; 193
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	4f 4f       	sbci	r20, 0xFF	; 255
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	e0 e0       	ldi	r30, 0x00	; 0
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	20 30       	cpi	r18, 0x00	; 0
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	3a 07       	cpc	r19, r26
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	4a 07       	cpc	r20, r26
     9ce:	a0 e4       	ldi	r26, 0x40	; 64
     9d0:	5a 07       	cpc	r21, r26
     9d2:	10 f0       	brcs	.+4      	; 0x9d8 <__pack_f+0x10e>
     9d4:	e1 e0       	ldi	r30, 0x01	; 1
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	79 01       	movw	r14, r18
     9da:	8a 01       	movw	r16, r20
     9dc:	27 c0       	rjmp	.+78     	; 0xa2c <__pack_f+0x162>
     9de:	60 38       	cpi	r22, 0x80	; 128
     9e0:	71 05       	cpc	r23, r1
     9e2:	64 f5       	brge	.+88     	; 0xa3c <__pack_f+0x172>
     9e4:	fb 01       	movw	r30, r22
     9e6:	e1 58       	subi	r30, 0x81	; 129
     9e8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ea:	d8 01       	movw	r26, r16
     9ec:	c7 01       	movw	r24, r14
     9ee:	8f 77       	andi	r24, 0x7F	; 127
     9f0:	90 70       	andi	r25, 0x00	; 0
     9f2:	a0 70       	andi	r26, 0x00	; 0
     9f4:	b0 70       	andi	r27, 0x00	; 0
     9f6:	80 34       	cpi	r24, 0x40	; 64
     9f8:	91 05       	cpc	r25, r1
     9fa:	a1 05       	cpc	r26, r1
     9fc:	b1 05       	cpc	r27, r1
     9fe:	39 f4       	brne	.+14     	; 0xa0e <__pack_f+0x144>
     a00:	e7 fe       	sbrs	r14, 7
     a02:	0d c0       	rjmp	.+26     	; 0xa1e <__pack_f+0x154>
     a04:	80 e4       	ldi	r24, 0x40	; 64
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x14c>
     a0e:	8f e3       	ldi	r24, 0x3F	; 63
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	e8 0e       	add	r14, r24
     a18:	f9 1e       	adc	r15, r25
     a1a:	0a 1f       	adc	r16, r26
     a1c:	1b 1f       	adc	r17, r27
     a1e:	17 ff       	sbrs	r17, 7
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <__pack_f+0x162>
     a22:	16 95       	lsr	r17
     a24:	07 95       	ror	r16
     a26:	f7 94       	ror	r15
     a28:	e7 94       	ror	r14
     a2a:	31 96       	adiw	r30, 0x01	; 1
     a2c:	87 e0       	ldi	r24, 0x07	; 7
     a2e:	16 95       	lsr	r17
     a30:	07 95       	ror	r16
     a32:	f7 94       	ror	r15
     a34:	e7 94       	ror	r14
     a36:	8a 95       	dec	r24
     a38:	d1 f7       	brne	.-12     	; 0xa2e <__pack_f+0x164>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <__pack_f+0x17c>
     a3c:	ee 24       	eor	r14, r14
     a3e:	ff 24       	eor	r15, r15
     a40:	87 01       	movw	r16, r14
     a42:	ef ef       	ldi	r30, 0xFF	; 255
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	6e 2f       	mov	r22, r30
     a48:	67 95       	ror	r22
     a4a:	66 27       	eor	r22, r22
     a4c:	67 95       	ror	r22
     a4e:	90 2f       	mov	r25, r16
     a50:	9f 77       	andi	r25, 0x7F	; 127
     a52:	d7 94       	ror	r13
     a54:	dd 24       	eor	r13, r13
     a56:	d7 94       	ror	r13
     a58:	8e 2f       	mov	r24, r30
     a5a:	86 95       	lsr	r24
     a5c:	49 2f       	mov	r20, r25
     a5e:	46 2b       	or	r20, r22
     a60:	58 2f       	mov	r21, r24
     a62:	5d 29       	or	r21, r13
     a64:	b7 01       	movw	r22, r14
     a66:	ca 01       	movw	r24, r20
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	08 95       	ret

00000a74 <__unpack_f>:
     a74:	fc 01       	movw	r30, r24
     a76:	db 01       	movw	r26, r22
     a78:	40 81       	ld	r20, Z
     a7a:	51 81       	ldd	r21, Z+1	; 0x01
     a7c:	22 81       	ldd	r18, Z+2	; 0x02
     a7e:	62 2f       	mov	r22, r18
     a80:	6f 77       	andi	r22, 0x7F	; 127
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	22 1f       	adc	r18, r18
     a86:	22 27       	eor	r18, r18
     a88:	22 1f       	adc	r18, r18
     a8a:	93 81       	ldd	r25, Z+3	; 0x03
     a8c:	89 2f       	mov	r24, r25
     a8e:	88 0f       	add	r24, r24
     a90:	82 2b       	or	r24, r18
     a92:	28 2f       	mov	r18, r24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	99 1f       	adc	r25, r25
     a98:	99 27       	eor	r25, r25
     a9a:	99 1f       	adc	r25, r25
     a9c:	11 96       	adiw	r26, 0x01	; 1
     a9e:	9c 93       	st	X, r25
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	21 15       	cp	r18, r1
     aa4:	31 05       	cpc	r19, r1
     aa6:	a9 f5       	brne	.+106    	; 0xb12 <__unpack_f+0x9e>
     aa8:	41 15       	cp	r20, r1
     aaa:	51 05       	cpc	r21, r1
     aac:	61 05       	cpc	r22, r1
     aae:	71 05       	cpc	r23, r1
     ab0:	11 f4       	brne	.+4      	; 0xab6 <__unpack_f+0x42>
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	37 c0       	rjmp	.+110    	; 0xb24 <__unpack_f+0xb0>
     ab6:	82 e8       	ldi	r24, 0x82	; 130
     ab8:	9f ef       	ldi	r25, 0xFF	; 255
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	9c 93       	st	X, r25
     abe:	8e 93       	st	-X, r24
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	9a 01       	movw	r18, r20
     ac4:	ab 01       	movw	r20, r22
     ac6:	67 e0       	ldi	r22, 0x07	; 7
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	44 1f       	adc	r20, r20
     ace:	55 1f       	adc	r21, r21
     ad0:	6a 95       	dec	r22
     ad2:	d1 f7       	brne	.-12     	; 0xac8 <__unpack_f+0x54>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	8c 93       	st	X, r24
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <__unpack_f+0x80>
     ada:	22 0f       	add	r18, r18
     adc:	33 1f       	adc	r19, r19
     ade:	44 1f       	adc	r20, r20
     ae0:	55 1f       	adc	r21, r21
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	8d 91       	ld	r24, X+
     ae6:	9c 91       	ld	r25, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	13 96       	adiw	r26, 0x03	; 3
     aee:	9c 93       	st	X, r25
     af0:	8e 93       	st	-X, r24
     af2:	12 97       	sbiw	r26, 0x02	; 2
     af4:	20 30       	cpi	r18, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	38 07       	cpc	r19, r24
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	48 07       	cpc	r20, r24
     afe:	80 e4       	ldi	r24, 0x40	; 64
     b00:	58 07       	cpc	r21, r24
     b02:	58 f3       	brcs	.-42     	; 0xada <__unpack_f+0x66>
     b04:	14 96       	adiw	r26, 0x04	; 4
     b06:	2d 93       	st	X+, r18
     b08:	3d 93       	st	X+, r19
     b0a:	4d 93       	st	X+, r20
     b0c:	5c 93       	st	X, r21
     b0e:	17 97       	sbiw	r26, 0x07	; 7
     b10:	08 95       	ret
     b12:	2f 3f       	cpi	r18, 0xFF	; 255
     b14:	31 05       	cpc	r19, r1
     b16:	79 f4       	brne	.+30     	; 0xb36 <__unpack_f+0xc2>
     b18:	41 15       	cp	r20, r1
     b1a:	51 05       	cpc	r21, r1
     b1c:	61 05       	cpc	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__unpack_f+0xb4>
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	8c 93       	st	X, r24
     b26:	08 95       	ret
     b28:	64 ff       	sbrs	r22, 4
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__unpack_f+0xbe>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	8c 93       	st	X, r24
     b30:	12 c0       	rjmp	.+36     	; 0xb56 <__unpack_f+0xe2>
     b32:	1c 92       	st	X, r1
     b34:	10 c0       	rjmp	.+32     	; 0xb56 <__unpack_f+0xe2>
     b36:	2f 57       	subi	r18, 0x7F	; 127
     b38:	30 40       	sbci	r19, 0x00	; 0
     b3a:	13 96       	adiw	r26, 0x03	; 3
     b3c:	3c 93       	st	X, r19
     b3e:	2e 93       	st	-X, r18
     b40:	12 97       	sbiw	r26, 0x02	; 2
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	8c 93       	st	X, r24
     b46:	87 e0       	ldi	r24, 0x07	; 7
     b48:	44 0f       	add	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	66 1f       	adc	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	8a 95       	dec	r24
     b52:	d1 f7       	brne	.-12     	; 0xb48 <__unpack_f+0xd4>
     b54:	70 64       	ori	r23, 0x40	; 64
     b56:	14 96       	adiw	r26, 0x04	; 4
     b58:	4d 93       	st	X+, r20
     b5a:	5d 93       	st	X+, r21
     b5c:	6d 93       	st	X+, r22
     b5e:	7c 93       	st	X, r23
     b60:	17 97       	sbiw	r26, 0x07	; 7
     b62:	08 95       	ret

00000b64 <__fpcmp_parts_f>:
     b64:	1f 93       	push	r17
     b66:	dc 01       	movw	r26, r24
     b68:	fb 01       	movw	r30, r22
     b6a:	9c 91       	ld	r25, X
     b6c:	92 30       	cpi	r25, 0x02	; 2
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <__fpcmp_parts_f+0xe>
     b70:	47 c0       	rjmp	.+142    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b72:	80 81       	ld	r24, Z
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	08 f4       	brcc	.+2      	; 0xb7a <__fpcmp_parts_f+0x16>
     b78:	43 c0       	rjmp	.+134    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b7a:	94 30       	cpi	r25, 0x04	; 4
     b7c:	51 f4       	brne	.+20     	; 0xb92 <__fpcmp_parts_f+0x2e>
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	1c 91       	ld	r17, X
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	99 f5       	brne	.+102    	; 0xbec <__fpcmp_parts_f+0x88>
     b86:	81 81       	ldd	r24, Z+1	; 0x01
     b88:	68 2f       	mov	r22, r24
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	61 1b       	sub	r22, r17
     b8e:	71 09       	sbc	r23, r1
     b90:	3f c0       	rjmp	.+126    	; 0xc10 <__fpcmp_parts_f+0xac>
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	21 f0       	breq	.+8      	; 0xb9e <__fpcmp_parts_f+0x3a>
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	31 f4       	brne	.+12     	; 0xba6 <__fpcmp_parts_f+0x42>
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	b9 f1       	breq	.+110    	; 0xc0c <__fpcmp_parts_f+0xa8>
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	88 23       	and	r24, r24
     ba2:	89 f1       	breq	.+98     	; 0xc06 <__fpcmp_parts_f+0xa2>
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <__fpcmp_parts_f+0x9c>
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	1c 91       	ld	r17, X
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	f1 f0       	breq	.+60     	; 0xbec <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	18 17       	cp	r17, r24
     bb4:	d9 f4       	brne	.+54     	; 0xbec <__fpcmp_parts_f+0x88>
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	2d 91       	ld	r18, X+
     bba:	3c 91       	ld	r19, X
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	82 17       	cp	r24, r18
     bc4:	93 07       	cpc	r25, r19
     bc6:	94 f0       	brlt	.+36     	; 0xbec <__fpcmp_parts_f+0x88>
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	bc f0       	brlt	.+46     	; 0xbfc <__fpcmp_parts_f+0x98>
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	8d 91       	ld	r24, X+
     bd2:	9d 91       	ld	r25, X+
     bd4:	0d 90       	ld	r0, X+
     bd6:	bc 91       	ld	r27, X
     bd8:	a0 2d       	mov	r26, r0
     bda:	24 81       	ldd	r18, Z+4	; 0x04
     bdc:	35 81       	ldd	r19, Z+5	; 0x05
     bde:	46 81       	ldd	r20, Z+6	; 0x06
     be0:	57 81       	ldd	r21, Z+7	; 0x07
     be2:	28 17       	cp	r18, r24
     be4:	39 07       	cpc	r19, r25
     be6:	4a 07       	cpc	r20, r26
     be8:	5b 07       	cpc	r21, r27
     bea:	18 f4       	brcc	.+6      	; 0xbf2 <__fpcmp_parts_f+0x8e>
     bec:	11 23       	and	r17, r17
     bee:	41 f0       	breq	.+16     	; 0xc00 <__fpcmp_parts_f+0x9c>
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <__fpcmp_parts_f+0xa2>
     bf2:	82 17       	cp	r24, r18
     bf4:	93 07       	cpc	r25, r19
     bf6:	a4 07       	cpc	r26, r20
     bf8:	b5 07       	cpc	r27, r21
     bfa:	40 f4       	brcc	.+16     	; 0xc0c <__fpcmp_parts_f+0xa8>
     bfc:	11 23       	and	r17, r17
     bfe:	19 f0       	breq	.+6      	; 0xc06 <__fpcmp_parts_f+0xa2>
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <__fpcmp_parts_f+0xac>
     c06:	6f ef       	ldi	r22, 0xFF	; 255
     c08:	7f ef       	ldi	r23, 0xFF	; 255
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <__fpcmp_parts_f+0xac>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	cb 01       	movw	r24, r22
     c12:	1f 91       	pop	r17
     c14:	08 95       	ret

00000c16 <main>:
#include "../01-MCAL/SPI_Interface.h"

#include "../03-HAL/LED.h"

void main(void)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
	u8 ReceivedData;

	DIO_enuInit();
     c20:	0e 94 8f 06 	call	0xd1e	; 0xd1e <DIO_enuInit>

	SPI_enuSlaveInit();
     c24:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <SPI_enuSlaveInit>

	while (1)
	{
		ReceivedData = SPI_u8Transcieve(10);
     c28:	8a e0       	ldi	r24, 0x0A	; 10
     c2a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <SPI_u8Transcieve>
     c2e:	89 83       	std	Y+1, r24	; 0x01
		Delay_MS(10);
     c30:	6a e0       	ldi	r22, 0x0A	; 10
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 03 13 	call	0x2606	; 0x2606 <Delay_MS>

		if (ReceivedData == 1)		/* Sent from the Master */
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	99 f7       	brne	.-26     	; 0xc28 <main+0x12>
		{
			HAL_LED_ON(LED_enuPin0);
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	0e 94 37 06 	call	0xc6e	; 0xc6e <HAL_LED_ON>
			Delay_MS(500);
     c48:	64 ef       	ldi	r22, 0xF4	; 244
     c4a:	71 e0       	ldi	r23, 0x01	; 1
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 03 13 	call	0x2606	; 0x2606 <Delay_MS>
			HAL_LED_ON(LED_enuPin1);
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	0e 94 37 06 	call	0xc6e	; 0xc6e <HAL_LED_ON>
			Delay_MS(500);
     c5a:	64 ef       	ldi	r22, 0xF4	; 244
     c5c:	71 e0       	ldi	r23, 0x01	; 1
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 03 13 	call	0x2606	; 0x2606 <Delay_MS>
			HAL_LED_ON(LED_enuPin2);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	0e 94 37 06 	call	0xc6e	; 0xc6e <HAL_LED_ON>
     c6c:	dd cf       	rjmp	.-70     	; 0xc28 <main+0x12>

00000c6e <HAL_LED_ON>:
/*	  Input  : Pin number that needs to be set					*/
/*	  Output : LED_tenuErrorStatus to Report Errors				*/
/****************************************************************/

LED_tenuErrorStatus HAL_LED_ON(LED_tenuPins Cpy_u8PinNumber)
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	00 d0       	rcall	.+0      	; 0xc74 <HAL_LED_ON+0x6>
     c74:	00 d0       	rcall	.+0      	; 0xc76 <HAL_LED_ON+0x8>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	8c 83       	std	Y+4, r24	; 0x04
	LED_tenuErrorStatus Local_ErrorStatus = LED_enuOk;      	// Assuming the current status is OK
     c7c:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_u8PinNumber /REG_BITS;
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	86 95       	lsr	r24
     c82:	86 95       	lsr	r24
     c84:	86 95       	lsr	r24
     c86:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_u8PinNumber %REG_BITS;
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	87 70       	andi	r24, 0x07	; 7
     c8c:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > LED_enuNumberOfPorts)
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	85 30       	cpi	r24, 0x05	; 5
     c92:	18 f0       	brcs	.+6      	; 0xc9a <HAL_LED_ON+0x2c>
	{
		Local_ErrorStatus = LED_enuInvalidPortNum;
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	8b 83       	std	Y+3, r24	; 0x03
     c98:	0e c0       	rjmp	.+28     	; 0xcb6 <HAL_LED_ON+0x48>
	}
	else if (Loc_u8PinNumber > LED_enuNumberOfPins)
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	81 32       	cpi	r24, 0x21	; 33
     c9e:	18 f0       	brcs	.+6      	; 0xca6 <HAL_LED_ON+0x38>
	{
		Local_ErrorStatus = LED_enuInvalidPinNum;
     ca0:	84 e0       	ldi	r24, 0x04	; 4
     ca2:	8b 83       	std	Y+3, r24	; 0x03
     ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <HAL_LED_ON+0x48>
	}
	
	else if (Local_ErrorStatus == LED_enuOk)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	88 23       	and	r24, r24
     caa:	21 f4       	brne	.+8      	; 0xcb4 <HAL_LED_ON+0x46>
	{
		DIO_enuSetPin(Cpy_u8PinNumber);
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuSetPin>
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <HAL_LED_ON+0x48>
	}
	else
	{
		Local_ErrorStatus = LED_enuOk;
     cb4:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_ErrorStatus;
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <HAL_LED_OFF>:
/*    LED OFF Function											*/
/*	  Input  : Pin number that needs to be cleared				*/
/*	  Output : LED_tenuErrorStatus to Report Errors				*/
/****************************************************************/
LED_tenuErrorStatus HAL_LED_OFF(LED_tenuPins Cpy_u8PinNumber)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <HAL_LED_OFF+0x6>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <HAL_LED_OFF+0x8>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	8c 83       	std	Y+4, r24	; 0x04
	LED_tenuErrorStatus Local_ErrorStatus = LED_enuOk;      	// Assuming the current status is OK
     cd4:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_u8PinNumber /REG_BITS;
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	86 95       	lsr	r24
     cda:	86 95       	lsr	r24
     cdc:	86 95       	lsr	r24
     cde:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_u8PinNumber %REG_BITS;
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	87 70       	andi	r24, 0x07	; 7
     ce4:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > LED_enuNumberOfPorts)
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	85 30       	cpi	r24, 0x05	; 5
     cea:	18 f0       	brcs	.+6      	; 0xcf2 <HAL_LED_OFF+0x2c>
	{
		Local_ErrorStatus = LED_enuInvalidPortNum;
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8b 83       	std	Y+3, r24	; 0x03
     cf0:	0e c0       	rjmp	.+28     	; 0xd0e <HAL_LED_OFF+0x48>
	}
	else if (Loc_u8PinNumber > LED_enuNumberOfPins)
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	81 32       	cpi	r24, 0x21	; 33
     cf6:	18 f0       	brcs	.+6      	; 0xcfe <HAL_LED_OFF+0x38>
	{
		Local_ErrorStatus = LED_enuInvalidPinNum;
     cf8:	84 e0       	ldi	r24, 0x04	; 4
     cfa:	8b 83       	std	Y+3, r24	; 0x03
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <HAL_LED_OFF+0x48>
	}
	
	else if (Local_ErrorStatus == LED_enuOk)
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	88 23       	and	r24, r24
     d02:	21 f4       	brne	.+8      	; 0xd0c <HAL_LED_OFF+0x46>
	{
		DIO_enuClearPin(Cpy_u8PinNumber);
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	0e 94 1b 0b 	call	0x1636	; 0x1636 <DIO_enuClearPin>
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <HAL_LED_OFF+0x48>
	}
	else
	{
		Local_ErrorStatus = LED_enuOk;
     d0c:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_ErrorStatus;
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <DIO_enuInit>:
/*    DIO Init Function											*/
/*	  Input  : void												*/
/*	  Output : DIO_tenuErrorStatus to Report Errors				*/
/****************************************************************/
DIO_tenuErrorStatus DIO_enuInit (void)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	2e 97       	sbiw	r28, 0x0e	; 14
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
	DIO_tenuErrorStatus Local_ErrorStatus = DIO_enuOK;      	// Assuming the current status is OK
     d32:	1c 82       	std	Y+4, r1	; 0x04
	
	u8 Local_Iterator;
	u8 Loc_u8PortNumber = 0;
     d34:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8PinNumber  = 0;
     d36:	19 82       	std	Y+1, r1	; 0x01
	
	for (Local_Iterator = 0; Local_Iterator < DIO_enuNumberOfPins ; Local_Iterator++)
     d38:	1b 82       	std	Y+3, r1	; 0x03
     d3a:	d3 c3       	rjmp	.+1958   	; 0x14e2 <DIO_enuInit+0x7c4>
	{
		Loc_u8PortNumber = Local_Iterator/REG_BITS;   // PORT NUMBER
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	86 95       	lsr	r24
     d40:	86 95       	lsr	r24
     d42:	86 95       	lsr	r24
     d44:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8PinNumber  = Local_Iterator%REG_BITS;   // PIN NUMBER
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	87 70       	andi	r24, 0x07	; 7
     d4a:	89 83       	std	Y+1, r24	; 0x01
		
		/**************************** VALIDATION ***************************/
		if(Loc_u8PortNumber > DIO_enuNumberOfPorts)
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	85 30       	cpi	r24, 0x05	; 5
     d50:	18 f0       	brcs	.+6      	; 0xd58 <DIO_enuInit+0x3a>
		{
			Local_ErrorStatus = DIO_enuInvalidPortNum;
     d52:	83 e0       	ldi	r24, 0x03	; 3
     d54:	8c 83       	std	Y+4, r24	; 0x04
     d56:	c2 c3       	rjmp	.+1924   	; 0x14dc <DIO_enuInit+0x7be>
		}
		else if (Loc_u8PinNumber > DIO_enuNumberOfPins)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	81 32       	cpi	r24, 0x21	; 33
     d5c:	18 f0       	brcs	.+6      	; 0xd64 <DIO_enuInit+0x46>
		{
			Local_ErrorStatus = DIO_enuInvalidPinNum;
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	8c 83       	std	Y+4, r24	; 0x04
     d62:	bc c3       	rjmp	.+1912   	; 0x14dc <DIO_enuInit+0x7be>
		}
		/*******************************************************************/
		else if (Local_ErrorStatus == DIO_enuOK)
     d64:	8c 81       	ldd	r24, Y+4	; 0x04
     d66:	88 23       	and	r24, r24
     d68:	09 f0       	breq	.+2      	; 0xd6c <DIO_enuInit+0x4e>
     d6a:	b6 c3       	rjmp	.+1900   	; 0x14d8 <DIO_enuInit+0x7ba>
		{
			// Switching on the ports [A,B,C OR D]
			switch (Loc_u8PortNumber)
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	3e 87       	std	Y+14, r19	; 0x0e
     d74:	2d 87       	std	Y+13, r18	; 0x0d
     d76:	8d 85       	ldd	r24, Y+13	; 0x0d
     d78:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <DIO_enuInit+0x64>
     d80:	fc c0       	rjmp	.+504    	; 0xf7a <DIO_enuInit+0x25c>
     d82:	2d 85       	ldd	r18, Y+13	; 0x0d
     d84:	3e 85       	ldd	r19, Y+14	; 0x0e
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	2c f4       	brge	.+10     	; 0xd96 <DIO_enuInit+0x78>
     d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	71 f0       	breq	.+28     	; 0xdb0 <DIO_enuInit+0x92>
     d94:	a3 c3       	rjmp	.+1862   	; 0x14dc <DIO_enuInit+0x7be>
     d96:	2d 85       	ldd	r18, Y+13	; 0x0d
     d98:	3e 85       	ldd	r19, Y+14	; 0x0e
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	09 f4       	brne	.+2      	; 0xda2 <DIO_enuInit+0x84>
     da0:	d1 c1       	rjmp	.+930    	; 0x1144 <DIO_enuInit+0x426>
     da2:	8d 85       	ldd	r24, Y+13	; 0x0d
     da4:	9e 85       	ldd	r25, Y+14	; 0x0e
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	91 05       	cpc	r25, r1
     daa:	09 f4       	brne	.+2      	; 0xdae <DIO_enuInit+0x90>
     dac:	b0 c2       	rjmp	.+1376   	; 0x130e <DIO_enuInit+0x5f0>
     dae:	96 c3       	rjmp	.+1836   	; 0x14dc <DIO_enuInit+0x7be>
			{
				/****************************** PORTA ***************************************/
				case (DIO_enuPORTA):
				// Switching on the pin's Direction [INPUT OR OUTPUT]
				switch (DIO_strPinCfg[Local_Iterator].DIO_strPinDirection)
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	fc 01       	movw	r30, r24
     dbc:	e8 59       	subi	r30, 0x98	; 152
     dbe:	fe 4f       	sbci	r31, 0xFE	; 254
     dc0:	80 81       	ld	r24, Z
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3c 87       	std	Y+12, r19	; 0x0c
     dc8:	2b 87       	std	Y+11, r18	; 0x0b
     dca:	8b 85       	ldd	r24, Y+11	; 0x0b
     dcc:	9c 85       	ldd	r25, Y+12	; 0x0c
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <DIO_enuInit+0xb6>
     dd2:	6c c0       	rjmp	.+216    	; 0xeac <DIO_enuInit+0x18e>
     dd4:	2b 85       	ldd	r18, Y+11	; 0x0b
     dd6:	3c 85       	ldd	r19, Y+12	; 0x0c
     dd8:	21 30       	cpi	r18, 0x01	; 1
     dda:	31 05       	cpc	r19, r1
     ddc:	09 f0       	breq	.+2      	; 0xde0 <DIO_enuInit+0xc2>
     dde:	cd c0       	rjmp	.+410    	; 0xf7a <DIO_enuInit+0x25c>
				{
					/**************************** OUTPUT **************************************/
					case (DIO_enuOUTPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputLow)
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	fc 01       	movw	r30, r24
     dec:	e7 59       	subi	r30, 0x97	; 151
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	80 81       	ld	r24, Z
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	39 f5       	brne	.+78     	; 0xe44 <DIO_enuInit+0x126>
					{
						// OUTPUT PIN
						SET_BIT(DDRA, Loc_u8PinNumber);
     df6:	aa e3       	ldi	r26, 0x3A	; 58
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ea e3       	ldi	r30, 0x3A	; 58
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_enuInit+0xf4>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	2a 95       	dec	r18
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_enuInit+0xf0>
     e16:	84 2b       	or	r24, r20
     e18:	8c 93       	st	X, r24
						// MODE : LOW
						CLR_BIT(PORTA, Loc_u8PinNumber);
     e1a:	ab e3       	ldi	r26, 0x3B	; 59
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	eb e3       	ldi	r30, 0x3B	; 59
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_enuInit+0x11a>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_enuInit+0x116>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	9b c0       	rjmp	.+310    	; 0xf7a <DIO_enuInit+0x25c>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputHigh)
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	fc 01       	movw	r30, r24
     e50:	e7 59       	subi	r30, 0x97	; 151
     e52:	fe 4f       	sbci	r31, 0xFE	; 254
     e54:	80 81       	ld	r24, Z
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	31 f5       	brne	.+76     	; 0xea6 <DIO_enuInit+0x188>
					{
						// OUTPUT PIN
						SET_BIT(DDRA, Loc_u8PinNumber);
     e5a:	aa e3       	ldi	r26, 0x3A	; 58
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ea e3       	ldi	r30, 0x3A	; 58
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_enuInit+0x158>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	2a 95       	dec	r18
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_enuInit+0x154>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
						// MODE : LOW
						SET_BIT(PORTA, Loc_u8PinNumber);
     e7e:	ab e3       	ldi	r26, 0x3B	; 59
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	eb e3       	ldi	r30, 0x3B	; 59
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_enuInit+0x17e>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_enuInit+0x17a>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	6a c0       	rjmp	.+212    	; 0xf7a <DIO_enuInit+0x25c>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
     ea6:	85 e0       	ldi	r24, 0x05	; 5
     ea8:	8c 83       	std	Y+4, r24	; 0x04
     eaa:	67 c0       	rjmp	.+206    	; 0xf7a <DIO_enuInit+0x25c>
					break;
					
					/**************************** INPUT **************************************/
					case (DIO_enuINPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinPullUp)
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	fc 01       	movw	r30, r24
     eb8:	e7 59       	subi	r30, 0x97	; 151
     eba:	fe 4f       	sbci	r31, 0xFE	; 254
     ebc:	80 81       	ld	r24, Z
     ebe:	88 23       	and	r24, r24
     ec0:	39 f5       	brne	.+78     	; 0xf10 <DIO_enuInit+0x1f2>
					{
						// INPUT PIN
						CLR_BIT(DDRA, Loc_u8PinNumber);
     ec2:	aa e3       	ldi	r26, 0x3A	; 58
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ea e3       	ldi	r30, 0x3A	; 58
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_enuInit+0x1c0>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	2a 95       	dec	r18
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_enuInit+0x1bc>
     ee2:	80 95       	com	r24
     ee4:	84 23       	and	r24, r20
     ee6:	8c 93       	st	X, r24
						// MODE : PULL UP
						SET_BIT(PORTA, Loc_u8PinNumber);
     ee8:	ab e3       	ldi	r26, 0x3B	; 59
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	eb e3       	ldi	r30, 0x3B	; 59
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_enuInit+0x1e8>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_enuInit+0x1e4>
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	35 c0       	rjmp	.+106    	; 0xf7a <DIO_enuInit+0x25c>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinHighImp)
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	fc 01       	movw	r30, r24
     f1c:	e7 59       	subi	r30, 0x97	; 151
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	80 81       	ld	r24, Z
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	41 f5       	brne	.+80     	; 0xf76 <DIO_enuInit+0x258>
					{
						// INPUT PIN
						CLR_BIT(DDRA, Loc_u8PinNumber);
     f26:	aa e3       	ldi	r26, 0x3A	; 58
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ea e3       	ldi	r30, 0x3A	; 58
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_enuInit+0x224>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	2a 95       	dec	r18
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_enuInit+0x220>
     f46:	80 95       	com	r24
     f48:	84 23       	and	r24, r20
     f4a:	8c 93       	st	X, r24
						// MODE : HIGH IMPEDANCE
						CLR_BIT(PORTA, Loc_u8PinNumber);
     f4c:	ab e3       	ldi	r26, 0x3B	; 59
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	eb e3       	ldi	r30, 0x3B	; 59
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_enuInit+0x24c>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_enuInit+0x248>
     f6e:	80 95       	com	r24
     f70:	84 23       	and	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_enuInit+0x25c>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
     f76:	85 e0       	ldi	r24, 0x05	; 5
     f78:	8c 83       	std	Y+4, r24	; 0x04
				}
				
				/****************************** PORTB ***************************************/
				case (DIO_enuPORTB):
				// Switching on the pin's Direction [INPUT OR OUTPUT]
				switch (DIO_strPinCfg[Local_Iterator].DIO_strPinDirection)
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	fc 01       	movw	r30, r24
     f86:	e8 59       	subi	r30, 0x98	; 152
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
     f8a:	80 81       	ld	r24, Z
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3a 87       	std	Y+10, r19	; 0x0a
     f92:	29 87       	std	Y+9, r18	; 0x09
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	09 f4       	brne	.+2      	; 0xf9e <DIO_enuInit+0x280>
     f9c:	6c c0       	rjmp	.+216    	; 0x1076 <DIO_enuInit+0x358>
     f9e:	29 85       	ldd	r18, Y+9	; 0x09
     fa0:	3a 85       	ldd	r19, Y+10	; 0x0a
     fa2:	21 30       	cpi	r18, 0x01	; 1
     fa4:	31 05       	cpc	r19, r1
     fa6:	09 f0       	breq	.+2      	; 0xfaa <DIO_enuInit+0x28c>
     fa8:	cd c0       	rjmp	.+410    	; 0x1144 <DIO_enuInit+0x426>
				{
					/**************************** OUTPUT **************************************/
					case (DIO_enuOUTPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputLow)
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	fc 01       	movw	r30, r24
     fb6:	e7 59       	subi	r30, 0x97	; 151
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	80 81       	ld	r24, Z
     fbc:	82 30       	cpi	r24, 0x02	; 2
     fbe:	39 f5       	brne	.+78     	; 0x100e <DIO_enuInit+0x2f0>
					{
						// OUTPUT PIN
						SET_BIT(DDRB, Loc_u8PinNumber);
     fc0:	a7 e3       	ldi	r26, 0x37	; 55
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e3       	ldi	r30, 0x37	; 55
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_enuInit+0x2be>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	2a 95       	dec	r18
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_enuInit+0x2ba>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
						// MODE : LOW
						CLR_BIT(PORTB, Loc_u8PinNumber);
     fe4:	a8 e3       	ldi	r26, 0x38	; 56
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e8 e3       	ldi	r30, 0x38	; 56
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_enuInit+0x2e4>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_enuInit+0x2e0>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	9b c0       	rjmp	.+310    	; 0x1144 <DIO_enuInit+0x426>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputHigh)
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	fc 01       	movw	r30, r24
    101a:	e7 59       	subi	r30, 0x97	; 151
    101c:	fe 4f       	sbci	r31, 0xFE	; 254
    101e:	80 81       	ld	r24, Z
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	31 f5       	brne	.+76     	; 0x1070 <DIO_enuInit+0x352>
					{
						// OUTPUT PIN
						SET_BIT(DDRB, Loc_u8PinNumber);
    1024:	a7 e3       	ldi	r26, 0x37	; 55
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e7 e3       	ldi	r30, 0x37	; 55
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_enuInit+0x322>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	2a 95       	dec	r18
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_enuInit+0x31e>
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
						// MODE : LOW
						SET_BIT(PORTB, Loc_u8PinNumber);
    1048:	a8 e3       	ldi	r26, 0x38	; 56
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e8 e3       	ldi	r30, 0x38	; 56
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_enuInit+0x348>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_enuInit+0x344>
    106a:	84 2b       	or	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	6a c0       	rjmp	.+212    	; 0x1144 <DIO_enuInit+0x426>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    1070:	85 e0       	ldi	r24, 0x05	; 5
    1072:	8c 83       	std	Y+4, r24	; 0x04
    1074:	67 c0       	rjmp	.+206    	; 0x1144 <DIO_enuInit+0x426>
					break;
					
					/**************************** INPUT **************************************/
					case (DIO_enuINPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinPullUp)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	fc 01       	movw	r30, r24
    1082:	e7 59       	subi	r30, 0x97	; 151
    1084:	fe 4f       	sbci	r31, 0xFE	; 254
    1086:	80 81       	ld	r24, Z
    1088:	88 23       	and	r24, r24
    108a:	39 f5       	brne	.+78     	; 0x10da <DIO_enuInit+0x3bc>
					{
						// INPUT PIN
						CLR_BIT(DDRB, Loc_u8PinNumber);
    108c:	a7 e3       	ldi	r26, 0x37	; 55
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e7 e3       	ldi	r30, 0x37	; 55
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_enuInit+0x38a>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	2a 95       	dec	r18
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_enuInit+0x386>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
						// MODE : PULL UP
						SET_BIT(PORTB, Loc_u8PinNumber);
    10b2:	a8 e3       	ldi	r26, 0x38	; 56
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e8 e3       	ldi	r30, 0x38	; 56
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_enuInit+0x3b2>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_enuInit+0x3ae>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	35 c0       	rjmp	.+106    	; 0x1144 <DIO_enuInit+0x426>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinHighImp)
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	fc 01       	movw	r30, r24
    10e6:	e7 59       	subi	r30, 0x97	; 151
    10e8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ea:	80 81       	ld	r24, Z
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	41 f5       	brne	.+80     	; 0x1140 <DIO_enuInit+0x422>
					{
						// INPUT PIN
						CLR_BIT(DDRB, Loc_u8PinNumber);
    10f0:	a7 e3       	ldi	r26, 0x37	; 55
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e7 e3       	ldi	r30, 0x37	; 55
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_enuInit+0x3ee>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	2a 95       	dec	r18
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_enuInit+0x3ea>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
						// MODE : HIGH IMPEDANCE
						CLR_BIT(PORTB, Loc_u8PinNumber);
    1116:	a8 e3       	ldi	r26, 0x38	; 56
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e8 e3       	ldi	r30, 0x38	; 56
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_enuInit+0x416>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_enuInit+0x412>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_enuInit+0x426>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    1140:	85 e0       	ldi	r24, 0x05	; 5
    1142:	8c 83       	std	Y+4, r24	; 0x04
					break;
				}
				/****************************** PORTC ***************************************/
				case (DIO_enuPORTC):
				// Switching on the pin's Direction [INPUT OR OUTPUT]
				switch (DIO_strPinCfg[Local_Iterator].DIO_strPinDirection)
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	fc 01       	movw	r30, r24
    1150:	e8 59       	subi	r30, 0x98	; 152
    1152:	fe 4f       	sbci	r31, 0xFE	; 254
    1154:	80 81       	ld	r24, Z
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	38 87       	std	Y+8, r19	; 0x08
    115c:	2f 83       	std	Y+7, r18	; 0x07
    115e:	8f 81       	ldd	r24, Y+7	; 0x07
    1160:	98 85       	ldd	r25, Y+8	; 0x08
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_enuInit+0x44a>
    1166:	6c c0       	rjmp	.+216    	; 0x1240 <DIO_enuInit+0x522>
    1168:	2f 81       	ldd	r18, Y+7	; 0x07
    116a:	38 85       	ldd	r19, Y+8	; 0x08
    116c:	21 30       	cpi	r18, 0x01	; 1
    116e:	31 05       	cpc	r19, r1
    1170:	09 f0       	breq	.+2      	; 0x1174 <DIO_enuInit+0x456>
    1172:	cd c0       	rjmp	.+410    	; 0x130e <DIO_enuInit+0x5f0>
				{
					/**************************** OUTPUT **************************************/
					case (DIO_enuOUTPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputLow)
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	fc 01       	movw	r30, r24
    1180:	e7 59       	subi	r30, 0x97	; 151
    1182:	fe 4f       	sbci	r31, 0xFE	; 254
    1184:	80 81       	ld	r24, Z
    1186:	82 30       	cpi	r24, 0x02	; 2
    1188:	39 f5       	brne	.+78     	; 0x11d8 <DIO_enuInit+0x4ba>
					{
						// OUTPUT PIN
						SET_BIT(DDRC, Loc_u8PinNumber);
    118a:	a4 e3       	ldi	r26, 0x34	; 52
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e4 e3       	ldi	r30, 0x34	; 52
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_enuInit+0x488>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	2a 95       	dec	r18
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_enuInit+0x484>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
						// MODE : LOW
						CLR_BIT(PORTC, Loc_u8PinNumber);
    11ae:	a5 e3       	ldi	r26, 0x35	; 53
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e5 e3       	ldi	r30, 0x35	; 53
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_enuInit+0x4ae>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_enuInit+0x4aa>
    11d0:	80 95       	com	r24
    11d2:	84 23       	and	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	9b c0       	rjmp	.+310    	; 0x130e <DIO_enuInit+0x5f0>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputHigh)
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	fc 01       	movw	r30, r24
    11e4:	e7 59       	subi	r30, 0x97	; 151
    11e6:	fe 4f       	sbci	r31, 0xFE	; 254
    11e8:	80 81       	ld	r24, Z
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	31 f5       	brne	.+76     	; 0x123a <DIO_enuInit+0x51c>
					{
						// OUTPUT PIN
						SET_BIT(DDRC, Loc_u8PinNumber);
    11ee:	a4 e3       	ldi	r26, 0x34	; 52
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e4 e3       	ldi	r30, 0x34	; 52
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_enuInit+0x4ec>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	2a 95       	dec	r18
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_enuInit+0x4e8>
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
						// MODE : LOW
						SET_BIT(PORTC, Loc_u8PinNumber);
    1212:	a5 e3       	ldi	r26, 0x35	; 53
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e5 e3       	ldi	r30, 0x35	; 53
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_enuInit+0x512>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_enuInit+0x50e>
    1234:	84 2b       	or	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	6a c0       	rjmp	.+212    	; 0x130e <DIO_enuInit+0x5f0>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    123a:	85 e0       	ldi	r24, 0x05	; 5
    123c:	8c 83       	std	Y+4, r24	; 0x04
    123e:	67 c0       	rjmp	.+206    	; 0x130e <DIO_enuInit+0x5f0>
					break;
					
					/**************************** INPUT **************************************/
					case (DIO_enuINPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinPullUp)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	fc 01       	movw	r30, r24
    124c:	e7 59       	subi	r30, 0x97	; 151
    124e:	fe 4f       	sbci	r31, 0xFE	; 254
    1250:	80 81       	ld	r24, Z
    1252:	88 23       	and	r24, r24
    1254:	39 f5       	brne	.+78     	; 0x12a4 <DIO_enuInit+0x586>
					{
						// INPUT PIN
						CLR_BIT(DDRC, Loc_u8PinNumber);
    1256:	a4 e3       	ldi	r26, 0x34	; 52
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e4 e3       	ldi	r30, 0x34	; 52
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_enuInit+0x554>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	2a 95       	dec	r18
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_enuInit+0x550>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
						// MODE : PULL UP
						SET_BIT(PORTC, Loc_u8PinNumber);
    127c:	a5 e3       	ldi	r26, 0x35	; 53
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e5 e3       	ldi	r30, 0x35	; 53
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_enuInit+0x57c>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_enuInit+0x578>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	35 c0       	rjmp	.+106    	; 0x130e <DIO_enuInit+0x5f0>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinHighImp)
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	fc 01       	movw	r30, r24
    12b0:	e7 59       	subi	r30, 0x97	; 151
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	80 81       	ld	r24, Z
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	41 f5       	brne	.+80     	; 0x130a <DIO_enuInit+0x5ec>
					{
						// INPUT PIN
						CLR_BIT(DDRC, Loc_u8PinNumber);
    12ba:	a4 e3       	ldi	r26, 0x34	; 52
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e4 e3       	ldi	r30, 0x34	; 52
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_enuInit+0x5b8>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	2a 95       	dec	r18
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_enuInit+0x5b4>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
						// MODE : HIGH IMPEDANCE
						CLR_BIT(PORTC, Loc_u8PinNumber);
    12e0:	a5 e3       	ldi	r26, 0x35	; 53
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e3       	ldi	r30, 0x35	; 53
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_enuInit+0x5e0>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_enuInit+0x5dc>
    1302:	80 95       	com	r24
    1304:	84 23       	and	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_enuInit+0x5f0>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    130a:	85 e0       	ldi	r24, 0x05	; 5
    130c:	8c 83       	std	Y+4, r24	; 0x04
				}
				
				/****************************** PORTD ***************************************/
				case (DIO_enuPORTD):
				// Switching on the Pin's Direction [INPUT OR OUTPUT]
				switch (DIO_strPinCfg[Local_Iterator].DIO_strPinDirection)
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	fc 01       	movw	r30, r24
    131a:	e8 59       	subi	r30, 0x98	; 152
    131c:	fe 4f       	sbci	r31, 0xFE	; 254
    131e:	80 81       	ld	r24, Z
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	3e 83       	std	Y+6, r19	; 0x06
    1326:	2d 83       	std	Y+5, r18	; 0x05
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	09 f4       	brne	.+2      	; 0x1332 <DIO_enuInit+0x614>
    1330:	6c c0       	rjmp	.+216    	; 0x140a <DIO_enuInit+0x6ec>
    1332:	2d 81       	ldd	r18, Y+5	; 0x05
    1334:	3e 81       	ldd	r19, Y+6	; 0x06
    1336:	21 30       	cpi	r18, 0x01	; 1
    1338:	31 05       	cpc	r19, r1
    133a:	09 f0       	breq	.+2      	; 0x133e <DIO_enuInit+0x620>
    133c:	cf c0       	rjmp	.+414    	; 0x14dc <DIO_enuInit+0x7be>
				{
					/**************************** OUTPUT **************************************/
					case (DIO_enuOUTPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputLow)
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	fc 01       	movw	r30, r24
    134a:	e7 59       	subi	r30, 0x97	; 151
    134c:	fe 4f       	sbci	r31, 0xFE	; 254
    134e:	80 81       	ld	r24, Z
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	39 f5       	brne	.+78     	; 0x13a2 <DIO_enuInit+0x684>
					{
						// OUTPUT PIN
						SET_BIT(DDRD, Loc_u8PinNumber);
    1354:	a1 e3       	ldi	r26, 0x31	; 49
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e1 e3       	ldi	r30, 0x31	; 49
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_enuInit+0x652>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	2a 95       	dec	r18
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_enuInit+0x64e>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
						// MODE : LOW
						CLR_BIT(PORTD, Loc_u8PinNumber);
    1378:	a2 e3       	ldi	r26, 0x32	; 50
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e2 e3       	ldi	r30, 0x32	; 50
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_enuInit+0x678>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_enuInit+0x674>
    139a:	80 95       	com	r24
    139c:	84 23       	and	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	9d c0       	rjmp	.+314    	; 0x14dc <DIO_enuInit+0x7be>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuOutputHigh)
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	fc 01       	movw	r30, r24
    13ae:	e7 59       	subi	r30, 0x97	; 151
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	80 81       	ld	r24, Z
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	31 f5       	brne	.+76     	; 0x1404 <DIO_enuInit+0x6e6>
					{
						// OUTPUT PIN
						SET_BIT(DDRD, Loc_u8PinNumber);
    13b8:	a1 e3       	ldi	r26, 0x31	; 49
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e1 e3       	ldi	r30, 0x31	; 49
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_enuInit+0x6b6>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	2a 95       	dec	r18
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_enuInit+0x6b2>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
						// MODE : LOW
						SET_BIT(PORTD, Loc_u8PinNumber);
    13dc:	a2 e3       	ldi	r26, 0x32	; 50
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e2 e3       	ldi	r30, 0x32	; 50
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_enuInit+0x6dc>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_enuInit+0x6d8>
    13fe:	84 2b       	or	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	6c c0       	rjmp	.+216    	; 0x14dc <DIO_enuInit+0x7be>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    1404:	85 e0       	ldi	r24, 0x05	; 5
    1406:	8c 83       	std	Y+4, r24	; 0x04
    1408:	69 c0       	rjmp	.+210    	; 0x14dc <DIO_enuInit+0x7be>
					break;
					
					/**************************** INPUT **************************************/
					case (DIO_enuINPUT):
					if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinPullUp)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	fc 01       	movw	r30, r24
    1416:	e7 59       	subi	r30, 0x97	; 151
    1418:	fe 4f       	sbci	r31, 0xFE	; 254
    141a:	80 81       	ld	r24, Z
    141c:	88 23       	and	r24, r24
    141e:	39 f5       	brne	.+78     	; 0x146e <DIO_enuInit+0x750>
					{
						// INPUT PIN
						CLR_BIT(DDRD, Loc_u8PinNumber);
    1420:	a1 e3       	ldi	r26, 0x31	; 49
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e1 e3       	ldi	r30, 0x31	; 49
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_enuInit+0x71e>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	2a 95       	dec	r18
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_enuInit+0x71a>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
						// MODE : PULL UP
						SET_BIT(PORTD, Loc_u8PinNumber);
    1446:	a2 e3       	ldi	r26, 0x32	; 50
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e2 e3       	ldi	r30, 0x32	; 50
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_enuInit+0x746>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_enuInit+0x742>
    1468:	84 2b       	or	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	37 c0       	rjmp	.+110    	; 0x14dc <DIO_enuInit+0x7be>
					}
					else if (DIO_strPinCfg[Local_Iterator].DIO_strPinMode == DIO_enuInputPinHighImp)
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	fc 01       	movw	r30, r24
    147a:	e7 59       	subi	r30, 0x97	; 151
    147c:	fe 4f       	sbci	r31, 0xFE	; 254
    147e:	80 81       	ld	r24, Z
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	39 f5       	brne	.+78     	; 0x14d2 <DIO_enuInit+0x7b4>
					{
						// INPUT PIN
						CLR_BIT(DDRD, Loc_u8PinNumber);
    1484:	a1 e3       	ldi	r26, 0x31	; 49
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e1 e3       	ldi	r30, 0x31	; 49
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_enuInit+0x782>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	2a 95       	dec	r18
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_enuInit+0x77e>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
						// MODE : HIGH IMPEDANCE
						SET_BIT(PORTD, Loc_u8PinNumber);
    14aa:	a2 e3       	ldi	r26, 0x32	; 50
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e2 e3       	ldi	r30, 0x32	; 50
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_enuInit+0x7aa>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_enuInit+0x7a6>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <DIO_enuInit+0x7be>
					}
					else
					Local_ErrorStatus = DIO_enuInvalidValue;
    14d2:	85 e0       	ldi	r24, 0x05	; 5
    14d4:	8c 83       	std	Y+4, r24	; 0x04
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_enuInit+0x7be>
					break;
				}
			}
		}
		else
		Local_ErrorStatus = DIO_enuNOK;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	8c 83       	std	Y+4, r24	; 0x04
	
	u8 Local_Iterator;
	u8 Loc_u8PortNumber = 0;
	u8 Loc_u8PinNumber  = 0;
	
	for (Local_Iterator = 0; Local_Iterator < DIO_enuNumberOfPins ; Local_Iterator++)
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	8b 83       	std	Y+3, r24	; 0x03
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	80 32       	cpi	r24, 0x20	; 32
    14e6:	08 f4       	brcc	.+2      	; 0x14ea <DIO_enuInit+0x7cc>
    14e8:	29 cc       	rjmp	.-1966   	; 0xd3c <DIO_enuInit+0x1e>
			}
		}
		else
		Local_ErrorStatus = DIO_enuNOK;
	}
	return Local_ErrorStatus;
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14ec:	2e 96       	adiw	r28, 0x0e	; 14
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_enuSetPin>:
/*    DIO Set PIN Function									  */
/*	  Input  : Pin Number (Range from 0-31)					  */
/*	  Output : DIO_tenuErrorStatus to Report Errors			  */
/***************************************************************/
DIO_tenuErrorStatus DIO_enuSetPin (DIO_tenuPins Cpy_enuPinNumber)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <DIO_enuSetPin+0x6>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <DIO_enuSetPin+0x8>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <DIO_enuSetPin+0xa>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8c 83       	std	Y+4, r24	; 0x04
	DIO_tenuErrorStatus Local_ErrorStatus = DIO_enuOK;      	// Assuming the current status is OK
    150e:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_enuPinNumber /REG_BITS;
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	86 95       	lsr	r24
    1514:	86 95       	lsr	r24
    1516:	86 95       	lsr	r24
    1518:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_enuPinNumber %REG_BITS;
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	87 70       	andi	r24, 0x07	; 7
    151e:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > DIO_enuNumberOfPorts)
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	85 30       	cpi	r24, 0x05	; 5
    1524:	18 f0       	brcs	.+6      	; 0x152c <DIO_enuSetPin+0x2e>
	{
		Local_ErrorStatus = DIO_enuInvalidPortNum;
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	7b c0       	rjmp	.+246    	; 0x1622 <DIO_enuSetPin+0x124>
	}
	else if (Loc_u8PinNumber > DIO_enuNumberOfPins)
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	81 32       	cpi	r24, 0x21	; 33
    1530:	18 f0       	brcs	.+6      	; 0x1538 <DIO_enuSetPin+0x3a>
	{
		Local_ErrorStatus = DIO_enuInvalidPinNum;
    1532:	84 e0       	ldi	r24, 0x04	; 4
    1534:	8b 83       	std	Y+3, r24	; 0x03
    1536:	75 c0       	rjmp	.+234    	; 0x1622 <DIO_enuSetPin+0x124>
	}
	/*******************************************************************/
	else if (Local_ErrorStatus == DIO_enuOK)
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	88 23       	and	r24, r24
    153c:	09 f0       	breq	.+2      	; 0x1540 <DIO_enuSetPin+0x42>
    153e:	6f c0       	rjmp	.+222    	; 0x161e <DIO_enuSetPin+0x120>
	{
		switch(Loc_u8PortNumber)
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	3e 83       	std	Y+6, r19	; 0x06
    1548:	2d 83       	std	Y+5, r18	; 0x05
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	9e 81       	ldd	r25, Y+6	; 0x06
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	91 05       	cpc	r25, r1
    1552:	49 f1       	breq	.+82     	; 0x15a6 <DIO_enuSetPin+0xa8>
    1554:	2d 81       	ldd	r18, Y+5	; 0x05
    1556:	3e 81       	ldd	r19, Y+6	; 0x06
    1558:	22 30       	cpi	r18, 0x02	; 2
    155a:	31 05       	cpc	r19, r1
    155c:	2c f4       	brge	.+10     	; 0x1568 <DIO_enuSetPin+0x6a>
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	61 f0       	breq	.+24     	; 0x157e <DIO_enuSetPin+0x80>
    1566:	5d c0       	rjmp	.+186    	; 0x1622 <DIO_enuSetPin+0x124>
    1568:	2d 81       	ldd	r18, Y+5	; 0x05
    156a:	3e 81       	ldd	r19, Y+6	; 0x06
    156c:	22 30       	cpi	r18, 0x02	; 2
    156e:	31 05       	cpc	r19, r1
    1570:	71 f1       	breq	.+92     	; 0x15ce <DIO_enuSetPin+0xd0>
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	9e 81       	ldd	r25, Y+6	; 0x06
    1576:	83 30       	cpi	r24, 0x03	; 3
    1578:	91 05       	cpc	r25, r1
    157a:	e9 f1       	breq	.+122    	; 0x15f6 <DIO_enuSetPin+0xf8>
    157c:	52 c0       	rjmp	.+164    	; 0x1622 <DIO_enuSetPin+0x124>
		{
			case DIO_enuPORTA:
			SET_BIT(PORTA, Loc_u8PinNumber);
    157e:	ab e3       	ldi	r26, 0x3B	; 59
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	eb e3       	ldi	r30, 0x3B	; 59
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_enuSetPin+0x9e>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_enuSetPin+0x9a>
    15a0:	84 2b       	or	r24, r20
    15a2:	8c 93       	st	X, r24
    15a4:	3e c0       	rjmp	.+124    	; 0x1622 <DIO_enuSetPin+0x124>
			break;
			
			case DIO_enuPORTB:
			SET_BIT(PORTB, Loc_u8PinNumber);
    15a6:	a8 e3       	ldi	r26, 0x38	; 56
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e8 e3       	ldi	r30, 0x38	; 56
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_enuSetPin+0xc6>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_enuSetPin+0xc2>
    15c8:	84 2b       	or	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	2a c0       	rjmp	.+84     	; 0x1622 <DIO_enuSetPin+0x124>
			break;
			
			case DIO_enuPORTC:
			SET_BIT(PORTC, Loc_u8PinNumber);
    15ce:	a5 e3       	ldi	r26, 0x35	; 53
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e5 e3       	ldi	r30, 0x35	; 53
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_enuSetPin+0xee>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_enuSetPin+0xea>
    15f0:	84 2b       	or	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	16 c0       	rjmp	.+44     	; 0x1622 <DIO_enuSetPin+0x124>
			break;
			
			case DIO_enuPORTD:
			SET_BIT(PORTD, Loc_u8PinNumber);
    15f6:	a2 e3       	ldi	r26, 0x32	; 50
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e2 e3       	ldi	r30, 0x32	; 50
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_enuSetPin+0x116>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_enuSetPin+0x112>
    1618:	84 2b       	or	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_enuSetPin+0x124>
			break;
		}
	}
	else
	{
		Local_ErrorStatus = DIO_enuNOK;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_ErrorStatus;
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1624:	26 96       	adiw	r28, 0x06	; 6
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <DIO_enuClearPin>:
/*    DIO Clear Pin Function									*/
/*	  Input  : Pin Number (Range from 0-31)						*/
/*	  Output : DIO_tenuErrorStatus to Report Errors				*/
/****************************************************************/
DIO_tenuErrorStatus DIO_enuClearPin (DIO_tenuPins Cpy_enuPinNumber)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <DIO_enuClearPin+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_enuClearPin+0x8>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_enuClearPin+0xa>
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	8c 83       	std	Y+4, r24	; 0x04
	DIO_tenuErrorStatus Local_ErrorStatus = DIO_enuOK;      	// Assuming the current status is OK
    1646:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_enuPinNumber /REG_BITS;
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	86 95       	lsr	r24
    164c:	86 95       	lsr	r24
    164e:	86 95       	lsr	r24
    1650:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_enuPinNumber %REG_BITS;
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	87 70       	andi	r24, 0x07	; 7
    1656:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > DIO_enuNumberOfPorts)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	85 30       	cpi	r24, 0x05	; 5
    165c:	18 f0       	brcs	.+6      	; 0x1664 <DIO_enuClearPin+0x2e>
	{
		Local_ErrorStatus = DIO_enuInvalidPortNum;
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	8b 83       	std	Y+3, r24	; 0x03
    1662:	80 c0       	rjmp	.+256    	; 0x1764 <DIO_enuClearPin+0x12e>
	}
	else if (Loc_u8PinNumber > DIO_enuNumberOfPins)
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	81 32       	cpi	r24, 0x21	; 33
    1668:	18 f0       	brcs	.+6      	; 0x1670 <DIO_enuClearPin+0x3a>
	{
		Local_ErrorStatus = DIO_enuInvalidPinNum;
    166a:	84 e0       	ldi	r24, 0x04	; 4
    166c:	8b 83       	std	Y+3, r24	; 0x03
    166e:	7a c0       	rjmp	.+244    	; 0x1764 <DIO_enuClearPin+0x12e>
	}
	/*******************************************************************/
	else if (Local_ErrorStatus == DIO_enuOK)
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	88 23       	and	r24, r24
    1674:	09 f0       	breq	.+2      	; 0x1678 <DIO_enuClearPin+0x42>
    1676:	74 c0       	rjmp	.+232    	; 0x1760 <DIO_enuClearPin+0x12a>
	{
		switch(Loc_u8PortNumber)
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3e 83       	std	Y+6, r19	; 0x06
    1680:	2d 83       	std	Y+5, r18	; 0x05
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	91 05       	cpc	r25, r1
    168a:	59 f1       	breq	.+86     	; 0x16e2 <DIO_enuClearPin+0xac>
    168c:	2d 81       	ldd	r18, Y+5	; 0x05
    168e:	3e 81       	ldd	r19, Y+6	; 0x06
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	2c f4       	brge	.+10     	; 0x16a0 <DIO_enuClearPin+0x6a>
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	69 f0       	breq	.+26     	; 0x16b8 <DIO_enuClearPin+0x82>
    169e:	62 c0       	rjmp	.+196    	; 0x1764 <DIO_enuClearPin+0x12e>
    16a0:	2d 81       	ldd	r18, Y+5	; 0x05
    16a2:	3e 81       	ldd	r19, Y+6	; 0x06
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	89 f1       	breq	.+98     	; 0x170c <DIO_enuClearPin+0xd6>
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	91 05       	cpc	r25, r1
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <DIO_enuClearPin+0x80>
    16b4:	40 c0       	rjmp	.+128    	; 0x1736 <DIO_enuClearPin+0x100>
    16b6:	56 c0       	rjmp	.+172    	; 0x1764 <DIO_enuClearPin+0x12e>
		{
			case DIO_enuPORTA:
			CLR_BIT(PORTA, Loc_u8PinNumber);
    16b8:	ab e3       	ldi	r26, 0x3B	; 59
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	eb e3       	ldi	r30, 0x3B	; 59
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_enuClearPin+0xa0>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <DIO_enuClearPin+0x9c>
    16da:	80 95       	com	r24
    16dc:	84 23       	and	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	41 c0       	rjmp	.+130    	; 0x1764 <DIO_enuClearPin+0x12e>
			break;
			
			case DIO_enuPORTB:
			CLR_BIT(PORTB, Loc_u8PinNumber);
    16e2:	a8 e3       	ldi	r26, 0x38	; 56
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e8 e3       	ldi	r30, 0x38	; 56
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_enuClearPin+0xca>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_enuClearPin+0xc6>
    1704:	80 95       	com	r24
    1706:	84 23       	and	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	2c c0       	rjmp	.+88     	; 0x1764 <DIO_enuClearPin+0x12e>
			break;
			
			case DIO_enuPORTC:
			CLR_BIT(PORTC, Loc_u8PinNumber);
    170c:	a5 e3       	ldi	r26, 0x35	; 53
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e5 e3       	ldi	r30, 0x35	; 53
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_enuClearPin+0xf4>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_enuClearPin+0xf0>
    172e:	80 95       	com	r24
    1730:	84 23       	and	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	17 c0       	rjmp	.+46     	; 0x1764 <DIO_enuClearPin+0x12e>
			break;
			
			case DIO_enuPORTD:
			CLR_BIT(PORTD, Loc_u8PinNumber);
    1736:	a2 e3       	ldi	r26, 0x32	; 50
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e2 e3       	ldi	r30, 0x32	; 50
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_enuClearPin+0x11e>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_enuClearPin+0x11a>
    1758:	80 95       	com	r24
    175a:	84 23       	and	r24, r20
    175c:	8c 93       	st	X, r24
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_enuClearPin+0x12e>
			break;
		}
	}
	else
	{
		Local_ErrorStatus = DIO_enuNOK;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_ErrorStatus;
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1766:	26 96       	adiw	r28, 0x06	; 6
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <DIO_enuGetPin>:
/*    DIO Get Pin Function																		*/
/*	  Inputs : Pin Number (Range from 0-31), The Address of the Pin Value that needs to be get  */
/*	  Output : DIO_tenuErrorStatus to Report Errors												*/
/************************************************************************************************/
DIO_tenuErrorStatus DIO_enuGetPin (DIO_tenuPins Cpy_enuPinNumber, u8 *Add_u8PinValue)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	28 97       	sbiw	r28, 0x08	; 8
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	8c 83       	std	Y+4, r24	; 0x04
    178e:	7e 83       	std	Y+6, r23	; 0x06
    1790:	6d 83       	std	Y+5, r22	; 0x05
	DIO_tenuErrorStatus Local_ErrorStatus = DIO_enuOK;      	// Assuming the current status is OK
    1792:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_enuPinNumber /REG_BITS;
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	86 95       	lsr	r24
    1798:	86 95       	lsr	r24
    179a:	86 95       	lsr	r24
    179c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_enuPinNumber %REG_BITS;
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	87 70       	andi	r24, 0x07	; 7
    17a2:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > DIO_enuNumberOfPorts)
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	85 30       	cpi	r24, 0x05	; 5
    17a8:	18 f0       	brcs	.+6      	; 0x17b0 <DIO_enuGetPin+0x38>
	{
		Local_ErrorStatus = DIO_enuInvalidPortNum;
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	8b 83       	std	Y+3, r24	; 0x03
    17ae:	93 c0       	rjmp	.+294    	; 0x18d6 <DIO_enuGetPin+0x15e>
	}
	else if (Loc_u8PinNumber > DIO_enuNumberOfPins)
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	81 32       	cpi	r24, 0x21	; 33
    17b4:	18 f0       	brcs	.+6      	; 0x17bc <DIO_enuGetPin+0x44>
	{
		Local_ErrorStatus = DIO_enuInvalidPinNum;
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	8b 83       	std	Y+3, r24	; 0x03
    17ba:	8d c0       	rjmp	.+282    	; 0x18d6 <DIO_enuGetPin+0x15e>
	}
	else if (Add_u8PinValue == NULL)
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	19 f4       	brne	.+6      	; 0x17ca <DIO_enuGetPin+0x52>
	{
		Local_ErrorStatus = DIO_enuNULLPtr;
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	8b 83       	std	Y+3, r24	; 0x03
    17c8:	86 c0       	rjmp	.+268    	; 0x18d6 <DIO_enuGetPin+0x15e>
	}
	else if (Local_ErrorStatus == DIO_enuOK)
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	88 23       	and	r24, r24
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <DIO_enuGetPin+0x5a>
    17d0:	80 c0       	rjmp	.+256    	; 0x18d2 <DIO_enuGetPin+0x15a>
	{
		switch(Loc_u8PortNumber)
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	38 87       	std	Y+8, r19	; 0x08
    17da:	2f 83       	std	Y+7, r18	; 0x07
    17dc:	8f 81       	ldd	r24, Y+7	; 0x07
    17de:	98 85       	ldd	r25, Y+8	; 0x08
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	91 05       	cpc	r25, r1
    17e4:	71 f1       	breq	.+92     	; 0x1842 <DIO_enuGetPin+0xca>
    17e6:	2f 81       	ldd	r18, Y+7	; 0x07
    17e8:	38 85       	ldd	r19, Y+8	; 0x08
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	2c f4       	brge	.+10     	; 0x17fa <DIO_enuGetPin+0x82>
    17f0:	8f 81       	ldd	r24, Y+7	; 0x07
    17f2:	98 85       	ldd	r25, Y+8	; 0x08
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	69 f0       	breq	.+26     	; 0x1812 <DIO_enuGetPin+0x9a>
    17f8:	6e c0       	rjmp	.+220    	; 0x18d6 <DIO_enuGetPin+0x15e>
    17fa:	2f 81       	ldd	r18, Y+7	; 0x07
    17fc:	38 85       	ldd	r19, Y+8	; 0x08
    17fe:	22 30       	cpi	r18, 0x02	; 2
    1800:	31 05       	cpc	r19, r1
    1802:	b9 f1       	breq	.+110    	; 0x1872 <DIO_enuGetPin+0xfa>
    1804:	8f 81       	ldd	r24, Y+7	; 0x07
    1806:	98 85       	ldd	r25, Y+8	; 0x08
    1808:	83 30       	cpi	r24, 0x03	; 3
    180a:	91 05       	cpc	r25, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <DIO_enuGetPin+0x98>
    180e:	49 c0       	rjmp	.+146    	; 0x18a2 <DIO_enuGetPin+0x12a>
    1810:	62 c0       	rjmp	.+196    	; 0x18d6 <DIO_enuGetPin+0x15e>
		{
			case DIO_enuPORTA:
			*Add_u8PinValue = GET_BIT(PINA, Loc_u8PinNumber);
    1812:	a9 e3       	ldi	r26, 0x39	; 57
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e9 e3       	ldi	r30, 0x39	; 57
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_enuGetPin+0xb8>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_enuGetPin+0xb4>
    1834:	84 23       	and	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	8c 91       	ld	r24, X
    183a:	ed 81       	ldd	r30, Y+5	; 0x05
    183c:	fe 81       	ldd	r31, Y+6	; 0x06
    183e:	80 83       	st	Z, r24
    1840:	4a c0       	rjmp	.+148    	; 0x18d6 <DIO_enuGetPin+0x15e>
			break;
			
			case DIO_enuPORTB:
			*Add_u8PinValue = GET_BIT(PINB, Loc_u8PinNumber);
    1842:	a6 e3       	ldi	r26, 0x36	; 54
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e6 e3       	ldi	r30, 0x36	; 54
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_enuGetPin+0xe8>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_enuGetPin+0xe4>
    1864:	84 23       	and	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	8c 91       	ld	r24, X
    186a:	ed 81       	ldd	r30, Y+5	; 0x05
    186c:	fe 81       	ldd	r31, Y+6	; 0x06
    186e:	80 83       	st	Z, r24
    1870:	32 c0       	rjmp	.+100    	; 0x18d6 <DIO_enuGetPin+0x15e>
			break;
			
			case DIO_enuPORTC:
			*Add_u8PinValue = GET_BIT(PINC, Loc_u8PinNumber);
    1872:	a3 e3       	ldi	r26, 0x33	; 51
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e3 e3       	ldi	r30, 0x33	; 51
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_enuGetPin+0x118>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <DIO_enuGetPin+0x114>
    1894:	84 23       	and	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	8c 91       	ld	r24, X
    189a:	ed 81       	ldd	r30, Y+5	; 0x05
    189c:	fe 81       	ldd	r31, Y+6	; 0x06
    189e:	80 83       	st	Z, r24
    18a0:	1a c0       	rjmp	.+52     	; 0x18d6 <DIO_enuGetPin+0x15e>
			break;
			
			case DIO_enuPORTD:
			*Add_u8PinValue = GET_BIT(PIND, Loc_u8PinNumber);
    18a2:	a0 e3       	ldi	r26, 0x30	; 48
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e0 e3       	ldi	r30, 0x30	; 48
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <DIO_enuGetPin+0x148>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <DIO_enuGetPin+0x144>
    18c4:	84 23       	and	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	8c 91       	ld	r24, X
    18ca:	ed 81       	ldd	r30, Y+5	; 0x05
    18cc:	fe 81       	ldd	r31, Y+6	; 0x06
    18ce:	80 83       	st	Z, r24
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_enuGetPin+0x15e>
			break;
		}
	}
	else
	{
		Local_ErrorStatus = DIO_enuNOK;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return Local_ErrorStatus;
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18d8:	28 96       	adiw	r28, 0x08	; 8
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <DIO_enuSetPort>:
/*    DIO Get Port Function																		*/
/*	  Inputs : Port Number (Range from 0-3), The Address of the Port Value that needs to be get */
/*	  Output : DIO_tenuErrorStatus to Report Errors												*/
/************************************************************************************************/
DIO_tenuErrorStatus DIO_enuSetPort (DIO_tenuPort Cpy_enuPortNumber, u8 Cpy_AssignedPortVal)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <DIO_enuSetPort+0x6>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <DIO_enuSetPort+0x8>
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    18fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_ErrorStatus = DIO_enuOK;            // Setting Status to be OK by default
    18fc:	19 82       	std	Y+1, r1	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Cpy_enuPortNumber > DIO_enuPORTD)
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	84 30       	cpi	r24, 0x04	; 4
    1902:	18 f0       	brcs	.+6      	; 0x190a <DIO_enuSetPort+0x20>
	{
		Local_ErrorStatus = DIO_enuInvalidPortNum;
    1904:	83 e0       	ldi	r24, 0x03	; 3
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	35 c0       	rjmp	.+106    	; 0x1974 <DIO_enuSetPort+0x8a>
	}

	else if (Local_ErrorStatus == DIO_enuOK)
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	88 23       	and	r24, r24
    190e:	91 f5       	brne	.+100    	; 0x1974 <DIO_enuSetPort+0x8a>
	{
		switch(Cpy_enuPortNumber)
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	3d 83       	std	Y+5, r19	; 0x05
    1918:	2c 83       	std	Y+4, r18	; 0x04
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 05       	cpc	r25, r1
    1922:	d1 f0       	breq	.+52     	; 0x1958 <DIO_enuSetPort+0x6e>
    1924:	2c 81       	ldd	r18, Y+4	; 0x04
    1926:	3d 81       	ldd	r19, Y+5	; 0x05
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	2c f4       	brge	.+10     	; 0x1938 <DIO_enuSetPort+0x4e>
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	9d 81       	ldd	r25, Y+5	; 0x05
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	61 f0       	breq	.+24     	; 0x194e <DIO_enuSetPort+0x64>
    1936:	1e c0       	rjmp	.+60     	; 0x1974 <DIO_enuSetPort+0x8a>
    1938:	2c 81       	ldd	r18, Y+4	; 0x04
    193a:	3d 81       	ldd	r19, Y+5	; 0x05
    193c:	22 30       	cpi	r18, 0x02	; 2
    193e:	31 05       	cpc	r19, r1
    1940:	81 f0       	breq	.+32     	; 0x1962 <DIO_enuSetPort+0x78>
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	83 30       	cpi	r24, 0x03	; 3
    1948:	91 05       	cpc	r25, r1
    194a:	81 f0       	breq	.+32     	; 0x196c <DIO_enuSetPort+0x82>
    194c:	13 c0       	rjmp	.+38     	; 0x1974 <DIO_enuSetPort+0x8a>
		{
			case DIO_enuPORTA:
			PORTA=Cpy_AssignedPortVal;
    194e:	eb e3       	ldi	r30, 0x3B	; 59
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	80 83       	st	Z, r24
    1956:	0e c0       	rjmp	.+28     	; 0x1974 <DIO_enuSetPort+0x8a>
			break;
			
			case DIO_enuPORTB:
			PORTB=Cpy_AssignedPortVal;
    1958:	e8 e3       	ldi	r30, 0x38	; 56
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	80 83       	st	Z, r24
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <DIO_enuSetPort+0x8a>
			break;
			
			case DIO_enuPORTC:
			PORTC=Cpy_AssignedPortVal;
    1962:	e5 e3       	ldi	r30, 0x35	; 53
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	80 83       	st	Z, r24
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <DIO_enuSetPort+0x8a>
			break;
			
			case DIO_enuPORTD:
			PORTD=Cpy_AssignedPortVal;
    196c:	e2 e3       	ldi	r30, 0x32	; 50
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	80 83       	st	Z, r24
			default :
			break;
		}
	}
	
	return Local_ErrorStatus;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <DIO_enuSetPinValue>:
/*			   & Value (HIGH or LOW							  */
/*	  Output : DIO_tenuErrorStatus to Report Errors			  */
/***************************************************************/
/* To be used in Keypad Driver */
DIO_tenuErrorStatus DIO_enuSetPinValue (DIO_tenuPins Cpy_enuPinNumber, DIO_tenuPinMode Cpy_enuPinValue)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	27 97       	sbiw	r28, 0x07	; 7
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	8c 83       	std	Y+4, r24	; 0x04
    199c:	6d 83       	std	Y+5, r22	; 0x05
	DIO_tenuErrorStatus Local_ErrorStatus = DIO_enuOK;
    199e:	1b 82       	std	Y+3, r1	; 0x03
	
	u8 Loc_u8PortNumber = Cpy_enuPinNumber /REG_BITS;
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	86 95       	lsr	r24
    19a4:	86 95       	lsr	r24
    19a6:	86 95       	lsr	r24
    19a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber  = Cpy_enuPinNumber %REG_BITS;
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	87 70       	andi	r24, 0x07	; 7
    19ae:	89 83       	std	Y+1, r24	; 0x01
	
	/**************************** VALIDATION ***************************/
	if(Loc_u8PortNumber > DIO_enuNumberOfPorts)
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	85 30       	cpi	r24, 0x05	; 5
    19b4:	18 f0       	brcs	.+6      	; 0x19bc <DIO_enuSetPinValue+0x36>
	{
		Local_ErrorStatus = DIO_enuInvalidPortNum;
    19b6:	83 e0       	ldi	r24, 0x03	; 3
    19b8:	8b 83       	std	Y+3, r24	; 0x03
    19ba:	f2 c0       	rjmp	.+484    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
	}
	else if (Loc_u8PinNumber > DIO_enuNumberOfPins)
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	81 32       	cpi	r24, 0x21	; 33
    19c0:	18 f0       	brcs	.+6      	; 0x19c8 <DIO_enuSetPinValue+0x42>
	{
		Local_ErrorStatus = DIO_enuInvalidPinNum;
    19c2:	84 e0       	ldi	r24, 0x04	; 4
    19c4:	8b 83       	std	Y+3, r24	; 0x03
    19c6:	ec c0       	rjmp	.+472    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
	}
	else
	{
		switch (Loc_u8PortNumber)
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	3f 83       	std	Y+7, r19	; 0x07
    19d0:	2e 83       	std	Y+6, r18	; 0x06
    19d2:	8e 81       	ldd	r24, Y+6	; 0x06
    19d4:	9f 81       	ldd	r25, Y+7	; 0x07
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	09 f4       	brne	.+2      	; 0x19de <DIO_enuSetPinValue+0x58>
    19dc:	49 c0       	rjmp	.+146    	; 0x1a70 <DIO_enuSetPinValue+0xea>
    19de:	2e 81       	ldd	r18, Y+6	; 0x06
    19e0:	3f 81       	ldd	r19, Y+7	; 0x07
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <DIO_enuSetPinValue+0x6c>
    19e8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ea:	9f 81       	ldd	r25, Y+7	; 0x07
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	71 f0       	breq	.+28     	; 0x1a0c <DIO_enuSetPinValue+0x86>
    19f0:	d5 c0       	rjmp	.+426    	; 0x1b9c <DIO_enuSetPinValue+0x216>
    19f2:	2e 81       	ldd	r18, Y+6	; 0x06
    19f4:	3f 81       	ldd	r19, Y+7	; 0x07
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	09 f4       	brne	.+2      	; 0x19fe <DIO_enuSetPinValue+0x78>
    19fc:	6b c0       	rjmp	.+214    	; 0x1ad4 <DIO_enuSetPinValue+0x14e>
    19fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1a00:	9f 81       	ldd	r25, Y+7	; 0x07
    1a02:	83 30       	cpi	r24, 0x03	; 3
    1a04:	91 05       	cpc	r25, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <DIO_enuSetPinValue+0x84>
    1a08:	97 c0       	rjmp	.+302    	; 0x1b38 <DIO_enuSetPinValue+0x1b2>
    1a0a:	c8 c0       	rjmp	.+400    	; 0x1b9c <DIO_enuSetPinValue+0x216>
		{	
			case DIO_enuPORTA:
				if (Cpy_enuPinValue == DIO_enuOutputHigh)
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	a1 f4       	brne	.+40     	; 0x1a3a <DIO_enuSetPinValue+0xb4>
				{
					SET_BIT(PORTA,Loc_u8PinNumber);
    1a12:	ab e3       	ldi	r26, 0x3B	; 59
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	eb e3       	ldi	r30, 0x3B	; 59
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_enuSetPinValue+0xaa>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_enuSetPinValue+0xa6>
    1a34:	84 2b       	or	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	b3 c0       	rjmp	.+358    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				else if (Cpy_enuPinValue == DIO_enuOutputLow)
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	82 30       	cpi	r24, 0x02	; 2
    1a3e:	a9 f4       	brne	.+42     	; 0x1a6a <DIO_enuSetPinValue+0xe4>
				{
					CLR_BIT(PORTA,Loc_u8PinNumber);
    1a40:	ab e3       	ldi	r26, 0x3B	; 59
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	eb e3       	ldi	r30, 0x3B	; 59
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_enuSetPinValue+0xd8>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <DIO_enuSetPinValue+0xd4>
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	9b c0       	rjmp	.+310    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				else
				{
					Local_ErrorStatus = DIO_enuNOK;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    1a6e:	98 c0       	rjmp	.+304    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				break;
			
			case DIO_enuPORTB:
				if (Cpy_enuPinValue == DIO_enuOutputHigh)
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	83 30       	cpi	r24, 0x03	; 3
    1a74:	a1 f4       	brne	.+40     	; 0x1a9e <DIO_enuSetPinValue+0x118>
				{
					SET_BIT(PORTB,Loc_u8PinNumber);
    1a76:	a8 e3       	ldi	r26, 0x38	; 56
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e8 e3       	ldi	r30, 0x38	; 56
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	48 2f       	mov	r20, r24
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 2e       	mov	r0, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_enuSetPinValue+0x10e>
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	0a 94       	dec	r0
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <DIO_enuSetPinValue+0x10a>
    1a98:	84 2b       	or	r24, r20
    1a9a:	8c 93       	st	X, r24
    1a9c:	81 c0       	rjmp	.+258    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				else if (Cpy_enuPinValue == DIO_enuOutputLow)
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	82 30       	cpi	r24, 0x02	; 2
    1aa2:	a9 f4       	brne	.+42     	; 0x1ace <DIO_enuSetPinValue+0x148>
				{
					CLR_BIT(PORTB,Loc_u8PinNumber);
    1aa4:	a8 e3       	ldi	r26, 0x38	; 56
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e8 e3       	ldi	r30, 0x38	; 56
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <DIO_enuSetPinValue+0x13c>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <DIO_enuSetPinValue+0x138>
    1ac6:	80 95       	com	r24
    1ac8:	84 23       	and	r24, r20
    1aca:	8c 93       	st	X, r24
    1acc:	69 c0       	rjmp	.+210    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				else
				{
					Local_ErrorStatus = DIO_enuNOK;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	8b 83       	std	Y+3, r24	; 0x03
    1ad2:	66 c0       	rjmp	.+204    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				break;
			
			
			case DIO_enuPORTC:
				if (Cpy_enuPinValue == DIO_enuOutputHigh)
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	83 30       	cpi	r24, 0x03	; 3
    1ad8:	a1 f4       	brne	.+40     	; 0x1b02 <DIO_enuSetPinValue+0x17c>
				{
					SET_BIT(PORTC,Loc_u8PinNumber);
    1ada:	a5 e3       	ldi	r26, 0x35	; 53
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e5 e3       	ldi	r30, 0x35	; 53
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <DIO_enuSetPinValue+0x172>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <DIO_enuSetPinValue+0x16e>
    1afc:	84 2b       	or	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	4f c0       	rjmp	.+158    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				else if (Cpy_enuPinValue == DIO_enuOutputLow)
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	82 30       	cpi	r24, 0x02	; 2
    1b06:	a9 f4       	brne	.+42     	; 0x1b32 <DIO_enuSetPinValue+0x1ac>
				{
					CLR_BIT(PORTC,Loc_u8PinNumber);
    1b08:	a5 e3       	ldi	r26, 0x35	; 53
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e5 e3       	ldi	r30, 0x35	; 53
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <DIO_enuSetPinValue+0x1a0>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <DIO_enuSetPinValue+0x19c>
    1b2a:	80 95       	com	r24
    1b2c:	84 23       	and	r24, r20
    1b2e:	8c 93       	st	X, r24
    1b30:	37 c0       	rjmp	.+110    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				else
				{
					Local_ErrorStatus = DIO_enuNOK;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	8b 83       	std	Y+3, r24	; 0x03
    1b36:	34 c0       	rjmp	.+104    	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				break;
			
			case DIO_enuPORTD:
				if (Cpy_enuPinValue == DIO_enuOutputHigh)
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	a1 f4       	brne	.+40     	; 0x1b66 <DIO_enuSetPinValue+0x1e0>
				{
					SET_BIT(PORTD,Loc_u8PinNumber);
    1b3e:	a2 e3       	ldi	r26, 0x32	; 50
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e2 e3       	ldi	r30, 0x32	; 50
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	48 2f       	mov	r20, r24
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	02 2e       	mov	r0, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <DIO_enuSetPinValue+0x1d6>
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	0a 94       	dec	r0
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <DIO_enuSetPinValue+0x1d2>
    1b60:	84 2b       	or	r24, r20
    1b62:	8c 93       	st	X, r24
    1b64:	1d c0       	rjmp	.+58     	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				else if (Cpy_enuPinValue == DIO_enuOutputLow)
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	a9 f4       	brne	.+42     	; 0x1b96 <DIO_enuSetPinValue+0x210>
				{
					CLR_BIT(PORTD,Loc_u8PinNumber);
    1b6c:	a2 e3       	ldi	r26, 0x32	; 50
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e2 e3       	ldi	r30, 0x32	; 50
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_enuSetPinValue+0x204>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_enuSetPinValue+0x200>
    1b8e:	80 95       	com	r24
    1b90:	84 23       	and	r24, r20
    1b92:	8c 93       	st	X, r24
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				else
				{
					Local_ErrorStatus = DIO_enuNOK;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	8b 83       	std	Y+3, r24	; 0x03
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <DIO_enuSetPinValue+0x21a>
				}
				break;
				
			default:
				Local_ErrorStatus = DIO_enuInvalidPortNum;		
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	
	return Local_ErrorStatus;
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	27 96       	adiw	r28, 0x07	; 7
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <GIE_enuInit_EnableGIE>:
/*    GIE Init Function											*/
/*	  Input  : void												*/
/*	  Output : GIE_tenuErrorStatus to Report Errors				*/
/****************************************************************/
GIE_tenuErrorStatus GIE_enuInit_EnableGIE (void)
{	
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <GIE_enuInit_EnableGIE+0x6>
    1bba:	0f 92       	push	r0
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
	GIE_tenuErrorStatus LocalErrorStatus = GIE_enuOK;
    1bc0:	1a 82       	std	Y+2, r1	; 0x02
	
	u8 Check_Status = GET_BIT(SREG,SREG_GIE_Pin);
    1bc2:	af e5       	ldi	r26, 0x5F	; 95
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	ef e5       	ldi	r30, 0x5F	; 95
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	80 78       	andi	r24, 0x80	; 128
    1bce:	8c 93       	st	X, r24
    1bd0:	8c 91       	ld	r24, X
    1bd2:	89 83       	std	Y+1, r24	; 0x01
	
	if (Check_Status != 1)
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	51 f0       	breq	.+20     	; 0x1bee <GIE_enuInit_EnableGIE+0x3a>
		// Setting the GIE at Bit #7 [GIE = 1]
		SET_BIT(SREG,SREG_GIE_Pin);
    1bda:	af e5       	ldi	r26, 0x5F	; 95
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	ef e5       	ldi	r30, 0x5F	; 95
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	80 68       	ori	r24, 0x80	; 128
    1be6:	8c 93       	st	X, r24
	
	else 
		return GIE_enuNOK;
		
	return LocalErrorStatus;
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <GIE_enuInit_EnableGIE+0x3e>
	if (Check_Status != 1)
		// Setting the GIE at Bit #7 [GIE = 1]
		SET_BIT(SREG,SREG_GIE_Pin);
	
	else 
		return GIE_enuNOK;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
		
	return LocalErrorStatus;
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <GIE_enuInit_DisbaleGIE>:
/*      GIE Disable Function									*/
/*		Input  : Void											*/
/*		Output : GIE_tenuErrorStatus to Report Errors		   	*/
/****************************************************************/
GIE_tenuErrorStatus GIE_enuInit_DisbaleGIE (void)
{	
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <GIE_enuInit_DisbaleGIE+0x6>
    1c06:	0f 92       	push	r0
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
	GIE_tenuErrorStatus LocalErrorStatus = GIE_enuOK;
    1c0c:	1a 82       	std	Y+2, r1	; 0x02
	
	u8 Check_Status = GET_BIT(SREG,SREG_GIE_Pin);
    1c0e:	af e5       	ldi	r26, 0x5F	; 95
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ef e5       	ldi	r30, 0x5F	; 95
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 78       	andi	r24, 0x80	; 128
    1c1a:	8c 93       	st	X, r24
    1c1c:	8c 91       	ld	r24, X
    1c1e:	89 83       	std	Y+1, r24	; 0x01
	
	if (Check_Status != 0)
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	88 23       	and	r24, r24
    1c24:	51 f0       	breq	.+20     	; 0x1c3a <GIE_enuInit_DisbaleGIE+0x3a>
		// Clearing the GIE at Bit #7 [GIE = 0]
		CLR_BIT(SREG,SREG_GIE_Pin);
    1c26:	af e5       	ldi	r26, 0x5F	; 95
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	ef e5       	ldi	r30, 0x5F	; 95
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	8f 77       	andi	r24, 0x7F	; 127
    1c32:	8c 93       	st	X, r24
	
	else
		return GIE_enuNOK;
	
	return LocalErrorStatus;	
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	8b 83       	std	Y+3, r24	; 0x03
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <GIE_enuInit_DisbaleGIE+0x3e>
	if (Check_Status != 0)
		// Clearing the GIE at Bit #7 [GIE = 0]
		CLR_BIT(SREG,SREG_GIE_Pin);
	
	else
		return GIE_enuNOK;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
	
	return LocalErrorStatus;	
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <SPI_enuInit>:

static u8 Cpy_u8DataTransfer ;

/****************************************************************/
SPI_enuErrorStatus SPI_enuInit (void)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	0f 92       	push	r0
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
	SPI_enuErrorStatus LocalErrorStatus = SPI_enuOK;
    1c56:	19 82       	std	Y+1, r1	; 0x01

	/*********** SPI EN/DS ****************/
	if (SPI_STATE == SPI_EN)
	{
		SET_BIT(SPI_SPCR,SPI_enuSPE);
    1c58:	ad e2       	ldi	r26, 0x2D	; 45
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ed e2       	ldi	r30, 0x2D	; 45
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 64       	ori	r24, 0x40	; 64
    1c64:	8c 93       	st	X, r24
		SET_BIT(SPI_SPCR,SPI_enuSPIE);
		SET_BIT(SPI_SPSR,SPI_enuSPIF);
	}
	else if (SPI_INTERRUPT_STATE == SPI_INTERRUPT_DS)
	{
		GIE_enuInit_DisbaleGIE();
    1c66:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <GIE_enuInit_DisbaleGIE>

		CLR_BIT(SPI_SPCR,SPI_enuSPIE);
    1c6a:	ad e2       	ldi	r26, 0x2D	; 45
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	ed e2       	ldi	r30, 0x2D	; 45
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8f 77       	andi	r24, 0x7F	; 127
    1c76:	8c 93       	st	X, r24
		CLR_BIT(SPI_SPSR,SPI_enuSPIF);
    1c78:	ae e2       	ldi	r26, 0x2E	; 46
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	ee e2       	ldi	r30, 0x2E	; 46
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8f 77       	andi	r24, 0x7F	; 127
    1c84:	8c 93       	st	X, r24
	}

	/******* Data Order Configuration *************/
	if (SPI_DATA_ORDER_CONFIG == SPI_DATA_ORDER_LSB)
	{
		SET_BIT(SPI_SPCR,SPI_enuDORD);
    1c86:	ad e2       	ldi	r26, 0x2D	; 45
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	ed e2       	ldi	r30, 0x2D	; 45
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 62       	ori	r24, 0x20	; 32
    1c92:	8c 93       	st	X, r24
	{
		CLR_BIT(SPI_SPCR,SPI_enuMSTR);
	}
	else if (SPI_MCU_MASTER_SLAVE_SELECT == SPI_MCU_MASTER)
	{
		SET_BIT(SPI_SPCR,SPI_enuMSTR);
    1c94:	ad e2       	ldi	r26, 0x2D	; 45
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	ed e2       	ldi	r30, 0x2D	; 45
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	80 61       	ori	r24, 0x10	; 16
    1ca0:	8c 93       	st	X, r24
	}

	/*********** SPI Clock Polarity *********************/
	if (SPI_POLARITY_SELECTION == SPI_POLARITY_LOW)
	{
		CLR_BIT(SPI_SPCR,SPI_enuCPOL);
    1ca2:	ad e2       	ldi	r26, 0x2D	; 45
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	ed e2       	ldi	r30, 0x2D	; 45
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	87 7f       	andi	r24, 0xF7	; 247
    1cae:	8c 93       	st	X, r24
	}

	/********* SPI Clock Phase ******************/
	if (SPI_CLOCK_PHASE == SPI_DATA_SAMPLED_FIRST)
	{
		CLR_BIT(SPI_SPCR,SPI_enuCPHA);
    1cb0:	ad e2       	ldi	r26, 0x2D	; 45
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ed e2       	ldi	r30, 0x2D	; 45
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8b 7f       	andi	r24, 0xFB	; 251
    1cbc:	8c 93       	st	X, r24
		CLR_BIT(SPI_SPCR,SPI_enuSPR0);
		CLR_BIT(SPI_SPCR,SPI_enuSPR1);
		SET_BIT(SPI_SPSR,SPI_enuSPI2X);
		break;
	case SPI_enuPrescaler_8:
		SET_BIT(SPI_SPCR,SPI_enuSPR0);
    1cbe:	ad e2       	ldi	r26, 0x2D	; 45
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	ed e2       	ldi	r30, 0x2D	; 45
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	81 60       	ori	r24, 0x01	; 1
    1cca:	8c 93       	st	X, r24
		CLR_BIT(SPI_SPCR,SPI_enuSPR1);
    1ccc:	ad e2       	ldi	r26, 0x2D	; 45
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	ed e2       	ldi	r30, 0x2D	; 45
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8d 7f       	andi	r24, 0xFD	; 253
    1cd8:	8c 93       	st	X, r24
		SET_BIT(SPI_SPSR,SPI_enuSPI2X);
    1cda:	ae e2       	ldi	r26, 0x2E	; 46
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	ee e2       	ldi	r30, 0x2E	; 46
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	81 60       	ori	r24, 0x01	; 1
    1ce6:	8c 93       	st	X, r24
		SET_BIT(SPI_SPCR,SPI_enuSPR1);
		SET_BIT(SPI_SPSR,SPI_enuSPI2X);
		break;
	}

	return LocalErrorStatus;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <SPI_enuMasterInit>:
/****************************************************************/
SPI_enuErrorStatus SPI_enuMasterInit (void)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	0f 92       	push	r0
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
	SPI_enuErrorStatus LocalErrorStatus = SPI_enuOK;
    1cfc:	19 82       	std	Y+1, r1	; 0x01

	/* Data Order is left as default */

	/* NO Interrupt */
	GIE_enuInit_DisbaleGIE();
    1cfe:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <GIE_enuInit_DisbaleGIE>

	CLR_BIT(SPI_SPCR,SPI_enuSPIE);
    1d02:	ad e2       	ldi	r26, 0x2D	; 45
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	ed e2       	ldi	r30, 0x2D	; 45
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8f 77       	andi	r24, 0x7F	; 127
    1d0e:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPSR,SPI_enuSPIF);
    1d10:	ae e2       	ldi	r26, 0x2E	; 46
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	ee e2       	ldi	r30, 0x2E	; 46
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	8f 77       	andi	r24, 0x7F	; 127
    1d1c:	8c 93       	st	X, r24

	/********** Master Select **************/
	SET_BIT(SPI_SPCR,SPI_enuMSTR);
    1d1e:	ad e2       	ldi	r26, 0x2D	; 45
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	ed e2       	ldi	r30, 0x2D	; 45
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 61       	ori	r24, 0x10	; 16
    1d2a:	8c 93       	st	X, r24

	/* Leaving Both Clk polarity & Phase as defaults */

	/* Prescaler : Clk is Generated by the MASTER  : 16 */
	SET_BIT(SPI_SPCR,SPI_enuSPR0);
    1d2c:	ad e2       	ldi	r26, 0x2D	; 45
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	ed e2       	ldi	r30, 0x2D	; 45
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	81 60       	ori	r24, 0x01	; 1
    1d38:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPCR,SPI_enuSPR1);
    1d3a:	ad e2       	ldi	r26, 0x2D	; 45
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	ed e2       	ldi	r30, 0x2D	; 45
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8d 7f       	andi	r24, 0xFD	; 253
    1d46:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPSR,SPI_enuSPI2X);
    1d48:	ae e2       	ldi	r26, 0x2E	; 46
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	ee e2       	ldi	r30, 0x2E	; 46
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	8e 7f       	andi	r24, 0xFE	; 254
    1d54:	8c 93       	st	X, r24

	/* Enable SPI */
	SET_BIT(SPI_SPCR,SPI_enuSPE);
    1d56:	ad e2       	ldi	r26, 0x2D	; 45
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	ed e2       	ldi	r30, 0x2D	; 45
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 64       	ori	r24, 0x40	; 64
    1d62:	8c 93       	st	X, r24

	return LocalErrorStatus;
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d66:	0f 90       	pop	r0
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <SPI_enuSlaveInit>:
/****************************************************************/
SPI_enuErrorStatus SPI_enuSlaveInit  (void)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	0f 92       	push	r0
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
	SPI_enuErrorStatus LocalErrorStatus = SPI_enuOK;
    1d78:	19 82       	std	Y+1, r1	; 0x01

	/* Data Order is left as default */

	/* NO Interrupt */
	GIE_enuInit_DisbaleGIE();
    1d7a:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <GIE_enuInit_DisbaleGIE>

	CLR_BIT(SPI_SPCR,SPI_enuSPIE);
    1d7e:	ad e2       	ldi	r26, 0x2D	; 45
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	ed e2       	ldi	r30, 0x2D	; 45
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8f 77       	andi	r24, 0x7F	; 127
    1d8a:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPSR,SPI_enuSPIF);
    1d8c:	ae e2       	ldi	r26, 0x2E	; 46
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ee e2       	ldi	r30, 0x2E	; 46
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8f 77       	andi	r24, 0x7F	; 127
    1d98:	8c 93       	st	X, r24

	/********** Slave Select **************/
	CLR_BIT(SPI_SPCR,SPI_enuMSTR);
    1d9a:	ad e2       	ldi	r26, 0x2D	; 45
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	ed e2       	ldi	r30, 0x2D	; 45
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8f 7e       	andi	r24, 0xEF	; 239
    1da6:	8c 93       	st	X, r24

	/* Leaving Both Clk polarity & Phase as defaults */

	/* Enable SPI */
	SET_BIT(SPI_SPCR,SPI_enuSPE);
    1da8:	ad e2       	ldi	r26, 0x2D	; 45
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ed e2       	ldi	r30, 0x2D	; 45
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	80 64       	ori	r24, 0x40	; 64
    1db4:	8c 93       	st	X, r24

	return LocalErrorStatus;
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <SPI_u8Transcieve>:
/****************************************************************/
u8 SPI_u8Transcieve (u8 Cpy_u8Data)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <SPI_u8Transcieve+0x6>
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <SPI_u8Transcieve+0x8>
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <SPI_u8Transcieve+0xa>
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	8e 83       	std	Y+6, r24	; 0x06
	SPI_enuErrorStatus LocalErrorStatus = SPI_enuOK;
    1dd0:	1d 82       	std	Y+5, r1	; 0x05

	u8 LocalCounter=0;
    1dd2:	1c 82       	std	Y+4, r1	; 0x04
	u8 TIMEOUT = 255;
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	8b 83       	std	Y+3, r24	; 0x03

	u8 LocalInterruptFlag = GET_BIT(SPI_SPSR,SPI_enuSPIF);
    1dd8:	ae e2       	ldi	r26, 0x2E	; 46
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	ee e2       	ldi	r30, 0x2E	; 46
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	80 78       	andi	r24, 0x80	; 128
    1de4:	8c 93       	st	X, r24
    1de6:	8c 91       	ld	r24, X
    1de8:	8a 83       	std	Y+2, r24	; 0x02
	u8 LocalWriteCollisionFlag = GET_BIT(SPI_SPSR,SPI_enuWCOL);
    1dea:	ae e2       	ldi	r26, 0x2E	; 46
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	ee e2       	ldi	r30, 0x2E	; 46
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	80 74       	andi	r24, 0x40	; 64
    1df6:	8c 93       	st	X, r24
    1df8:	8c 91       	ld	r24, X
    1dfa:	89 83       	std	Y+1, r24	; 0x01

	/********* Sending **********/
	SPI_SPDR = Cpy_u8Data;
    1dfc:	ef e2       	ldi	r30, 0x2F	; 47
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	8e 81       	ldd	r24, Y+6	; 0x06
    1e02:	80 83       	st	Z, r24
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <SPI_u8Transcieve+0x4c>

	/* Waiting for transfer to complete */
	while ((LocalInterruptFlag != 1) && (LocalWriteCollisionFlag == 0) && (TIMEOUT > LocalCounter))
	{
		TIMEOUT --;
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	81 50       	subi	r24, 0x01	; 1
    1e0a:	8b 83       	std	Y+3, r24	; 0x03

	/********* Sending **********/
	SPI_SPDR = Cpy_u8Data;

	/* Waiting for transfer to complete */
	while ((LocalInterruptFlag != 1) && (LocalWriteCollisionFlag == 0) && (TIMEOUT > LocalCounter))
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	39 f0       	breq	.+14     	; 0x1e20 <SPI_u8Transcieve+0x60>
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	88 23       	and	r24, r24
    1e16:	21 f4       	brne	.+8      	; 0x1e20 <SPI_u8Transcieve+0x60>
    1e18:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	89 17       	cp	r24, r25
    1e1e:	98 f3       	brcs	.-26     	; 0x1e06 <SPI_u8Transcieve+0x46>
	{
		TIMEOUT --;
	}
	if (LocalWriteCollisionFlag == 1)
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	11 f4       	brne	.+4      	; 0x1e2a <SPI_u8Transcieve+0x6a>
	{
		LocalErrorStatus = SPI_enuDataCollision;
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	8d 83       	std	Y+5, r24	; 0x05
	}

	/******** Receiving **********/
	/* Return the updated value in the register */
	return SPI_SPDR;
    1e2a:	ef e2       	ldi	r30, 0x2F	; 47
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z

}
    1e30:	26 96       	adiw	r28, 0x06	; 6
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <__vector_SPI_INTERRUPT>:
//	return LocalErrorStatus;
//
//}
/****************************************************************/
SPI_ISR(SPI_INTERRUPT)
{
    1e42:	1f 92       	push	r1
    1e44:	0f 92       	push	r0
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	0f 92       	push	r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	8f 93       	push	r24
    1e4e:	ef 93       	push	r30
    1e50:	ff 93       	push	r31
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	SPI_SPDR = Cpy_u8DataTransfer;
    1e5a:	ef e2       	ldi	r30, 0x2F	; 47
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 91 a8 01 	lds	r24, 0x01A8
    1e62:	80 83       	st	Z, r24
}
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	ff 91       	pop	r31
    1e6a:	ef 91       	pop	r30
    1e6c:	8f 91       	pop	r24
    1e6e:	0f 90       	pop	r0
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	0f 90       	pop	r0
    1e74:	1f 90       	pop	r1
    1e76:	18 95       	reti

00001e78 <TMR0_enuInitPreCompile>:
static void (*Timer0_CallBack_CTC)(void) =		NULL;


/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuInitPreCompile(void)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    1e82:	19 82       	std	Y+1, r1	; 0x01

	/***************** Mode [WaveGeneration] ********************/
#if (TIMER0_Wave == TIMER_0_enuNormal_Mode)
	{
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM00);
    1e84:	a3 e5       	ldi	r26, 0x53	; 83
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e3 e5       	ldi	r30, 0x53	; 83
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8f 7b       	andi	r24, 0xBF	; 191
    1e90:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM01);
    1e92:	a3 e5       	ldi	r26, 0x53	; 83
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e3 e5       	ldi	r30, 0x53	; 83
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	87 7f       	andi	r24, 0xF7	; 247
    1e9e:	8c 93       	st	X, r24
#if (TIMER0_Mode == TIMER0_TimerMode)
		{
			/* Prescaler options */
#if (TIMER0_ClockSrc == TIMER_0_enuPrescaler_8)
			{
				CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    1ea0:	a3 e5       	ldi	r26, 0x53	; 83
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e3 e5       	ldi	r30, 0x53	; 83
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8e 7f       	andi	r24, 0xFE	; 254
    1eac:	8c 93       	st	X, r24
				SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    1eae:	a3 e5       	ldi	r26, 0x53	; 83
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e3 e5       	ldi	r30, 0x53	; 83
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	82 60       	ori	r24, 0x02	; 2
    1eba:	8c 93       	st	X, r24
				CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    1ebc:	a3 e5       	ldi	r26, 0x53	; 83
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e3 e5       	ldi	r30, 0x53	; 83
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	8b 7f       	andi	r24, 0xFB	; 251
    1ec8:	8c 93       	st	X, r24
		{LocalErrorStatus = TIMER0_enuInvalidCounterMode;}
#endif
	}

#else
	LocalErrorStatus = Timer0_enuOFF;
    1eca:	88 e0       	ldi	r24, 0x08	; 8
    1ecc:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
	}
#else
	LocalErrorStatus = Timer0_enuNOK;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01
#else
#endif
	}
#elif (TIMER0_SysInterrupt == TIMER0_InterruptOFF)
	{
		CLR_BIT(TIMER0_TIMSK,TIMER0_enuTIMSK_TOIE0);
    1ed2:	a9 e5       	ldi	r26, 0x59	; 89
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e9 e5       	ldi	r30, 0x59	; 89
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8e 7f       	andi	r24, 0xFE	; 254
    1ede:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_TIMSK,TIMER0_enuTIMSK_OCIE0);
    1ee0:	a9 e5       	ldi	r26, 0x59	; 89
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e9 e5       	ldi	r30, 0x59	; 89
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8d 7f       	andi	r24, 0xFD	; 253
    1eec:	8c 93       	st	X, r24
		{
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
		}
#else
		LocalErrorStatus = TIMER0_enuInvalidNonPWM_Mode;
    1eee:	8a e0       	ldi	r24, 0x0A	; 10
    1ef0:	89 83       	std	Y+1, r24	; 0x01
#endif

		// 2- Fast PWM
#if (TIMER0_CompareMatch_FastPWM_Mode == TIMER_0_enuCompareMatch_FastNormal)
		{
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    1ef2:	a3 e5       	ldi	r26, 0x53	; 83
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e3 e5       	ldi	r30, 0x53	; 83
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	8e 7f       	andi	r24, 0xFE	; 254
    1efe:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    1f00:	a3 e5       	ldi	r26, 0x53	; 83
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e3 e5       	ldi	r30, 0x53	; 83
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	8d 7f       	andi	r24, 0xFD	; 253
    1f0c:	8c 93       	st	X, r24
		{
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
		}
#else
		LocalErrorStatus = TIMER0_enuInvalidPhaseCorrect_Mode;
    1f0e:	8c e0       	ldi	r24, 0x0C	; 12
    1f10:	89 83       	std	Y+1, r24	; 0x01
	}
#else
	LocalErrorStatus = TIMER0_enuCompareMatchOFF;
#endif

	return LocalErrorStatus;
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <TMR0_enuInitPostCompile>:
/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuInitPostCompile(TMR0Config_t *TMR0Config)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	2d 97       	sbiw	r28, 0x0d	; 13
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	9b 83       	std	Y+3, r25	; 0x03
    1f32:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    1f34:	19 82       	std	Y+1, r1	; 0x01

	if (TMR0Config->Timer0_Mode < TIMER_0_enuNumberOfWaveformModes)
    1f36:	ea 81       	ldd	r30, Y+2	; 0x02
    1f38:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3a:	80 81       	ld	r24, Z
    1f3c:	84 30       	cpi	r24, 0x04	; 4
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <TMR0_enuInitPostCompile+0x26>
    1f40:	60 c0       	rjmp	.+192    	; 0x2002 <TMR0_enuInitPostCompile+0xe6>
	{
		switch(TMR0Config->Timer0_Mode)
    1f42:	ea 81       	ldd	r30, Y+2	; 0x02
    1f44:	fb 81       	ldd	r31, Y+3	; 0x03
    1f46:	80 81       	ld	r24, Z
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	3d 87       	std	Y+13, r19	; 0x0d
    1f4e:	2c 87       	std	Y+12, r18	; 0x0c
    1f50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f52:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f54:	81 30       	cpi	r24, 0x01	; 1
    1f56:	91 05       	cpc	r25, r1
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <TMR0_enuInitPostCompile+0x40>
    1f5a:	42 c0       	rjmp	.+132    	; 0x1fe0 <TMR0_enuInitPostCompile+0xc4>
    1f5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f5e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f60:	22 30       	cpi	r18, 0x02	; 2
    1f62:	31 05       	cpc	r19, r1
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <TMR0_enuInitPostCompile+0x54>
    1f66:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f68:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	61 f0       	breq	.+24     	; 0x1f86 <TMR0_enuInitPostCompile+0x6a>
    1f6e:	47 c0       	rjmp	.+142    	; 0x1ffe <TMR0_enuInitPostCompile+0xe2>
    1f70:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f72:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f74:	22 30       	cpi	r18, 0x02	; 2
    1f76:	31 05       	cpc	r19, r1
    1f78:	a9 f0       	breq	.+42     	; 0x1fa4 <TMR0_enuInitPostCompile+0x88>
    1f7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f7e:	83 30       	cpi	r24, 0x03	; 3
    1f80:	91 05       	cpc	r25, r1
    1f82:	f9 f0       	breq	.+62     	; 0x1fc2 <TMR0_enuInitPostCompile+0xa6>
    1f84:	3c c0       	rjmp	.+120    	; 0x1ffe <TMR0_enuInitPostCompile+0xe2>
		{
		case TIMER_0_enuNormal_Mode:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM00);
    1f86:	a3 e5       	ldi	r26, 0x53	; 83
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e3 e5       	ldi	r30, 0x53	; 83
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	8f 7b       	andi	r24, 0xBF	; 191
    1f92:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM01);
    1f94:	a3 e5       	ldi	r26, 0x53	; 83
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e3 e5       	ldi	r30, 0x53	; 83
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	87 7f       	andi	r24, 0xF7	; 247
    1fa0:	8c 93       	st	X, r24
    1fa2:	2f c0       	rjmp	.+94     	; 0x2002 <TMR0_enuInitPostCompile+0xe6>

			// 			TIMER0_TCCR0 = TMR0Config->Timer0_PreloadValue;
			break;

		case TIMER_0_enuCTC_Mode:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM00);
    1fa4:	a3 e5       	ldi	r26, 0x53	; 83
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e3 e5       	ldi	r30, 0x53	; 83
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8f 7b       	andi	r24, 0xBF	; 191
    1fb0:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM01);
    1fb2:	a3 e5       	ldi	r26, 0x53	; 83
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e3 e5       	ldi	r30, 0x53	; 83
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	88 60       	ori	r24, 0x08	; 8
    1fbe:	8c 93       	st	X, r24
    1fc0:	20 c0       	rjmp	.+64     	; 0x2002 <TMR0_enuInitPostCompile+0xe6>

			// 			TIMER0_OCR0 = TMR0Config->Timer0_PreloadValue;
			break;

		case TIMER_0_enuPWM_Fast_Mode:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM00);
    1fc2:	a3 e5       	ldi	r26, 0x53	; 83
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e3 e5       	ldi	r30, 0x53	; 83
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 64       	ori	r24, 0x40	; 64
    1fce:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM01);
    1fd0:	a3 e5       	ldi	r26, 0x53	; 83
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e3 e5       	ldi	r30, 0x53	; 83
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	88 60       	ori	r24, 0x08	; 8
    1fdc:	8c 93       	st	X, r24
    1fde:	11 c0       	rjmp	.+34     	; 0x2002 <TMR0_enuInitPostCompile+0xe6>

			// 			TIMER0_OCR0 = TMR0Config->Timer0_PreloadValue;
			break;

		case TIMER_0_enuPWM_PhaseCorrect_Mode:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM00);
    1fe0:	a3 e5       	ldi	r26, 0x53	; 83
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e3 e5       	ldi	r30, 0x53	; 83
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	80 64       	ori	r24, 0x40	; 64
    1fec:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_WGM01);
    1fee:	a3 e5       	ldi	r26, 0x53	; 83
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e3 e5       	ldi	r30, 0x53	; 83
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	87 7f       	andi	r24, 0xF7	; 247
    1ffa:	8c 93       	st	X, r24
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <TMR0_enuInitPostCompile+0xe6>

			// 			TIMER0_OCR0 = TMR0Config->Timer0_PreloadValue;
			break;

		default:
			LocalErrorStatus = Timer0_enuInvalidMode;
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	if (TMR0Config->Timer0_Clk < TIMER_0_enuNumberOfClockSelectionSources)
    2002:	ea 81       	ldd	r30, Y+2	; 0x02
    2004:	fb 81       	ldd	r31, Y+3	; 0x03
    2006:	81 81       	ldd	r24, Z+1	; 0x01
    2008:	88 30       	cpi	r24, 0x08	; 8
    200a:	08 f0       	brcs	.+2      	; 0x200e <TMR0_enuInitPostCompile+0xf2>
    200c:	ed c0       	rjmp	.+474    	; 0x21e8 <TMR0_enuInitPostCompile+0x2cc>
	{
		switch(TMR0Config->Timer0_Clk)
    200e:	ea 81       	ldd	r30, Y+2	; 0x02
    2010:	fb 81       	ldd	r31, Y+3	; 0x03
    2012:	81 81       	ldd	r24, Z+1	; 0x01
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	3b 87       	std	Y+11, r19	; 0x0b
    201a:	2a 87       	std	Y+10, r18	; 0x0a
    201c:	8a 85       	ldd	r24, Y+10	; 0x0a
    201e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2020:	83 30       	cpi	r24, 0x03	; 3
    2022:	91 05       	cpc	r25, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <TMR0_enuInitPostCompile+0x10c>
    2026:	70 c0       	rjmp	.+224    	; 0x2108 <TMR0_enuInitPostCompile+0x1ec>
    2028:	2a 85       	ldd	r18, Y+10	; 0x0a
    202a:	3b 85       	ldd	r19, Y+11	; 0x0b
    202c:	24 30       	cpi	r18, 0x04	; 4
    202e:	31 05       	cpc	r19, r1
    2030:	84 f4       	brge	.+32     	; 0x2052 <TMR0_enuInitPostCompile+0x136>
    2032:	8a 85       	ldd	r24, Y+10	; 0x0a
    2034:	9b 85       	ldd	r25, Y+11	; 0x0b
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	91 05       	cpc	r25, r1
    203a:	d1 f1       	breq	.+116    	; 0x20b0 <TMR0_enuInitPostCompile+0x194>
    203c:	2a 85       	ldd	r18, Y+10	; 0x0a
    203e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	31 05       	cpc	r19, r1
    2044:	0c f0       	brlt	.+2      	; 0x2048 <TMR0_enuInitPostCompile+0x12c>
    2046:	4a c0       	rjmp	.+148    	; 0x20dc <TMR0_enuInitPostCompile+0x1c0>
    2048:	8a 85       	ldd	r24, Y+10	; 0x0a
    204a:	9b 85       	ldd	r25, Y+11	; 0x0b
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	d1 f0       	breq	.+52     	; 0x2084 <TMR0_enuInitPostCompile+0x168>
    2050:	c9 c0       	rjmp	.+402    	; 0x21e4 <TMR0_enuInitPostCompile+0x2c8>
    2052:	2a 85       	ldd	r18, Y+10	; 0x0a
    2054:	3b 85       	ldd	r19, Y+11	; 0x0b
    2056:	25 30       	cpi	r18, 0x05	; 5
    2058:	31 05       	cpc	r19, r1
    205a:	09 f4       	brne	.+2      	; 0x205e <TMR0_enuInitPostCompile+0x142>
    205c:	81 c0       	rjmp	.+258    	; 0x2160 <TMR0_enuInitPostCompile+0x244>
    205e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2060:	9b 85       	ldd	r25, Y+11	; 0x0b
    2062:	85 30       	cpi	r24, 0x05	; 5
    2064:	91 05       	cpc	r25, r1
    2066:	0c f4       	brge	.+2      	; 0x206a <TMR0_enuInitPostCompile+0x14e>
    2068:	65 c0       	rjmp	.+202    	; 0x2134 <TMR0_enuInitPostCompile+0x218>
    206a:	2a 85       	ldd	r18, Y+10	; 0x0a
    206c:	3b 85       	ldd	r19, Y+11	; 0x0b
    206e:	26 30       	cpi	r18, 0x06	; 6
    2070:	31 05       	cpc	r19, r1
    2072:	09 f4       	brne	.+2      	; 0x2076 <TMR0_enuInitPostCompile+0x15a>
    2074:	8b c0       	rjmp	.+278    	; 0x218c <TMR0_enuInitPostCompile+0x270>
    2076:	8a 85       	ldd	r24, Y+10	; 0x0a
    2078:	9b 85       	ldd	r25, Y+11	; 0x0b
    207a:	87 30       	cpi	r24, 0x07	; 7
    207c:	91 05       	cpc	r25, r1
    207e:	09 f4       	brne	.+2      	; 0x2082 <TMR0_enuInitPostCompile+0x166>
    2080:	9b c0       	rjmp	.+310    	; 0x21b8 <TMR0_enuInitPostCompile+0x29c>
    2082:	b0 c0       	rjmp	.+352    	; 0x21e4 <TMR0_enuInitPostCompile+0x2c8>
		{
		case TIMER_0_enuDisabled:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2084:	a3 e5       	ldi	r26, 0x53	; 83
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e3 e5       	ldi	r30, 0x53	; 83
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8e 7f       	andi	r24, 0xFE	; 254
    2090:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2092:	a3 e5       	ldi	r26, 0x53	; 83
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e3 e5       	ldi	r30, 0x53	; 83
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8d 7f       	andi	r24, 0xFD	; 253
    209e:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    20a0:	a3 e5       	ldi	r26, 0x53	; 83
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e3 e5       	ldi	r30, 0x53	; 83
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	8b 7f       	andi	r24, 0xFB	; 251
    20ac:	8c 93       	st	X, r24
    20ae:	9c c0       	rjmp	.+312    	; 0x21e8 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuSystemClock:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    20b0:	a3 e5       	ldi	r26, 0x53	; 83
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e3 e5       	ldi	r30, 0x53	; 83
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	81 60       	ori	r24, 0x01	; 1
    20bc:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    20be:	a3 e5       	ldi	r26, 0x53	; 83
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e3 e5       	ldi	r30, 0x53	; 83
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	8d 7f       	andi	r24, 0xFD	; 253
    20ca:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    20cc:	a3 e5       	ldi	r26, 0x53	; 83
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e3 e5       	ldi	r30, 0x53	; 83
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	8b 7f       	andi	r24, 0xFB	; 251
    20d8:	8c 93       	st	X, r24
    20da:	86 c0       	rjmp	.+268    	; 0x21e8 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuPrescaler_8:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    20dc:	a3 e5       	ldi	r26, 0x53	; 83
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e3 e5       	ldi	r30, 0x53	; 83
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	8e 7f       	andi	r24, 0xFE	; 254
    20e8:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    20ea:	a3 e5       	ldi	r26, 0x53	; 83
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e3 e5       	ldi	r30, 0x53	; 83
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	82 60       	ori	r24, 0x02	; 2
    20f6:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    20f8:	a3 e5       	ldi	r26, 0x53	; 83
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e3 e5       	ldi	r30, 0x53	; 83
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8b 7f       	andi	r24, 0xFB	; 251
    2104:	8c 93       	st	X, r24
    2106:	70 c0       	rjmp	.+224    	; 0x21e8 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuPrescaler_64:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2108:	a3 e5       	ldi	r26, 0x53	; 83
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e3 e5       	ldi	r30, 0x53	; 83
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	81 60       	ori	r24, 0x01	; 1
    2114:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2116:	a3 e5       	ldi	r26, 0x53	; 83
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e3 e5       	ldi	r30, 0x53	; 83
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	82 60       	ori	r24, 0x02	; 2
    2122:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    2124:	a3 e5       	ldi	r26, 0x53	; 83
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e3 e5       	ldi	r30, 0x53	; 83
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	8b 7f       	andi	r24, 0xFB	; 251
    2130:	8c 93       	st	X, r24
    2132:	5a c0       	rjmp	.+180    	; 0x21e8 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuPrescaler_256:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2134:	a3 e5       	ldi	r26, 0x53	; 83
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e3 e5       	ldi	r30, 0x53	; 83
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	8e 7f       	andi	r24, 0xFE	; 254
    2140:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2142:	a3 e5       	ldi	r26, 0x53	; 83
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e3 e5       	ldi	r30, 0x53	; 83
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	8d 7f       	andi	r24, 0xFD	; 253
    214e:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    2150:	a3 e5       	ldi	r26, 0x53	; 83
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e3 e5       	ldi	r30, 0x53	; 83
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	84 60       	ori	r24, 0x04	; 4
    215c:	8c 93       	st	X, r24
    215e:	44 c0       	rjmp	.+136    	; 0x21e8 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuPrescaler_1024:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2160:	a3 e5       	ldi	r26, 0x53	; 83
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e3 e5       	ldi	r30, 0x53	; 83
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	81 60       	ori	r24, 0x01	; 1
    216c:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    216e:	a3 e5       	ldi	r26, 0x53	; 83
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e3 e5       	ldi	r30, 0x53	; 83
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	8d 7f       	andi	r24, 0xFD	; 253
    217a:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    217c:	a3 e5       	ldi	r26, 0x53	; 83
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e3 e5       	ldi	r30, 0x53	; 83
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	84 60       	ori	r24, 0x04	; 4
    2188:	8c 93       	st	X, r24
    218a:	2e c0       	rjmp	.+92     	; 0x21e8 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuCounterMode_FallingEdge:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    218c:	a3 e5       	ldi	r26, 0x53	; 83
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e3 e5       	ldi	r30, 0x53	; 83
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	8e 7f       	andi	r24, 0xFE	; 254
    2198:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    219a:	a3 e5       	ldi	r26, 0x53	; 83
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e3 e5       	ldi	r30, 0x53	; 83
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	82 60       	ori	r24, 0x02	; 2
    21a6:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    21a8:	a3 e5       	ldi	r26, 0x53	; 83
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e3 e5       	ldi	r30, 0x53	; 83
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	84 60       	ori	r24, 0x04	; 4
    21b4:	8c 93       	st	X, r24
    21b6:	18 c0       	rjmp	.+48     	; 0x21e8 <TMR0_enuInitPostCompile+0x2cc>
			break;

		case TIMER_0_enuCounterMode_RaisingEdge:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    21b8:	a3 e5       	ldi	r26, 0x53	; 83
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e3 e5       	ldi	r30, 0x53	; 83
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	81 60       	ori	r24, 0x01	; 1
    21c4:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    21c6:	a3 e5       	ldi	r26, 0x53	; 83
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e3 e5       	ldi	r30, 0x53	; 83
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	82 60       	ori	r24, 0x02	; 2
    21d2:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS02);
    21d4:	a3 e5       	ldi	r26, 0x53	; 83
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e3 e5       	ldi	r30, 0x53	; 83
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	84 60       	ori	r24, 0x04	; 4
    21e0:	8c 93       	st	X, r24
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <TMR0_enuInitPostCompile+0x2cc>
			break;

		default:
			LocalErrorStatus = Timer0_enuInvalidPrescaler;
    21e4:	84 e0       	ldi	r24, 0x04	; 4
    21e6:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	switch (TMR0Config->Timer0_CompareMatchOutput)
    21e8:	ea 81       	ldd	r30, Y+2	; 0x02
    21ea:	fb 81       	ldd	r31, Y+3	; 0x03
    21ec:	82 81       	ldd	r24, Z+2	; 0x02
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	39 87       	std	Y+9, r19	; 0x09
    21f4:	28 87       	std	Y+8, r18	; 0x08
    21f6:	88 85       	ldd	r24, Y+8	; 0x08
    21f8:	99 85       	ldd	r25, Y+9	; 0x09
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	21 f1       	breq	.+72     	; 0x2248 <TMR0_enuInitPostCompile+0x32c>
    2200:	28 85       	ldd	r18, Y+8	; 0x08
    2202:	39 85       	ldd	r19, Y+9	; 0x09
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	2c f4       	brge	.+10     	; 0x2214 <TMR0_enuInitPostCompile+0x2f8>
    220a:	88 85       	ldd	r24, Y+8	; 0x08
    220c:	99 85       	ldd	r25, Y+9	; 0x09
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	61 f0       	breq	.+24     	; 0x222a <TMR0_enuInitPostCompile+0x30e>
    2212:	47 c0       	rjmp	.+142    	; 0x22a2 <TMR0_enuInitPostCompile+0x386>
    2214:	28 85       	ldd	r18, Y+8	; 0x08
    2216:	39 85       	ldd	r19, Y+9	; 0x09
    2218:	22 30       	cpi	r18, 0x02	; 2
    221a:	31 05       	cpc	r19, r1
    221c:	21 f1       	breq	.+72     	; 0x2266 <TMR0_enuInitPostCompile+0x34a>
    221e:	88 85       	ldd	r24, Y+8	; 0x08
    2220:	99 85       	ldd	r25, Y+9	; 0x09
    2222:	83 30       	cpi	r24, 0x03	; 3
    2224:	91 05       	cpc	r25, r1
    2226:	71 f1       	breq	.+92     	; 0x2284 <TMR0_enuInitPostCompile+0x368>
    2228:	3c c0       	rjmp	.+120    	; 0x22a2 <TMR0_enuInitPostCompile+0x386>
	{
	case TIMER_0_enuCompareMatch_Normal:
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    222a:	a3 e5       	ldi	r26, 0x53	; 83
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e3 e5       	ldi	r30, 0x53	; 83
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8e 7f       	andi	r24, 0xFE	; 254
    2236:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2238:	a3 e5       	ldi	r26, 0x53	; 83
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e3 e5       	ldi	r30, 0x53	; 83
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8d 7f       	andi	r24, 0xFD	; 253
    2244:	8c 93       	st	X, r24
    2246:	2f c0       	rjmp	.+94     	; 0x22a6 <TMR0_enuInitPostCompile+0x38a>
		break;

	case TIMER_0_enuCompareMatch_Toggle:
		SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2248:	a3 e5       	ldi	r26, 0x53	; 83
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e3 e5       	ldi	r30, 0x53	; 83
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	81 60       	ori	r24, 0x01	; 1
    2254:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2256:	a3 e5       	ldi	r26, 0x53	; 83
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e3 e5       	ldi	r30, 0x53	; 83
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	8d 7f       	andi	r24, 0xFD	; 253
    2262:	8c 93       	st	X, r24
    2264:	20 c0       	rjmp	.+64     	; 0x22a6 <TMR0_enuInitPostCompile+0x38a>
		break;

	case TIMER_0_enuCompareMatch_Clear:
		CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2266:	a3 e5       	ldi	r26, 0x53	; 83
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e3 e5       	ldi	r30, 0x53	; 83
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8e 7f       	andi	r24, 0xFE	; 254
    2272:	8c 93       	st	X, r24
		SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2274:	a3 e5       	ldi	r26, 0x53	; 83
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e3 e5       	ldi	r30, 0x53	; 83
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	82 60       	ori	r24, 0x02	; 2
    2280:	8c 93       	st	X, r24
    2282:	11 c0       	rjmp	.+34     	; 0x22a6 <TMR0_enuInitPostCompile+0x38a>
		break;

	case TIMER_0_enuCompareMatch_Set:
		SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2284:	a3 e5       	ldi	r26, 0x53	; 83
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e3 e5       	ldi	r30, 0x53	; 83
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	81 60       	ori	r24, 0x01	; 1
    2290:	8c 93       	st	X, r24
		SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2292:	a3 e5       	ldi	r26, 0x53	; 83
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e3 e5       	ldi	r30, 0x53	; 83
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	8c 93       	st	X, r24
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <TMR0_enuInitPostCompile+0x38a>
		break;

	default:
		LocalErrorStatus = TIMER0_enuInvalidNonPWM_Mode;
    22a2:	8a e0       	ldi	r24, 0x0A	; 10
    22a4:	89 83       	std	Y+1, r24	; 0x01
	}
	/*******************/
	if (TMR0Config->Timer0_FastPWMOutput < TIMER_0_enuFastNumberOfCompareMatchModes)
    22a6:	ea 81       	ldd	r30, Y+2	; 0x02
    22a8:	fb 81       	ldd	r31, Y+3	; 0x03
    22aa:	83 81       	ldd	r24, Z+3	; 0x03
    22ac:	84 30       	cpi	r24, 0x04	; 4
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <TMR0_enuInitPostCompile+0x396>
    22b0:	5f c0       	rjmp	.+190    	; 0x2370 <TMR0_enuInitPostCompile+0x454>
	{
		switch (TMR0Config->Timer0_FastPWMOutput)
    22b2:	ea 81       	ldd	r30, Y+2	; 0x02
    22b4:	fb 81       	ldd	r31, Y+3	; 0x03
    22b6:	83 81       	ldd	r24, Z+3	; 0x03
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	3f 83       	std	Y+7, r19	; 0x07
    22be:	2e 83       	std	Y+6, r18	; 0x06
    22c0:	8e 81       	ldd	r24, Y+6	; 0x06
    22c2:	9f 81       	ldd	r25, Y+7	; 0x07
    22c4:	81 30       	cpi	r24, 0x01	; 1
    22c6:	91 05       	cpc	r25, r1
    22c8:	21 f1       	breq	.+72     	; 0x2312 <TMR0_enuInitPostCompile+0x3f6>
    22ca:	2e 81       	ldd	r18, Y+6	; 0x06
    22cc:	3f 81       	ldd	r19, Y+7	; 0x07
    22ce:	22 30       	cpi	r18, 0x02	; 2
    22d0:	31 05       	cpc	r19, r1
    22d2:	2c f4       	brge	.+10     	; 0x22de <TMR0_enuInitPostCompile+0x3c2>
    22d4:	8e 81       	ldd	r24, Y+6	; 0x06
    22d6:	9f 81       	ldd	r25, Y+7	; 0x07
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	61 f0       	breq	.+24     	; 0x22f4 <TMR0_enuInitPostCompile+0x3d8>
    22dc:	47 c0       	rjmp	.+142    	; 0x236c <TMR0_enuInitPostCompile+0x450>
    22de:	2e 81       	ldd	r18, Y+6	; 0x06
    22e0:	3f 81       	ldd	r19, Y+7	; 0x07
    22e2:	22 30       	cpi	r18, 0x02	; 2
    22e4:	31 05       	cpc	r19, r1
    22e6:	21 f1       	breq	.+72     	; 0x2330 <TMR0_enuInitPostCompile+0x414>
    22e8:	8e 81       	ldd	r24, Y+6	; 0x06
    22ea:	9f 81       	ldd	r25, Y+7	; 0x07
    22ec:	83 30       	cpi	r24, 0x03	; 3
    22ee:	91 05       	cpc	r25, r1
    22f0:	71 f1       	breq	.+92     	; 0x234e <TMR0_enuInitPostCompile+0x432>
    22f2:	3c c0       	rjmp	.+120    	; 0x236c <TMR0_enuInitPostCompile+0x450>
		{
		case TIMER_0_enuCompareMatch_FastNormal:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    22f4:	a3 e5       	ldi	r26, 0x53	; 83
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e3 e5       	ldi	r30, 0x53	; 83
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	8e 7f       	andi	r24, 0xFE	; 254
    2300:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2302:	a3 e5       	ldi	r26, 0x53	; 83
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e3 e5       	ldi	r30, 0x53	; 83
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	8d 7f       	andi	r24, 0xFD	; 253
    230e:	8c 93       	st	X, r24
    2310:	2f c0       	rjmp	.+94     	; 0x2370 <TMR0_enuInitPostCompile+0x454>
			break;

		case TIMER_0_enuCompareMatch_FastReserved:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2312:	a3 e5       	ldi	r26, 0x53	; 83
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e3 e5       	ldi	r30, 0x53	; 83
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	81 60       	ori	r24, 0x01	; 1
    231e:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2320:	a3 e5       	ldi	r26, 0x53	; 83
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e3 e5       	ldi	r30, 0x53	; 83
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	8d 7f       	andi	r24, 0xFD	; 253
    232c:	8c 93       	st	X, r24
    232e:	20 c0       	rjmp	.+64     	; 0x2370 <TMR0_enuInitPostCompile+0x454>
			break;

		case TIMER_0_enuCompareMatch_FastClearCM_SetTop:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2330:	a3 e5       	ldi	r26, 0x53	; 83
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e3 e5       	ldi	r30, 0x53	; 83
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	8e 7f       	andi	r24, 0xFE	; 254
    233c:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    233e:	a3 e5       	ldi	r26, 0x53	; 83
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e3 e5       	ldi	r30, 0x53	; 83
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	82 60       	ori	r24, 0x02	; 2
    234a:	8c 93       	st	X, r24
    234c:	11 c0       	rjmp	.+34     	; 0x2370 <TMR0_enuInitPostCompile+0x454>
			break;

		case TIMER_0_enuCompareMatch_FastSetCM_ClrTop:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    234e:	a3 e5       	ldi	r26, 0x53	; 83
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e3 e5       	ldi	r30, 0x53	; 83
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	81 60       	ori	r24, 0x01	; 1
    235a:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    235c:	a3 e5       	ldi	r26, 0x53	; 83
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e3 e5       	ldi	r30, 0x53	; 83
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	82 60       	ori	r24, 0x02	; 2
    2368:	8c 93       	st	X, r24
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <TMR0_enuInitPostCompile+0x454>
			break;

		default:
			LocalErrorStatus = TIMER0_enuInvalidNonPWM_Mode;
    236c:	8a e0       	ldi	r24, 0x0A	; 10
    236e:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	if (TMR0Config->Timer0_PhaseCorrectOutput < TIMER_0_enuPhaseCorrectNumberOfCompareMatchModes)
    2370:	ea 81       	ldd	r30, Y+2	; 0x02
    2372:	fb 81       	ldd	r31, Y+3	; 0x03
    2374:	84 81       	ldd	r24, Z+4	; 0x04
    2376:	84 30       	cpi	r24, 0x04	; 4
    2378:	08 f0       	brcs	.+2      	; 0x237c <TMR0_enuInitPostCompile+0x460>
    237a:	5f c0       	rjmp	.+190    	; 0x243a <TMR0_enuInitPostCompile+0x51e>
	{
		switch (TMR0Config->Timer0_PhaseCorrectOutput)
    237c:	ea 81       	ldd	r30, Y+2	; 0x02
    237e:	fb 81       	ldd	r31, Y+3	; 0x03
    2380:	84 81       	ldd	r24, Z+4	; 0x04
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	3d 83       	std	Y+5, r19	; 0x05
    2388:	2c 83       	std	Y+4, r18	; 0x04
    238a:	8c 81       	ldd	r24, Y+4	; 0x04
    238c:	9d 81       	ldd	r25, Y+5	; 0x05
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	91 05       	cpc	r25, r1
    2392:	21 f1       	breq	.+72     	; 0x23dc <TMR0_enuInitPostCompile+0x4c0>
    2394:	2c 81       	ldd	r18, Y+4	; 0x04
    2396:	3d 81       	ldd	r19, Y+5	; 0x05
    2398:	22 30       	cpi	r18, 0x02	; 2
    239a:	31 05       	cpc	r19, r1
    239c:	2c f4       	brge	.+10     	; 0x23a8 <TMR0_enuInitPostCompile+0x48c>
    239e:	8c 81       	ldd	r24, Y+4	; 0x04
    23a0:	9d 81       	ldd	r25, Y+5	; 0x05
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	61 f0       	breq	.+24     	; 0x23be <TMR0_enuInitPostCompile+0x4a2>
    23a6:	47 c0       	rjmp	.+142    	; 0x2436 <TMR0_enuInitPostCompile+0x51a>
    23a8:	2c 81       	ldd	r18, Y+4	; 0x04
    23aa:	3d 81       	ldd	r19, Y+5	; 0x05
    23ac:	22 30       	cpi	r18, 0x02	; 2
    23ae:	31 05       	cpc	r19, r1
    23b0:	21 f1       	breq	.+72     	; 0x23fa <TMR0_enuInitPostCompile+0x4de>
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	9d 81       	ldd	r25, Y+5	; 0x05
    23b6:	83 30       	cpi	r24, 0x03	; 3
    23b8:	91 05       	cpc	r25, r1
    23ba:	71 f1       	breq	.+92     	; 0x2418 <TMR0_enuInitPostCompile+0x4fc>
    23bc:	3c c0       	rjmp	.+120    	; 0x2436 <TMR0_enuInitPostCompile+0x51a>
		{
		case TIMER_0_enuCompareMatch_PhaseCorrect_Normal:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    23be:	a3 e5       	ldi	r26, 0x53	; 83
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e3 e5       	ldi	r30, 0x53	; 83
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	8e 7f       	andi	r24, 0xFE	; 254
    23ca:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    23cc:	a3 e5       	ldi	r26, 0x53	; 83
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e3 e5       	ldi	r30, 0x53	; 83
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	8d 7f       	andi	r24, 0xFD	; 253
    23d8:	8c 93       	st	X, r24
    23da:	2f c0       	rjmp	.+94     	; 0x243a <TMR0_enuInitPostCompile+0x51e>
			break;

		case TIMER_0_enuCompareMatch_PhaseCorrect_Reserved:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    23dc:	a3 e5       	ldi	r26, 0x53	; 83
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e3 e5       	ldi	r30, 0x53	; 83
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	81 60       	ori	r24, 0x01	; 1
    23e8:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    23ea:	a3 e5       	ldi	r26, 0x53	; 83
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e3 e5       	ldi	r30, 0x53	; 83
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8d 7f       	andi	r24, 0xFD	; 253
    23f6:	8c 93       	st	X, r24
    23f8:	20 c0       	rjmp	.+64     	; 0x243a <TMR0_enuInitPostCompile+0x51e>
			break;

		case TIMER_0_enuCompareMatch_PhaseCorrect_ClearUpCount_SetDownCount:
			CLR_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    23fa:	a3 e5       	ldi	r26, 0x53	; 83
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e3 e5       	ldi	r30, 0x53	; 83
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	8e 7f       	andi	r24, 0xFE	; 254
    2406:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2408:	a3 e5       	ldi	r26, 0x53	; 83
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e3 e5       	ldi	r30, 0x53	; 83
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	82 60       	ori	r24, 0x02	; 2
    2414:	8c 93       	st	X, r24
    2416:	11 c0       	rjmp	.+34     	; 0x243a <TMR0_enuInitPostCompile+0x51e>
			break;

		case TIMER_0_enuCompareMatch_PhaseCorrect_SetUpCount_ClrDownCount:
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS00);
    2418:	a3 e5       	ldi	r26, 0x53	; 83
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e3 e5       	ldi	r30, 0x53	; 83
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	81 60       	ori	r24, 0x01	; 1
    2424:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0,TIMER0_enuTCCR0_CS01);
    2426:	a3 e5       	ldi	r26, 0x53	; 83
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e3 e5       	ldi	r30, 0x53	; 83
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	82 60       	ori	r24, 0x02	; 2
    2432:	8c 93       	st	X, r24
    2434:	02 c0       	rjmp	.+4      	; 0x243a <TMR0_enuInitPostCompile+0x51e>
			break;

		default:
			LocalErrorStatus = TIMER0_enuInvalidNonPWM_Mode;
    2436:	8a e0       	ldi	r24, 0x0A	; 10
    2438:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return LocalErrorStatus;
    243a:	89 81       	ldd	r24, Y+1	; 0x01
}
    243c:	2d 96       	adiw	r28, 0x0d	; 13
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <TMR0_enuSetTimerValue>:
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;

}*/
/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuSetTimerValue (u8 Cpy_u8TimerValue)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	00 d0       	rcall	.+0      	; 0x2454 <TMR0_enuSetTimerValue+0x6>
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    245a:	19 82       	std	Y+1, r1	; 0x01
	if (Cpy_u8TimerValue < TIMER0_OVERFLOW_VAL)
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	8f 3f       	cpi	r24, 0xFF	; 255
    2460:	29 f0       	breq	.+10     	; 0x246c <TMR0_enuSetTimerValue+0x1e>
	{
		/* Writing Preload Value */
		TIMER0_TCNT0 = Cpy_u8TimerValue;
    2462:	e2 e5       	ldi	r30, 0x52	; 82
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	80 83       	st	Z, r24
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <TMR0_enuSetTimerValue+0x22>
	}
	else
	{
		LocalErrorStatus = TIMER0_enuReachedOverflowValue;
    246c:	8e e0       	ldi	r24, 0x0E	; 14
    246e:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorStatus;
    2470:	89 81       	ldd	r24, Y+1	; 0x01
}
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <TMR0_enuSetCompareMatchValue>:
/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuSetCompareMatchValue(u8 Cpy_u8CompareMatchValue)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	00 d0       	rcall	.+0      	; 0x2482 <TMR0_enuSetCompareMatchValue+0x6>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    2488:	19 82       	std	Y+1, r1	; 0x01
	if (Cpy_u8CompareMatchValue < TIMER0_OVERFLOW_VAL)
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	8f 3f       	cpi	r24, 0xFF	; 255
    248e:	29 f0       	breq	.+10     	; 0x249a <TMR0_enuSetCompareMatchValue+0x1e>
	{
		TIMER0_OCR0 = Cpy_u8CompareMatchValue;
    2490:	ec e5       	ldi	r30, 0x5C	; 92
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	80 83       	st	Z, r24
    2498:	02 c0       	rjmp	.+4      	; 0x249e <TMR0_enuSetCompareMatchValue+0x22>
	}
	else
	{
		LocalErrorStatus = TIMER0_enuReachedOverflowValue;
    249a:	8e e0       	ldi	r24, 0x0E	; 14
    249c:	89 83       	std	Y+1, r24	; 0x01
	}

	return LocalErrorStatus;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <TMR0_enuRegisterCallback_Overflow>:
/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuRegisterCallback_Overflow(void (*TMR0cbf_t)(void))
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <TMR0_enuRegisterCallback_Overflow+0x6>
    24b0:	0f 92       	push	r0
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	9b 83       	std	Y+3, r25	; 0x03
    24b8:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    24ba:	19 82       	std	Y+1, r1	; 0x01

	/* Set Interrupt for OVF */
	SET_BIT(TIMER0_TIMSK,TIMER0_enuTIMSK_TOIE0);
    24bc:	a9 e5       	ldi	r26, 0x59	; 89
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e9 e5       	ldi	r30, 0x59	; 89
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	81 60       	ori	r24, 0x01	; 1
    24c8:	8c 93       	st	X, r24

	if (TMR0cbf_t != NULL_PTR)
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	9b 81       	ldd	r25, Y+3	; 0x03
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	39 f0       	breq	.+14     	; 0x24e0 <TMR0_enuRegisterCallback_Overflow+0x36>
	{
		Timer0_CallBack_Overflow = TMR0cbf_t;
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	9b 81       	ldd	r25, Y+3	; 0x03
    24d6:	90 93 aa 01 	sts	0x01AA, r25
    24da:	80 93 a9 01 	sts	0x01A9, r24
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <TMR0_enuRegisterCallback_Overflow+0x3a>
	}
	else
	{
		LocalErrorStatus = TIMER0_enuNullPointerException;
    24e0:	8d e0       	ldi	r24, 0x0D	; 13
    24e2:	89 83       	std	Y+1, r24	; 0x01
	}

	return LocalErrorStatus;
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <TMR0_enuRegisterCallback_CTC>:
/*********************************************************************************************/
TIMER0_enuErrorStatus TMR0_enuRegisterCallback_CTC(void (*TMR0cbf_t)(void))
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <TMR0_enuRegisterCallback_CTC+0x6>
    24f8:	0f 92       	push	r0
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	9b 83       	std	Y+3, r25	; 0x03
    2500:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_enuErrorStatus LocalErrorStatus = Timer0_enuOk;
    2502:	19 82       	std	Y+1, r1	; 0x01

	/* Set Interrupt for CTC */
	SET_BIT(TIMER0_TIMSK,TIMER0_enuTIMSK_OCIE0);
    2504:	a9 e5       	ldi	r26, 0x59	; 89
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e9 e5       	ldi	r30, 0x59	; 89
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	82 60       	ori	r24, 0x02	; 2
    2510:	8c 93       	st	X, r24

	if (TMR0cbf_t != NULL_PTR)
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	9b 81       	ldd	r25, Y+3	; 0x03
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	39 f0       	breq	.+14     	; 0x2528 <TMR0_enuRegisterCallback_CTC+0x36>
	{
		Timer0_CallBack_CTC = TMR0cbf_t;
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	9b 81       	ldd	r25, Y+3	; 0x03
    251e:	90 93 ac 01 	sts	0x01AC, r25
    2522:	80 93 ab 01 	sts	0x01AB, r24
    2526:	02 c0       	rjmp	.+4      	; 0x252c <TMR0_enuRegisterCallback_CTC+0x3a>
	}
	else
	{
		LocalErrorStatus = TIMER0_enuNullPointerException;
    2528:	8d e0       	ldi	r24, 0x0D	; 13
    252a:	89 83       	std	Y+1, r24	; 0x01
	}

	return LocalErrorStatus;
    252c:	89 81       	ldd	r24, Y+1	; 0x01
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <__vector_ISR_TIMER0_OVF>:
/*********************************************************************************************/
/* Timer0 Overflow ISR */
TIMER_0_OverFlow(ISR_TIMER0_OVF)
{
    253a:	1f 92       	push	r1
    253c:	0f 92       	push	r0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	0f 92       	push	r0
    2542:	11 24       	eor	r1, r1
    2544:	2f 93       	push	r18
    2546:	3f 93       	push	r19
    2548:	4f 93       	push	r20
    254a:	5f 93       	push	r21
    254c:	6f 93       	push	r22
    254e:	7f 93       	push	r23
    2550:	8f 93       	push	r24
    2552:	9f 93       	push	r25
    2554:	af 93       	push	r26
    2556:	bf 93       	push	r27
    2558:	ef 93       	push	r30
    255a:	ff 93       	push	r31
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
	/* Check Pointer != NULL */
	if (Timer0_CallBack_Overflow != NULL_PTR)
    2564:	80 91 a9 01 	lds	r24, 0x01A9
    2568:	90 91 aa 01 	lds	r25, 0x01AA
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	29 f0       	breq	.+10     	; 0x257a <__vector_ISR_TIMER0_OVF+0x40>
	{
		Timer0_CallBack_Overflow();
    2570:	e0 91 a9 01 	lds	r30, 0x01A9
    2574:	f0 91 aa 01 	lds	r31, 0x01AA
    2578:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	ff 91       	pop	r31
    2580:	ef 91       	pop	r30
    2582:	bf 91       	pop	r27
    2584:	af 91       	pop	r26
    2586:	9f 91       	pop	r25
    2588:	8f 91       	pop	r24
    258a:	7f 91       	pop	r23
    258c:	6f 91       	pop	r22
    258e:	5f 91       	pop	r21
    2590:	4f 91       	pop	r20
    2592:	3f 91       	pop	r19
    2594:	2f 91       	pop	r18
    2596:	0f 90       	pop	r0
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	0f 90       	pop	r0
    259c:	1f 90       	pop	r1
    259e:	18 95       	reti

000025a0 <__vector_ISR_TIMER0_COMP>:
/*********************************************************************************************/
/* Timer0 Compare Match ISR */
TIMER_0_CompareMatch(ISR_TIMER0_COMP)
{
    25a0:	1f 92       	push	r1
    25a2:	0f 92       	push	r0
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	0f 92       	push	r0
    25a8:	11 24       	eor	r1, r1
    25aa:	2f 93       	push	r18
    25ac:	3f 93       	push	r19
    25ae:	4f 93       	push	r20
    25b0:	5f 93       	push	r21
    25b2:	6f 93       	push	r22
    25b4:	7f 93       	push	r23
    25b6:	8f 93       	push	r24
    25b8:	9f 93       	push	r25
    25ba:	af 93       	push	r26
    25bc:	bf 93       	push	r27
    25be:	ef 93       	push	r30
    25c0:	ff 93       	push	r31
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
	/* Check Pointer != NULL */
	if (Timer0_CallBack_CTC != NULL_PTR)
    25ca:	80 91 ab 01 	lds	r24, 0x01AB
    25ce:	90 91 ac 01 	lds	r25, 0x01AC
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	29 f0       	breq	.+10     	; 0x25e0 <__vector_ISR_TIMER0_COMP+0x40>
	{
		Timer0_CallBack_CTC();
    25d6:	e0 91 ab 01 	lds	r30, 0x01AB
    25da:	f0 91 ac 01 	lds	r31, 0x01AC
    25de:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	ff 91       	pop	r31
    25e6:	ef 91       	pop	r30
    25e8:	bf 91       	pop	r27
    25ea:	af 91       	pop	r26
    25ec:	9f 91       	pop	r25
    25ee:	8f 91       	pop	r24
    25f0:	7f 91       	pop	r23
    25f2:	6f 91       	pop	r22
    25f4:	5f 91       	pop	r21
    25f6:	4f 91       	pop	r20
    25f8:	3f 91       	pop	r19
    25fa:	2f 91       	pop	r18
    25fc:	0f 90       	pop	r0
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	0f 90       	pop	r0
    2602:	1f 90       	pop	r1
    2604:	18 95       	reti

00002606 <Delay_MS>:
/*    Delay PIN Function										*/
/*	  Input  : Time passed to halt system with [MILLIS]			*/
/*	  Output : Delay_tenuErrorStatus to Report Errors			*/
/****************************************************************/
Delay_tenuErrorStatus Delay_MS(u32 time)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	29 97       	sbiw	r28, 0x09	; 9
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	6e 83       	std	Y+6, r22	; 0x06
    261c:	7f 83       	std	Y+7, r23	; 0x07
    261e:	88 87       	std	Y+8, r24	; 0x08
    2620:	99 87       	std	Y+9, r25	; 0x09
	Delay_tenuErrorStatus Local_ErrorStatus = DELAY_enuOK;      	// Assuming the current status is OK
    2622:	1d 82       	std	Y+5, r1	; 0x05
	//u32 TIME=0;
	
	u32 Counter = 0 ;
    2624:	19 82       	std	Y+1, r1	; 0x01
    2626:	1a 82       	std	Y+2, r1	; 0x02
    2628:	1b 82       	std	Y+3, r1	; 0x03
    262a:	1c 82       	std	Y+4, r1	; 0x04
	time = (u32)((f32)time* Amplification *((f32)F_CPU/MHz));
    262c:	6e 81       	ldd	r22, Y+6	; 0x06
    262e:	7f 81       	ldd	r23, Y+7	; 0x07
    2630:	88 85       	ldd	r24, Y+8	; 0x08
    2632:	99 85       	ldd	r25, Y+9	; 0x09
    2634:	0e 94 9d 03 	call	0x73a	; 0x73a <__floatunsisf>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	26 e6       	ldi	r18, 0x66	; 102
    2642:	36 e6       	ldi	r19, 0x66	; 102
    2644:	47 eb       	ldi	r20, 0xB7	; 183
    2646:	52 e4       	ldi	r21, 0x42	; 66
    2648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e0       	ldi	r20, 0x00	; 0
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8e 83       	std	Y+6, r24	; 0x06
    2672:	9f 83       	std	Y+7, r25	; 0x07
    2674:	a8 87       	std	Y+8, r26	; 0x08
    2676:	b9 87       	std	Y+9, r27	; 0x09
    2678:	0c c0       	rjmp	.+24     	; 0x2692 <Delay_MS+0x8c>
	{
		*/
		while(Counter < time)
		//while(time)
		{
			asm("NOP"); // processor do nothing
    267a:	00 00       	nop
			Counter++;
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	9a 81       	ldd	r25, Y+2	; 0x02
    2680:	ab 81       	ldd	r26, Y+3	; 0x03
    2682:	bc 81       	ldd	r27, Y+4	; 0x04
    2684:	01 96       	adiw	r24, 0x01	; 1
    2686:	a1 1d       	adc	r26, r1
    2688:	b1 1d       	adc	r27, r1
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	ab 83       	std	Y+3, r26	; 0x03
    2690:	bc 83       	std	Y+4, r27	; 0x04
		Local_ErrorStatus = DELAY_enuNOK;
	}
	else
	{
		*/
		while(Counter < time)
    2692:	29 81       	ldd	r18, Y+1	; 0x01
    2694:	3a 81       	ldd	r19, Y+2	; 0x02
    2696:	4b 81       	ldd	r20, Y+3	; 0x03
    2698:	5c 81       	ldd	r21, Y+4	; 0x04
    269a:	8e 81       	ldd	r24, Y+6	; 0x06
    269c:	9f 81       	ldd	r25, Y+7	; 0x07
    269e:	a8 85       	ldd	r26, Y+8	; 0x08
    26a0:	b9 85       	ldd	r27, Y+9	; 0x09
    26a2:	28 17       	cp	r18, r24
    26a4:	39 07       	cpc	r19, r25
    26a6:	4a 07       	cpc	r20, r26
    26a8:	5b 07       	cpc	r21, r27
    26aa:	38 f3       	brcs	.-50     	; 0x267a <Delay_MS+0x74>
			asm("NOP"); // processor do nothing
			Counter++;
			//time--;
		}
	//}	
	return Local_ErrorStatus;
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
}
    26ae:	29 96       	adiw	r28, 0x09	; 9
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <Delay_US>:
/*    Delay Set PIN Function									*/
/*	  Input  : Time passed to halt system with 	[MICROS]		*/
/*	  Output : Delay_tenuErrorStatus to Report Errors			*/
/****************************************************************/
Delay_tenuErrorStatus Delay_US(u32 time)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	2d 97       	sbiw	r28, 0x0d	; 13
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	6a 87       	std	Y+10, r22	; 0x0a
    26d6:	7b 87       	std	Y+11, r23	; 0x0b
    26d8:	8c 87       	std	Y+12, r24	; 0x0c
    26da:	9d 87       	std	Y+13, r25	; 0x0d
	Delay_tenuErrorStatus Local_ErrorStatus = DELAY_enuOK;      	// Assuming the current status is OK
    26dc:	19 86       	std	Y+9, r1	; 0x09
	u32 TIME=0;
    26de:	1d 82       	std	Y+5, r1	; 0x05
    26e0:	1e 82       	std	Y+6, r1	; 0x06
    26e2:	1f 82       	std	Y+7, r1	; 0x07
    26e4:	18 86       	std	Y+8, r1	; 0x08
	
	u32 Counter = 0 ;
    26e6:	19 82       	std	Y+1, r1	; 0x01
    26e8:	1a 82       	std	Y+2, r1	; 0x02
    26ea:	1b 82       	std	Y+3, r1	; 0x03
    26ec:	1c 82       	std	Y+4, r1	; 0x04
	TIME = (u32)((f32)time* Amplification *((f32)F_CPU/GHz));
    26ee:	6a 85       	ldd	r22, Y+10	; 0x0a
    26f0:	7b 85       	ldd	r23, Y+11	; 0x0b
    26f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    26f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    26f6:	0e 94 9d 03 	call	0x73a	; 0x73a <__floatunsisf>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	bc 01       	movw	r22, r24
    2700:	cd 01       	movw	r24, r26
    2702:	26 e6       	ldi	r18, 0x66	; 102
    2704:	36 e6       	ldi	r19, 0x66	; 102
    2706:	47 eb       	ldi	r20, 0xB7	; 183
    2708:	52 e4       	ldi	r21, 0x42	; 66
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	2f e6       	ldi	r18, 0x6F	; 111
    2718:	32 e1       	ldi	r19, 0x12	; 18
    271a:	43 e0       	ldi	r20, 0x03	; 3
    271c:	5c e3       	ldi	r21, 0x3C	; 60
    271e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	bc 01       	movw	r22, r24
    2728:	cd 01       	movw	r24, r26
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	9e 83       	std	Y+6, r25	; 0x06
    2736:	af 83       	std	Y+7, r26	; 0x07
    2738:	b8 87       	std	Y+8, r27	; 0x08

	if (TIME != (time/100000))
    273a:	8a 85       	ldd	r24, Y+10	; 0x0a
    273c:	9b 85       	ldd	r25, Y+11	; 0x0b
    273e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2740:	bd 85       	ldd	r27, Y+13	; 0x0d
    2742:	20 ea       	ldi	r18, 0xA0	; 160
    2744:	36 e8       	ldi	r19, 0x86	; 134
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__udivmodsi4>
    2752:	da 01       	movw	r26, r20
    2754:	c9 01       	movw	r24, r18
    2756:	9c 01       	movw	r18, r24
    2758:	ad 01       	movw	r20, r26
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	af 81       	ldd	r26, Y+7	; 0x07
    2760:	b8 85       	ldd	r27, Y+8	; 0x08
    2762:	28 17       	cp	r18, r24
    2764:	39 07       	cpc	r19, r25
    2766:	4a 07       	cpc	r20, r26
    2768:	5b 07       	cpc	r21, r27
    276a:	79 f0       	breq	.+30     	; 0x278a <Delay_US+0xca>
	{
		Local_ErrorStatus = DELAY_enuNOK;
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	89 87       	std	Y+9, r24	; 0x09
    2770:	0c c0       	rjmp	.+24     	; 0x278a <Delay_US+0xca>
	}
	
	while(Counter < TIME)
	//while(time)
	{
		asm("NOP"); // processor do nothing
    2772:	00 00       	nop
		Counter++;
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	9a 81       	ldd	r25, Y+2	; 0x02
    2778:	ab 81       	ldd	r26, Y+3	; 0x03
    277a:	bc 81       	ldd	r27, Y+4	; 0x04
    277c:	01 96       	adiw	r24, 0x01	; 1
    277e:	a1 1d       	adc	r26, r1
    2780:	b1 1d       	adc	r27, r1
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	9a 83       	std	Y+2, r25	; 0x02
    2786:	ab 83       	std	Y+3, r26	; 0x03
    2788:	bc 83       	std	Y+4, r27	; 0x04
	if (TIME != (time/100000))
	{
		Local_ErrorStatus = DELAY_enuNOK;
	}
	
	while(Counter < TIME)
    278a:	29 81       	ldd	r18, Y+1	; 0x01
    278c:	3a 81       	ldd	r19, Y+2	; 0x02
    278e:	4b 81       	ldd	r20, Y+3	; 0x03
    2790:	5c 81       	ldd	r21, Y+4	; 0x04
    2792:	8d 81       	ldd	r24, Y+5	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	af 81       	ldd	r26, Y+7	; 0x07
    2798:	b8 85       	ldd	r27, Y+8	; 0x08
    279a:	28 17       	cp	r18, r24
    279c:	39 07       	cpc	r19, r25
    279e:	4a 07       	cpc	r20, r26
    27a0:	5b 07       	cpc	r21, r27
    27a2:	38 f3       	brcs	.-50     	; 0x2772 <Delay_US+0xb2>
		asm("NOP"); // processor do nothing
		Counter++;
		//time--;
	}	

	return Local_ErrorStatus;
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
}
    27a6:	2d 96       	adiw	r28, 0x0d	; 13
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <__udivmodsi4>:
    27b8:	a1 e2       	ldi	r26, 0x21	; 33
    27ba:	1a 2e       	mov	r1, r26
    27bc:	aa 1b       	sub	r26, r26
    27be:	bb 1b       	sub	r27, r27
    27c0:	fd 01       	movw	r30, r26
    27c2:	0d c0       	rjmp	.+26     	; 0x27de <__udivmodsi4_ep>

000027c4 <__udivmodsi4_loop>:
    27c4:	aa 1f       	adc	r26, r26
    27c6:	bb 1f       	adc	r27, r27
    27c8:	ee 1f       	adc	r30, r30
    27ca:	ff 1f       	adc	r31, r31
    27cc:	a2 17       	cp	r26, r18
    27ce:	b3 07       	cpc	r27, r19
    27d0:	e4 07       	cpc	r30, r20
    27d2:	f5 07       	cpc	r31, r21
    27d4:	20 f0       	brcs	.+8      	; 0x27de <__udivmodsi4_ep>
    27d6:	a2 1b       	sub	r26, r18
    27d8:	b3 0b       	sbc	r27, r19
    27da:	e4 0b       	sbc	r30, r20
    27dc:	f5 0b       	sbc	r31, r21

000027de <__udivmodsi4_ep>:
    27de:	66 1f       	adc	r22, r22
    27e0:	77 1f       	adc	r23, r23
    27e2:	88 1f       	adc	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	1a 94       	dec	r1
    27e8:	69 f7       	brne	.-38     	; 0x27c4 <__udivmodsi4_loop>
    27ea:	60 95       	com	r22
    27ec:	70 95       	com	r23
    27ee:	80 95       	com	r24
    27f0:	90 95       	com	r25
    27f2:	9b 01       	movw	r18, r22
    27f4:	ac 01       	movw	r20, r24
    27f6:	bd 01       	movw	r22, r26
    27f8:	cf 01       	movw	r24, r30
    27fa:	08 95       	ret

000027fc <__prologue_saves__>:
    27fc:	2f 92       	push	r2
    27fe:	3f 92       	push	r3
    2800:	4f 92       	push	r4
    2802:	5f 92       	push	r5
    2804:	6f 92       	push	r6
    2806:	7f 92       	push	r7
    2808:	8f 92       	push	r8
    280a:	9f 92       	push	r9
    280c:	af 92       	push	r10
    280e:	bf 92       	push	r11
    2810:	cf 92       	push	r12
    2812:	df 92       	push	r13
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	ca 1b       	sub	r28, r26
    2826:	db 0b       	sbc	r29, r27
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	09 94       	ijmp

00002834 <__epilogue_restores__>:
    2834:	2a 88       	ldd	r2, Y+18	; 0x12
    2836:	39 88       	ldd	r3, Y+17	; 0x11
    2838:	48 88       	ldd	r4, Y+16	; 0x10
    283a:	5f 84       	ldd	r5, Y+15	; 0x0f
    283c:	6e 84       	ldd	r6, Y+14	; 0x0e
    283e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2840:	8c 84       	ldd	r8, Y+12	; 0x0c
    2842:	9b 84       	ldd	r9, Y+11	; 0x0b
    2844:	aa 84       	ldd	r10, Y+10	; 0x0a
    2846:	b9 84       	ldd	r11, Y+9	; 0x09
    2848:	c8 84       	ldd	r12, Y+8	; 0x08
    284a:	df 80       	ldd	r13, Y+7	; 0x07
    284c:	ee 80       	ldd	r14, Y+6	; 0x06
    284e:	fd 80       	ldd	r15, Y+5	; 0x05
    2850:	0c 81       	ldd	r16, Y+4	; 0x04
    2852:	1b 81       	ldd	r17, Y+3	; 0x03
    2854:	aa 81       	ldd	r26, Y+2	; 0x02
    2856:	b9 81       	ldd	r27, Y+1	; 0x01
    2858:	ce 0f       	add	r28, r30
    285a:	d1 1d       	adc	r29, r1
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	ed 01       	movw	r28, r26
    2868:	08 95       	ret

0000286a <_exit>:
    286a:	f8 94       	cli

0000286c <__stop_program>:
    286c:	ff cf       	rjmp	.-2      	; 0x286c <__stop_program>
