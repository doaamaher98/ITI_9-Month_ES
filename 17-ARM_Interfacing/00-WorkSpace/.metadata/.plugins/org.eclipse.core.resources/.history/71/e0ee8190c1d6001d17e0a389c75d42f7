/*
 * UART.c
 *
 *  Created on: Apr 6, 2023
 *      Author: Doaa Maher
 */

#include "NVIC.h"

#include "USART_Interface.h"
#include "USART_Config.h"

/* ====================== Defines ============================== */
#define				IDLE				0
#define				BUSY				1

#define				INIT				2
#define				NOT_INIT			3

#define				F_CPU				16000000
/* ============================ Types ====================== */
// USART Registers
typedef struct
{
	volatile u32 USART_SR;
	volatile u32 USART_DR;
	volatile u32 USART_BRR;
	volatile u32 USART_CR1;
	volatile u32 USART_CR2;
	volatile u32 USART_CR3;
	volatile u32 USART_GTPR;
}USART_tstr_Registers_t;

// Array of 3 Peripherals sharing same type : same registers [on APB1 bus]
USART_tstr_Registers_t * const volatile USART[3] = {
		/* USART1 */ [USART_enuUSART1] = {0x40011400},
		/* USART2 */ [USART_enuUSART2] = {0x40011000},
		/* USART6 */ [USART_enuUSART6] = {0x40004400},
};

/* ================= Static Global Vars for TX ================= */
// For TX States for the 3 USARTs : Initially not initialized
static u8 TX_State[3] = {NOT_INIT,NOT_INIT,NOT_INIT};
// For TX Buffer to be Sent [array of pointers] // 2D Array
static u8 *TX_Buffer[3] = {NULL_PTR,NULL_PTR,NULL_PTR};
// For TX Size for the 3 USARTs
static u32 TX_Size[3] = {0,0,0};
// For TX Indicies
static u32 TX_Index[3] = {0,0,0};

/* Callback function */
static Callback_t TX_Cbf[3] = {NULL_PTR,NULL_PTR,NULL_PTR};
/* ============================================================= */
/* ================= Static Global Vars for RX ================= */
// For RX States for the 3 USARTs : Initially not initialized
static u8 RX_State[3] = {NOT_INIT,NOT_INIT,NOT_INIT};
// For RX Buffer to be Received [array of pointers] // 2D Array
static u8 *RX_Buffer[3] = {NULL_PTR,NULL_PTR,NULL_PTR};
// For RX Size for the 3 USARTs
static u32 RX_Size[3] = {0,0,0};
// For RX Indicies
static u32 RX_Index[3] = {0,0,0};

/* Callback Function */
static Callback_t RX_Cbf[3] = {NULL_PTR,NULL_PTR,NULL_PTR};
/* ============================================================= */
/* ==================== Static Functions Prototypes ============== */
static void USART_voidBaudRate_USART_Calculation (void);
static void USART_voidHandler (USART_enuChannels USART_Channel);
/* =============================================================== */
/* ====================== Global Variables ========================= */
static u8 USART_USED=0;

/* ========================= APIs Implementation ============================ */
static void USART_voidBaudRate_USART_Calculation (void)
{
	/* 								 fClk
	 * TX/RX Baud Rate = ---------------------------------
	 * 						  8 x (2-OVER8) * USARTDIV
	 */

	f32 USARTDIV = 0;			// Has value in BRR

	u32 Mantissa_Part =0;
	u32 Fraction_Part =0;

	u8 Over8_Bit =0;

	u16 LocalBaudRate = USART_Cfg[USART_USED].USART_BaudRate;

	u32 LocalBuffer =0;
	// Get the Value of Oversampling
	Over8_Bit = USART_Cfg[USART_USED].USART_OverSampling;

	// Checking OVER8 Condition to know the fractional part bits (3 or 4)
	if (Over8_Bit == USART_enuOverSampling_DIV_16)			// = 0
	{
		Over8_Bit = 0;
		// Fractional part is coded on 4-bits
	}
	else if (Over8_Bit == USART_enuOverSampling_DIV_8)		// = 1
	{
		Over8_Bit =1;
		// Fractional part is coded on 3-bits
		// DIV_FractionBit3 must be cleared.
		LocalBuffer = USART[USART_USED]->USART_BRR;

		LocalBuffer &= USART_BRR_DIV_FRACTION_BIT3_CLR;
	}

	// Calculating USARTDIV Value & Cast it to f32:
	USARTDIV = ((f32)(F_CPU / LocalBaudRate*8*(2-Over8_Bit)));

	// Assign the Mantissa Part : By Casting USARTDIV to u32
	Mantissa_Part = (u32)USARTDIV;

	// Assign the Fraction Part : By Subtracting (USARTDIV - Mantissa)
	// Checking the OverSampling was 16 or 8
	switch (Over8_Bit)
	{
	case USART_enuOverSampling_DIV_16:
	{
		Fraction_Part = (USARTDIV - Mantissa_Part) * 16;
	}
	break;

	case USART_enuOverSampling_DIV_8:
	{
		Fraction_Part = (USARTDIV - Mantissa_Part) * 8;
	}
	break;
	}

	// Finally, Assign the Mantissa & Fraction To BRR Register
	// Clearing the Register
	USART[USART_USED]->USART_BRR &= USART_BRR_CLR;

	USART[USART_USED]->USART_BRR = (Fraction_Part | USART_BRR_FRACTION_PART_SET);
	USART[USART_USED]->USART_BRR = (Mantissa_Part | USART_BRR_MANTISSA_PART_SET);
}
/************************************************************************************/
/* Before Transmitting the byte */
static void USART_voidHandler (USART_enuChannels USART_Channel)
{
	/* ========================= Transmission =============================== */
	// First, Check for TX State if it was Busy [Sending]
	if (TX_State[USART_Channel] == BUSY)
	{
		// Checking if transmission is completed
		if ((USART[USART_Channel]->USART_SR >> USART_enuTC) & 1)
		{
			// Check if the Index of TX was less than the TX Size
			if (TX_Index[USART_Channel] < TX_Size[USART_Channel])
			{
				/************* Data Transmission is happening ***************/
				// Move the Data from the Buffer "with the index" into the DR register
				USART[USART_Channel]->USART_DR = TX_Buffer[USART_Channel][TX_Index[USART_Channel]];
				// Increment Index Array
				TX_Index[USART_Channel]++;
			}
			else if (TX_Index[USART_Channel] > TX_Size[USART_Channel])
			{
				/************ Transmission is done *************/
				// Make State to be IDLE
				TX_State[USART_Channel] = IDLE;
				// Clear the Transmission Interrupt Flag
				USART[USART_Channel]->USART_CR1 &= USART_CR1_TXEIE_DS;
				// Check the TX Callback function
				if (TX_Cbf != NULL_PTR)
				{
					// Call it
					TX_Cbf[USART_Channel]();
				}
			}
		}
	}


	/* ========================= Reception =============================== */
	// First, Check for TX State if it was Busy [Sending]
	if (RX_State[USART_Channel] == BUSY)
	{
		// Check if the Index of RX was less than the RX Size
		if (RX_Index[USART_Channel] < RX_Size[USART_Channel])
		{
			/************* Data Reception is happening ***************/
			// Move the Data from the DR register "with the index" into the RX Buffer
			RX_Buffer[USART_Channel][RX_Index[USART_Channel]] = USART[USART_Channel]->USART_DR;
			// Increment Index Array
			RX_Index[USART_Channel]++;
		}
		else if (RX_Index[USART_Channel] > RX_Size[USART_Channel])
		{
			/************ Reception is done *************/
			// Make State to be IDLE
			RX_State[USART_Channel] = IDLE;
			// Clear the Receive Interrupt Flag
			USART[USART_Channel]->USART_CR1 &= USART_CR1_RXNEIE_DS;
			// Check the RX Callback function
			if (RX_Cbf != NULL_PTR)
			{
				// Call it
				RX_Cbf[USART_Channel]();
			}
		}
	}
}
/************************************************************************************/
USART_tenuErrorStatus USART_enuInit(const USART_tstrConfig_t *USART_Configurations)
{
	USART_tenuErrorStatus LocalErrorStatus = USART_enuOK;

	u8 LocalIterator = 0;
	u32 LocalBuffer = 0;

	for (LocalIterator=0; LocalIterator <NUMBER_OF_USART_CHANNELS ; LocalIterator++)
	{
		/* =========================== Setting AF ============================ */
		/* Setting Alternate Function with the Channel Number */
		/* USART1 & USART2 on AF : 7
		 * USART6		   on AF : 8
		 */
		if ((USART_Cfg[LocalIterator].USART_Channel == USART_enuUSART1) || (USART_Cfg[LocalIterator].USART_Channel == USART_enuUSART1))
		{
			// Set the Alternate Function : 7 For TX and RX Ports/Pins
			GPIO_enuSetAlternateFunctionHigh(USART_Cfg[LocalIterator].USART_Pins.USART_TX.GPIO_Port,USART_Cfg[LocalIterator].USART_Pins.USART_TX.GPIO_Pin,GPIO_enu_AF_HIGH_7);
			GPIO_enuSetAlternateFunctionHigh(USART_Cfg[LocalIterator].USART_Pins.USART_RX.GPIO_Port,USART_Cfg[LocalIterator].USART_Pins.USART_RX.GPIO_Pin,GPIO_enu_AF_HIGH_7);
		}

		else if (USART_Cfg[LocalIterator].USART_Channel == USART_enuUSART6)
		{
			// Set the Alternate Function : 8 For TX and RX Ports/Pins
			GPIO_enuSetAlternateFunctionHigh(USART_Cfg[LocalIterator].USART_Pins.USART_TX.GPIO_Port,USART_Cfg[LocalIterator].USART_Pins.USART_TX.GPIO_Pin,GPIO_enu_AF_HIGH_8);
		}

		// Initialize TX,RX Pins at GPIO_Init
		GPIO_enuInit(&USART_Cfg[LocalIterator].USART_Pins.USART_TX);
		GPIO_enuInit(&USART_Cfg[LocalIterator].USART_Pins.USART_RX);

		// Data Bits Initialization
		LocalBuffer = USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR1;
		if (USART_Cfg[LocalIterator].USART_DataBits == USART_enu_8_DataBits)
		{
			LocalBuffer |= USART_CR1_8_DATA_BITS;
		}
		else if (USART_Cfg[LocalIterator].USART_DataBits == USART_enu_9_DataBits)
		{
			LocalBuffer |= USART_CR1_9_DATA_BITS;
		}
		USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR1 = LocalBuffer;

		// Parity
		LocalBuffer = USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR1;
		if (USART_Cfg[LocalIterator].USART_ParityControl == USART_enuPARITY_EN)
		{
			if (USART_Cfg[LocalIterator].USART_ParityType == USART_enuOddParity)
			{
				LocalBuffer |= USART_CR1_PS_ODD;
			}
			else if (USART_Cfg[LocalIterator].USART_ParityType == USART_enuEvenParity)
			{
				LocalBuffer |= USART_CR1_PS_EVEN;
			}
		}
		USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR1 = LocalBuffer;

		// OverSampling
		LocalBuffer = USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR1;

		if (USART_Cfg[LocalIterator].USART_OverSampling == USART_CR1_OVERSAMPLE_DIV_8)
		{
			LocalBuffer |= USART_CR1_OVERSAMPLE_DIV_8;
		}
		else if (USART_Cfg[LocalIterator].USART_OverSampling == USART_CR1_OVERSAMPLE_DIV_16)
		{
			LocalBuffer |= USART_CR1_OVERSAMPLE_DIV_16;
		}
		USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR1 = LocalBuffer;

		// Stop Bits
		LocalBuffer = USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR2;

		if (USART_Cfg[LocalIterator].USART_StopBits == USART_enuStopBits_1)
		{
			LocalBuffer |= USART_CR2_1_STOP_BITS;
		}
		else if (USART_Cfg[LocalIterator].USART_StopBits == USART_enuStopBits_2)
		{
			LocalBuffer |= USART_CR2_2_STOP_BITS;
		}
		else if (USART_Cfg[LocalIterator].USART_StopBits == USART_enuStopBits_1_5)
		{
			LocalBuffer |= USART_CR2_1_5_STOP_BITS;
		}
		else if (USART_Cfg[LocalIterator].USART_StopBits == USART_enuStopBits_0_5)
		{
			LocalBuffer |= USART_CR2_0_5_STOP_BITS;
		}
		USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR2 = LocalBuffer;

		// BaudRate
		USART_voidBaudRate_USART_Calculation();

		/* Enable USART */
		USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR1 |= USART_CR1_EN;

		/* Enable TX & RX from the Config file */
		USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR1 |= USART_CR1_TXEIE_EN;
		USART[USART_Cfg[LocalIterator].USART_Channel]->USART_CR1 |= USART_CR1_RXNEIE_EN;

		/* Enable TX & RX Interrupts from NVIC */
		NVIC_enuEnableIRQ(&USART_Cfg[LocalIterator].USART_Channel);

		/* ========================== States =========================== */
		// Make TX,RX States to be IDLE
		TX_State[USART_Cfg[LocalIterator].USART_Channel] = IDLE;
		RX_State[USART_Cfg[LocalIterator].USART_Channel] = IDLE;
	}
	return LocalErrorStatus;
}
/************************************************************************************/
USART_tenuErrorStatus USART_enuSendAsynchZeroCpy (USART_enuChannels USART_Channel, u8 * Data_Buffer, u32 Data_Size , Callback_t Cpy_Cbf)
{
	USART_tenuErrorStatus LocalErrorStatus = USART_enuOK;

	// Checking TX State , if IDLE => It's Ready to Send
	if (TX_State[USART_Channel] == IDLE)
	{
		TX_State[USART_Channel]  = BUSY;

		TX_Buffer[USART_Channel] = Data_Buffer;
		TX_Size[USART_Channel]   = Data_Size;
		TX_Index[USART_Channel]  = 0;
		TX_Cbf[USART_Channel]    = Cpy_Cbf;

		// Send the Data from the Buffer into the DR
		USART[USART_Channel]->USART_DR = TX_Buffer[USART_Channel][TX_Index[USART_Channel]];
		// Enable TXC Interrupt
		USART[USART_Channel]->USART_CR1 |= USART_CR1_TCIE_EN;
		// Increment TX index
		TX_Index[USART_Channel]++;
	}
	else
	{
		LocalErrorStatus = USART_enuBUSY;
	}
	return LocalErrorStatus;
}
/************************************************************************************/
USART_tenuErrorStatus USART_enuReceiveAsynchZeroCpy (USART_enuChannels USART_Channel, u8 * Received_Buffer, u32 Data_Size , Callback_t Cpy_Cbf)
{
	USART_tenuErrorStatus LocalErrorStatus = USART_enuOK;

	// Checking RX State , if IDLE => It's Ready to Receive
	if (RX_State[USART_Channel] == IDLE)
	{
		RX_State[USART_Channel]  = BUSY;

		RX_Buffer[USART_Channel] = Received_Buffer;
		RX_Size[USART_Channel]   = Data_Size;
		RX_Index[USART_Channel]  = 0;
		RX_Cbf[USART_Channel]    = Cpy_Cbf;

		// Enable RXC Interrupt
		USART[USART_Channel]->USART_CR1 |= USART_CR1_RXNEIE_EN;
	}
	else
	{
		LocalErrorStatus = USART_enuBUSY;
	}

	return LocalErrorStatus;
}
/************************************************************************************/
u8 USART_u8GetCurrentStatus (void)
{

}
/************************************************************************************/
